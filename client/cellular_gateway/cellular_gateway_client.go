// Code generated by go-swagger; DO NOT EDIT.

package cellular_gateway

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cellular gateway API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cellular gateway API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDeviceCellularGatewayLan(params *GetDeviceCellularGatewayLanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCellularGatewayLanOK, error)

	GetDeviceCellularGatewayPortForwardingRules(params *GetDeviceCellularGatewayPortForwardingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCellularGatewayPortForwardingRulesOK, error)

	GetNetworkCellularGatewayConnectivityMonitoringDestinations(params *GetNetworkCellularGatewayConnectivityMonitoringDestinationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCellularGatewayConnectivityMonitoringDestinationsOK, error)

	GetNetworkCellularGatewayDhcp(params *GetNetworkCellularGatewayDhcpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCellularGatewayDhcpOK, error)

	GetNetworkCellularGatewaySubnetPool(params *GetNetworkCellularGatewaySubnetPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCellularGatewaySubnetPoolOK, error)

	GetNetworkCellularGatewayUplink(params *GetNetworkCellularGatewayUplinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCellularGatewayUplinkOK, error)

	GetOrganizationCellularGatewayUplinkStatuses(params *GetOrganizationCellularGatewayUplinkStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationCellularGatewayUplinkStatusesOK, error)

	UpdateDeviceCellularGatewayLan(params *UpdateDeviceCellularGatewayLanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCellularGatewayLanOK, error)

	UpdateDeviceCellularGatewayPortForwardingRules(params *UpdateDeviceCellularGatewayPortForwardingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCellularGatewayPortForwardingRulesOK, error)

	UpdateNetworkCellularGatewayConnectivityMonitoringDestinations(params *UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsOK, error)

	UpdateNetworkCellularGatewayDhcp(params *UpdateNetworkCellularGatewayDhcpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCellularGatewayDhcpOK, error)

	UpdateNetworkCellularGatewaySubnetPool(params *UpdateNetworkCellularGatewaySubnetPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCellularGatewaySubnetPoolOK, error)

	UpdateNetworkCellularGatewayUplink(params *UpdateNetworkCellularGatewayUplinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCellularGatewayUplinkOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDeviceCellularGatewayLan shows the l a n settings of a m g

  Show the LAN Settings of a MG
*/
func (a *Client) GetDeviceCellularGatewayLan(params *GetDeviceCellularGatewayLanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCellularGatewayLanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCellularGatewayLanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCellularGatewayLan",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/cellularGateway/lan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCellularGatewayLanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCellularGatewayLanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCellularGatewayLan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCellularGatewayPortForwardingRules returns the port forwarding rules for a single m g

  Returns the port forwarding rules for a single MG.
*/
func (a *Client) GetDeviceCellularGatewayPortForwardingRules(params *GetDeviceCellularGatewayPortForwardingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCellularGatewayPortForwardingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCellularGatewayPortForwardingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCellularGatewayPortForwardingRules",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/cellularGateway/portForwardingRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCellularGatewayPortForwardingRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCellularGatewayPortForwardingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCellularGatewayPortForwardingRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCellularGatewayConnectivityMonitoringDestinations returns the connectivity testing destinations for an m g network

  Return the connectivity testing destinations for an MG network
*/
func (a *Client) GetNetworkCellularGatewayConnectivityMonitoringDestinations(params *GetNetworkCellularGatewayConnectivityMonitoringDestinationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCellularGatewayConnectivityMonitoringDestinationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCellularGatewayConnectivityMonitoringDestinationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkCellularGatewayConnectivityMonitoringDestinations",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCellularGatewayConnectivityMonitoringDestinationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCellularGatewayConnectivityMonitoringDestinationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCellularGatewayConnectivityMonitoringDestinations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCellularGatewayDhcp lists common d h c p settings of m gs

  List common DHCP settings of MGs
*/
func (a *Client) GetNetworkCellularGatewayDhcp(params *GetNetworkCellularGatewayDhcpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCellularGatewayDhcpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCellularGatewayDhcpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkCellularGatewayDhcp",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/cellularGateway/dhcp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCellularGatewayDhcpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCellularGatewayDhcpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCellularGatewayDhcp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCellularGatewaySubnetPool returns the subnet pool and mask configured for m gs in the network

  Return the subnet pool and mask configured for MGs in the network.
*/
func (a *Client) GetNetworkCellularGatewaySubnetPool(params *GetNetworkCellularGatewaySubnetPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCellularGatewaySubnetPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCellularGatewaySubnetPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkCellularGatewaySubnetPool",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/cellularGateway/subnetPool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCellularGatewaySubnetPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCellularGatewaySubnetPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCellularGatewaySubnetPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCellularGatewayUplink returns the uplink settings for your m g network

  Returns the uplink settings for your MG network.
*/
func (a *Client) GetNetworkCellularGatewayUplink(params *GetNetworkCellularGatewayUplinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCellularGatewayUplinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCellularGatewayUplinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkCellularGatewayUplink",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/cellularGateway/uplink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCellularGatewayUplinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCellularGatewayUplinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCellularGatewayUplink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationCellularGatewayUplinkStatuses lists the uplink status of every meraki m g cellular gateway in the organization

  List the uplink status of every Meraki MG cellular gateway in the organization
*/
func (a *Client) GetOrganizationCellularGatewayUplinkStatuses(params *GetOrganizationCellularGatewayUplinkStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationCellularGatewayUplinkStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationCellularGatewayUplinkStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationCellularGatewayUplinkStatuses",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/cellularGateway/uplink/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationCellularGatewayUplinkStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationCellularGatewayUplinkStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationCellularGatewayUplinkStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceCellularGatewayLan updates the l a n settings for a single m g

  Update the LAN Settings for a single MG.
*/
func (a *Client) UpdateDeviceCellularGatewayLan(params *UpdateDeviceCellularGatewayLanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCellularGatewayLanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceCellularGatewayLanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDeviceCellularGatewayLan",
		Method:             "PUT",
		PathPattern:        "/devices/{serial}/cellularGateway/lan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceCellularGatewayLanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceCellularGatewayLanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceCellularGatewayLan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceCellularGatewayPortForwardingRules updates the port forwarding rules for a single m g

  Updates the port forwarding rules for a single MG.
*/
func (a *Client) UpdateDeviceCellularGatewayPortForwardingRules(params *UpdateDeviceCellularGatewayPortForwardingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCellularGatewayPortForwardingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceCellularGatewayPortForwardingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDeviceCellularGatewayPortForwardingRules",
		Method:             "PUT",
		PathPattern:        "/devices/{serial}/cellularGateway/portForwardingRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceCellularGatewayPortForwardingRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceCellularGatewayPortForwardingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceCellularGatewayPortForwardingRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkCellularGatewayConnectivityMonitoringDestinations updates the connectivity testing destinations for an m g network

  Update the connectivity testing destinations for an MG network
*/
func (a *Client) UpdateNetworkCellularGatewayConnectivityMonitoringDestinations(params *UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkCellularGatewayConnectivityMonitoringDestinationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkCellularGatewayConnectivityMonitoringDestinations",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/cellularGateway/connectivityMonitoringDestinations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkCellularGatewayConnectivityMonitoringDestinationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkCellularGatewayConnectivityMonitoringDestinations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkCellularGatewayDhcp updates common d h c p settings of m gs

  Update common DHCP settings of MGs
*/
func (a *Client) UpdateNetworkCellularGatewayDhcp(params *UpdateNetworkCellularGatewayDhcpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCellularGatewayDhcpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkCellularGatewayDhcpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkCellularGatewayDhcp",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/cellularGateway/dhcp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkCellularGatewayDhcpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkCellularGatewayDhcpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkCellularGatewayDhcp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkCellularGatewaySubnetPool updates the subnet pool and mask configuration for m gs in the network

  Update the subnet pool and mask configuration for MGs in the network.
*/
func (a *Client) UpdateNetworkCellularGatewaySubnetPool(params *UpdateNetworkCellularGatewaySubnetPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCellularGatewaySubnetPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkCellularGatewaySubnetPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkCellularGatewaySubnetPool",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/cellularGateway/subnetPool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkCellularGatewaySubnetPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkCellularGatewaySubnetPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkCellularGatewaySubnetPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkCellularGatewayUplink updates the uplink settings for your m g network

  Updates the uplink settings for your MG network.
*/
func (a *Client) UpdateNetworkCellularGatewayUplink(params *UpdateNetworkCellularGatewayUplinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCellularGatewayUplinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkCellularGatewayUplinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkCellularGatewayUplink",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/cellularGateway/uplink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkCellularGatewayUplinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkCellularGatewayUplinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkCellularGatewayUplink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
