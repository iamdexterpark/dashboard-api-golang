// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkSwitchRoutingOspfReader is a Reader for the UpdateNetworkSwitchRoutingOspf structure.
type UpdateNetworkSwitchRoutingOspfReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkSwitchRoutingOspfReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkSwitchRoutingOspfOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkSwitchRoutingOspfOK creates a UpdateNetworkSwitchRoutingOspfOK with default headers values
func NewUpdateNetworkSwitchRoutingOspfOK() *UpdateNetworkSwitchRoutingOspfOK {
	return &UpdateNetworkSwitchRoutingOspfOK{}
}

/* UpdateNetworkSwitchRoutingOspfOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkSwitchRoutingOspfOK struct {
	Payload interface{}
}

func (o *UpdateNetworkSwitchRoutingOspfOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/switch/routing/ospf][%d] updateNetworkSwitchRoutingOspfOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkSwitchRoutingOspfOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkSwitchRoutingOspfOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkSwitchRoutingOspfBody update network switch routing ospf body
// Example: {"areas":[{"areaId":"1284392014819","areaName":"Backbone","areaType":"normal"}],"deadTimerInSeconds":40,"enabled":true,"helloTimerInSeconds":10,"md5AuthenticationEnabled":true,"md5AuthenticationKey":{"id":1234,"passphrase":"abc1234"},"v3":{"areas":[{"areaId":"1284392014819","areaName":"V3 Backbone","areaType":"normal"}],"deadTimerInSeconds":40,"enabled":true,"helloTimerInSeconds":10}}
swagger:model UpdateNetworkSwitchRoutingOspfBody
*/
type UpdateNetworkSwitchRoutingOspfBody struct {

	// OSPF areas
	Areas []*UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0 `json:"areas"`

	// Time interval to determine when the peer will be declared inactive/dead. Value must be between 1 and 65535
	DeadTimerInSeconds int64 `json:"deadTimerInSeconds,omitempty"`

	// Boolean value to enable or disable OSPF routing. OSPF routing is disabled by default.
	Enabled bool `json:"enabled,omitempty"`

	// Time interval in seconds at which hello packet will be sent to OSPF neighbors to maintain connectivity. Value must be between 1 and 255. Default is 10 seconds.
	HelloTimerInSeconds int64 `json:"helloTimerInSeconds,omitempty"`

	// Boolean value to enable or disable MD5 authentication. MD5 authentication is disabled by default.
	Md5AuthenticationEnabled bool `json:"md5AuthenticationEnabled,omitempty"`

	// md5 authentication key
	Md5AuthenticationKey *UpdateNetworkSwitchRoutingOspfParamsBodyMd5AuthenticationKey `json:"md5AuthenticationKey,omitempty"`

	// v3
	V3 *UpdateNetworkSwitchRoutingOspfParamsBodyV3 `json:"v3,omitempty"`
}

// Validate validates this update network switch routing ospf body
func (o *UpdateNetworkSwitchRoutingOspfBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAreas(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMd5AuthenticationKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateV3(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfBody) validateAreas(formats strfmt.Registry) error {
	if swag.IsZero(o.Areas) { // not required
		return nil
	}

	for i := 0; i < len(o.Areas); i++ {
		if swag.IsZero(o.Areas[i]) { // not required
			continue
		}

		if o.Areas[i] != nil {
			if err := o.Areas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "areas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "areas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfBody) validateMd5AuthenticationKey(formats strfmt.Registry) error {
	if swag.IsZero(o.Md5AuthenticationKey) { // not required
		return nil
	}

	if o.Md5AuthenticationKey != nil {
		if err := o.Md5AuthenticationKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "md5AuthenticationKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "md5AuthenticationKey")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfBody) validateV3(formats strfmt.Registry) error {
	if swag.IsZero(o.V3) { // not required
		return nil
	}

	if o.V3 != nil {
		if err := o.V3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "v3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "v3")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network switch routing ospf body based on the context it is used
func (o *UpdateNetworkSwitchRoutingOspfBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAreas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMd5AuthenticationKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateV3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfBody) contextValidateAreas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Areas); i++ {

		if o.Areas[i] != nil {
			if err := o.Areas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "areas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "areas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfBody) contextValidateMd5AuthenticationKey(ctx context.Context, formats strfmt.Registry) error {

	if o.Md5AuthenticationKey != nil {
		if err := o.Md5AuthenticationKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "md5AuthenticationKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "md5AuthenticationKey")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfBody) contextValidateV3(ctx context.Context, formats strfmt.Registry) error {

	if o.V3 != nil {
		if err := o.V3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "v3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "v3")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingOspfBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingOspfBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchRoutingOspfBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0 update network switch routing ospf params body areas items0
swagger:model UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0
*/
type UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0 struct {

	// OSPF area ID
	// Required: true
	AreaID *string `json:"areaId"`

	// Name of the OSPF area
	// Required: true
	AreaName *string `json:"areaName"`

	// Area types in OSPF. Must be one of: ["normal", "stub", "nssa"]
	// Required: true
	// Enum: [normal stub nssa]
	AreaType *string `json:"areaType"`
}

// Validate validates this update network switch routing ospf params body areas items0
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAreaID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAreaName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAreaType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0) validateAreaID(formats strfmt.Registry) error {

	if err := validate.Required("areaId", "body", o.AreaID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0) validateAreaName(formats strfmt.Registry) error {

	if err := validate.Required("areaName", "body", o.AreaName); err != nil {
		return err
	}

	return nil
}

var updateNetworkSwitchRoutingOspfParamsBodyAreasItems0TypeAreaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["normal","stub","nssa"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSwitchRoutingOspfParamsBodyAreasItems0TypeAreaTypePropEnum = append(updateNetworkSwitchRoutingOspfParamsBodyAreasItems0TypeAreaTypePropEnum, v)
	}
}

const (

	// UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0AreaTypeNormal captures enum value "normal"
	UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0AreaTypeNormal string = "normal"

	// UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0AreaTypeStub captures enum value "stub"
	UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0AreaTypeStub string = "stub"

	// UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0AreaTypeNssa captures enum value "nssa"
	UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0AreaTypeNssa string = "nssa"
)

// prop value enum
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0) validateAreaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSwitchRoutingOspfParamsBodyAreasItems0TypeAreaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0) validateAreaType(formats strfmt.Registry) error {

	if err := validate.Required("areaType", "body", o.AreaType); err != nil {
		return err
	}

	// value enum
	if err := o.validateAreaTypeEnum("areaType", "body", *o.AreaType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network switch routing ospf params body areas items0 based on context it is used
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchRoutingOspfParamsBodyAreasItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkSwitchRoutingOspfParamsBodyMd5AuthenticationKey MD5 authentication credentials. This param is only relevant if md5AuthenticationEnabled is true
swagger:model UpdateNetworkSwitchRoutingOspfParamsBodyMd5AuthenticationKey
*/
type UpdateNetworkSwitchRoutingOspfParamsBodyMd5AuthenticationKey struct {

	// MD5 authentication key index. Key index must be between 1 to 255
	ID int64 `json:"id,omitempty"`

	// MD5 authentication passphrase
	Passphrase string `json:"passphrase,omitempty"`
}

// Validate validates this update network switch routing ospf params body md5 authentication key
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyMd5AuthenticationKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network switch routing ospf params body md5 authentication key based on context it is used
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyMd5AuthenticationKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyMd5AuthenticationKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyMd5AuthenticationKey) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchRoutingOspfParamsBodyMd5AuthenticationKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkSwitchRoutingOspfParamsBodyV3 OSPF v3 configuration
swagger:model UpdateNetworkSwitchRoutingOspfParamsBodyV3
*/
type UpdateNetworkSwitchRoutingOspfParamsBodyV3 struct {

	// OSPF v3 areas
	Areas []*UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0 `json:"areas"`

	// Time interval to determine when the peer will be declared inactive/dead. Value must be between 1 and 65535
	DeadTimerInSeconds int64 `json:"deadTimerInSeconds,omitempty"`

	// Boolean value to enable or disable V3 OSPF routing. OSPF V3 routing is disabled by default.
	Enabled bool `json:"enabled,omitempty"`

	// Time interval in seconds at which hello packet will be sent to OSPF neighbors to maintain connectivity. Value must be between 1 and 255. Default is 10 seconds.
	HelloTimerInSeconds int64 `json:"helloTimerInSeconds,omitempty"`
}

// Validate validates this update network switch routing ospf params body v3
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAreas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3) validateAreas(formats strfmt.Registry) error {
	if swag.IsZero(o.Areas) { // not required
		return nil
	}

	for i := 0; i < len(o.Areas); i++ {
		if swag.IsZero(o.Areas[i]) { // not required
			continue
		}

		if o.Areas[i] != nil {
			if err := o.Areas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "v3" + "." + "areas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "v3" + "." + "areas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network switch routing ospf params body v3 based on the context it is used
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAreas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3) contextValidateAreas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Areas); i++ {

		if o.Areas[i] != nil {
			if err := o.Areas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "v3" + "." + "areas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSwitchRoutingOspf" + "." + "v3" + "." + "areas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchRoutingOspfParamsBodyV3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0 update network switch routing ospf params body v3 areas items0
swagger:model UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0
*/
type UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0 struct {

	// OSPF area ID
	// Required: true
	AreaID *string `json:"areaId"`

	// Name of the OSPF area
	// Required: true
	AreaName *string `json:"areaName"`

	// Area types in OSPF. Must be one of: ["normal", "stub", "nssa"]
	// Required: true
	// Enum: [normal stub nssa]
	AreaType *string `json:"areaType"`
}

// Validate validates this update network switch routing ospf params body v3 areas items0
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAreaID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAreaName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAreaType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0) validateAreaID(formats strfmt.Registry) error {

	if err := validate.Required("areaId", "body", o.AreaID); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0) validateAreaName(formats strfmt.Registry) error {

	if err := validate.Required("areaName", "body", o.AreaName); err != nil {
		return err
	}

	return nil
}

var updateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0TypeAreaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["normal","stub","nssa"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0TypeAreaTypePropEnum = append(updateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0TypeAreaTypePropEnum, v)
	}
}

const (

	// UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0AreaTypeNormal captures enum value "normal"
	UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0AreaTypeNormal string = "normal"

	// UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0AreaTypeStub captures enum value "stub"
	UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0AreaTypeStub string = "stub"

	// UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0AreaTypeNssa captures enum value "nssa"
	UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0AreaTypeNssa string = "nssa"
)

// prop value enum
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0) validateAreaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0TypeAreaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0) validateAreaType(formats strfmt.Registry) error {

	if err := validate.Required("areaType", "body", o.AreaType); err != nil {
		return err
	}

	// value enum
	if err := o.validateAreaTypeEnum("areaType", "body", *o.AreaType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network switch routing ospf params body v3 areas items0 based on context it is used
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchRoutingOspfParamsBodyV3AreasItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
