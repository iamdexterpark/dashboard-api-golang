// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkSwitchDhcpServerPolicyReader is a Reader for the UpdateNetworkSwitchDhcpServerPolicy structure.
type UpdateNetworkSwitchDhcpServerPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkSwitchDhcpServerPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkSwitchDhcpServerPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkSwitchDhcpServerPolicyOK creates a UpdateNetworkSwitchDhcpServerPolicyOK with default headers values
func NewUpdateNetworkSwitchDhcpServerPolicyOK() *UpdateNetworkSwitchDhcpServerPolicyOK {
	return &UpdateNetworkSwitchDhcpServerPolicyOK{}
}

/* UpdateNetworkSwitchDhcpServerPolicyOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkSwitchDhcpServerPolicyOK struct {
	Payload interface{}
}

func (o *UpdateNetworkSwitchDhcpServerPolicyOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/switch/dhcpServerPolicy][%d] updateNetworkSwitchDhcpServerPolicyOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkSwitchDhcpServerPolicyOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkSwitchDhcpServerPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkSwitchDhcpServerPolicyBody update network switch dhcp server policy body
// Example: {"alerts":{"email":{"enabled":false}},"allowedServers":["00:50:56:00:00:01","00:50:56:00:00:02"],"arpInspection":{"enabled":false},"blockedServers":["00:50:56:00:00:03","00:50:56:00:00:04"],"defaultPolicy":"block"}
swagger:model UpdateNetworkSwitchDhcpServerPolicyBody
*/
type UpdateNetworkSwitchDhcpServerPolicyBody struct {

	// List the MAC addresses of DHCP servers to permit on the network when defaultPolicy is set to block. An empty array will clear the entries.
	AllowedServers []string `json:"allowedServers"`

	// List the MAC addresses of DHCP servers to block on the network when defaultPolicy is set to allow. An empty array will clear the entries.
	BlockedServers []string `json:"blockedServers"`

	// 'allow' or 'block' new DHCP servers. Default value is 'allow'.
	// Enum: [allow block]
	DefaultPolicy string `json:"defaultPolicy,omitempty"`
}

// Validate validates this update network switch dhcp server policy body
func (o *UpdateNetworkSwitchDhcpServerPolicyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDefaultPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSwitchDhcpServerPolicyBodyTypeDefaultPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","block"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSwitchDhcpServerPolicyBodyTypeDefaultPolicyPropEnum = append(updateNetworkSwitchDhcpServerPolicyBodyTypeDefaultPolicyPropEnum, v)
	}
}

const (

	// UpdateNetworkSwitchDhcpServerPolicyBodyDefaultPolicyAllow captures enum value "allow"
	UpdateNetworkSwitchDhcpServerPolicyBodyDefaultPolicyAllow string = "allow"

	// UpdateNetworkSwitchDhcpServerPolicyBodyDefaultPolicyBlock captures enum value "block"
	UpdateNetworkSwitchDhcpServerPolicyBodyDefaultPolicyBlock string = "block"
)

// prop value enum
func (o *UpdateNetworkSwitchDhcpServerPolicyBody) validateDefaultPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSwitchDhcpServerPolicyBodyTypeDefaultPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSwitchDhcpServerPolicyBody) validateDefaultPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.DefaultPolicy) { // not required
		return nil
	}

	// value enum
	if err := o.validateDefaultPolicyEnum("updateNetworkSwitchDhcpServerPolicy"+"."+"defaultPolicy", "body", o.DefaultPolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network switch dhcp server policy body based on context it is used
func (o *UpdateNetworkSwitchDhcpServerPolicyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSwitchDhcpServerPolicyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSwitchDhcpServerPolicyBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchDhcpServerPolicyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
