// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetDeviceSwitchRoutingInterfacesReader is a Reader for the GetDeviceSwitchRoutingInterfaces structure.
type GetDeviceSwitchRoutingInterfacesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDeviceSwitchRoutingInterfacesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDeviceSwitchRoutingInterfacesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDeviceSwitchRoutingInterfacesOK creates a GetDeviceSwitchRoutingInterfacesOK with default headers values
func NewGetDeviceSwitchRoutingInterfacesOK() *GetDeviceSwitchRoutingInterfacesOK {
	return &GetDeviceSwitchRoutingInterfacesOK{}
}

/* GetDeviceSwitchRoutingInterfacesOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetDeviceSwitchRoutingInterfacesOK struct {
	Payload []interface{}
}

func (o *GetDeviceSwitchRoutingInterfacesOK) Error() string {
	return fmt.Sprintf("[GET /devices/{serial}/switch/routing/interfaces][%d] getDeviceSwitchRoutingInterfacesOK  %+v", 200, o.Payload)
}
func (o *GetDeviceSwitchRoutingInterfacesOK) GetPayload() []interface{} {
	return o.Payload
}

func (o *GetDeviceSwitchRoutingInterfacesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
