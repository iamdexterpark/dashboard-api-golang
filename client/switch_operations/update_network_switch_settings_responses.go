// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkSwitchSettingsReader is a Reader for the UpdateNetworkSwitchSettings structure.
type UpdateNetworkSwitchSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkSwitchSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkSwitchSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkSwitchSettingsOK creates a UpdateNetworkSwitchSettingsOK with default headers values
func NewUpdateNetworkSwitchSettingsOK() *UpdateNetworkSwitchSettingsOK {
	return &UpdateNetworkSwitchSettingsOK{}
}

/* UpdateNetworkSwitchSettingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkSwitchSettingsOK struct {
	Payload interface{}
}

func (o *UpdateNetworkSwitchSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/switch/settings][%d] updateNetworkSwitchSettingsOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkSwitchSettingsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkSwitchSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkSwitchSettingsBody update network switch settings body
// Example: {"powerExceptions":[{"powerType":"redundant","serial":"Q234-ABCD-0001"},{"powerType":"combined","serial":"Q234-ABCD-0002"},{"powerType":"redundant","serial":"Q234-ABCD-0003"},{"powerType":"useNetworkSetting","serial":"Q234-ABCD-0004"}],"useCombinedPower":false,"vlan":100}
swagger:model UpdateNetworkSwitchSettingsBody
*/
type UpdateNetworkSwitchSettingsBody struct {

	// Exceptions on a per switch basis to "useCombinedPower"
	PowerExceptions []*UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0 `json:"powerExceptions"`

	// The use Combined Power as the default behavior of secondary power supplies on supported devices.
	UseCombinedPower bool `json:"useCombinedPower,omitempty"`

	// Management VLAN
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this update network switch settings body
func (o *UpdateNetworkSwitchSettingsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePowerExceptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchSettingsBody) validatePowerExceptions(formats strfmt.Registry) error {
	if swag.IsZero(o.PowerExceptions) { // not required
		return nil
	}

	for i := 0; i < len(o.PowerExceptions); i++ {
		if swag.IsZero(o.PowerExceptions[i]) { // not required
			continue
		}

		if o.PowerExceptions[i] != nil {
			if err := o.PowerExceptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSwitchSettings" + "." + "powerExceptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSwitchSettings" + "." + "powerExceptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network switch settings body based on the context it is used
func (o *UpdateNetworkSwitchSettingsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePowerExceptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchSettingsBody) contextValidatePowerExceptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.PowerExceptions); i++ {

		if o.PowerExceptions[i] != nil {
			if err := o.PowerExceptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSwitchSettings" + "." + "powerExceptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSwitchSettings" + "." + "powerExceptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSwitchSettingsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSwitchSettingsBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchSettingsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0 update network switch settings params body power exceptions items0
swagger:model UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0
*/
type UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0 struct {

	// Per switch exception (combined, redundant, useNetworkSetting)
	// Required: true
	// Enum: [combined redundant useNetworkSetting]
	PowerType *string `json:"powerType"`

	// Serial number of the switch
	// Required: true
	Serial *string `json:"serial"`
}

// Validate validates this update network switch settings params body power exceptions items0
func (o *UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePowerType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSerial(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0TypePowerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["combined","redundant","useNetworkSetting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0TypePowerTypePropEnum = append(updateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0TypePowerTypePropEnum, v)
	}
}

const (

	// UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0PowerTypeCombined captures enum value "combined"
	UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0PowerTypeCombined string = "combined"

	// UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0PowerTypeRedundant captures enum value "redundant"
	UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0PowerTypeRedundant string = "redundant"

	// UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0PowerTypeUseNetworkSetting captures enum value "useNetworkSetting"
	UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0PowerTypeUseNetworkSetting string = "useNetworkSetting"
)

// prop value enum
func (o *UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0) validatePowerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0TypePowerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0) validatePowerType(formats strfmt.Registry) error {

	if err := validate.Required("powerType", "body", o.PowerType); err != nil {
		return err
	}

	// value enum
	if err := o.validatePowerTypeEnum("powerType", "body", *o.PowerType); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0) validateSerial(formats strfmt.Registry) error {

	if err := validate.Required("serial", "body", o.Serial); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network switch settings params body power exceptions items0 based on context it is used
func (o *UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchSettingsParamsBodyPowerExceptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
