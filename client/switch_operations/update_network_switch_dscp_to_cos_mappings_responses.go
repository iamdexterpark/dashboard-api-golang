// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkSwitchDscpToCosMappingsReader is a Reader for the UpdateNetworkSwitchDscpToCosMappings structure.
type UpdateNetworkSwitchDscpToCosMappingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkSwitchDscpToCosMappingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkSwitchDscpToCosMappingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkSwitchDscpToCosMappingsOK creates a UpdateNetworkSwitchDscpToCosMappingsOK with default headers values
func NewUpdateNetworkSwitchDscpToCosMappingsOK() *UpdateNetworkSwitchDscpToCosMappingsOK {
	return &UpdateNetworkSwitchDscpToCosMappingsOK{}
}

/* UpdateNetworkSwitchDscpToCosMappingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkSwitchDscpToCosMappingsOK struct {
	Payload interface{}
}

func (o *UpdateNetworkSwitchDscpToCosMappingsOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/switch/dscpToCosMappings][%d] updateNetworkSwitchDscpToCosMappingsOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkSwitchDscpToCosMappingsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkSwitchDscpToCosMappingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkSwitchDscpToCosMappingsBody update network switch dscp to cos mappings body
// Example: {"mappings":[{"cos":1,"dscp":1,"title":"Video"}]}
swagger:model UpdateNetworkSwitchDscpToCosMappingsBody
*/
type UpdateNetworkSwitchDscpToCosMappingsBody struct {

	// An array of DSCP to CoS mappings. An empty array will reset the mappings to default.
	// Required: true
	Mappings []*UpdateNetworkSwitchDscpToCosMappingsParamsBodyMappingsItems0 `json:"mappings"`
}

// Validate validates this update network switch dscp to cos mappings body
func (o *UpdateNetworkSwitchDscpToCosMappingsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMappings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchDscpToCosMappingsBody) validateMappings(formats strfmt.Registry) error {

	if err := validate.Required("updateNetworkSwitchDscpToCosMappings"+"."+"mappings", "body", o.Mappings); err != nil {
		return err
	}

	for i := 0; i < len(o.Mappings); i++ {
		if swag.IsZero(o.Mappings[i]) { // not required
			continue
		}

		if o.Mappings[i] != nil {
			if err := o.Mappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSwitchDscpToCosMappings" + "." + "mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSwitchDscpToCosMappings" + "." + "mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network switch dscp to cos mappings body based on the context it is used
func (o *UpdateNetworkSwitchDscpToCosMappingsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchDscpToCosMappingsBody) contextValidateMappings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Mappings); i++ {

		if o.Mappings[i] != nil {
			if err := o.Mappings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkSwitchDscpToCosMappings" + "." + "mappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkSwitchDscpToCosMappings" + "." + "mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSwitchDscpToCosMappingsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSwitchDscpToCosMappingsBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchDscpToCosMappingsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkSwitchDscpToCosMappingsParamsBodyMappingsItems0 update network switch dscp to cos mappings params body mappings items0
swagger:model UpdateNetworkSwitchDscpToCosMappingsParamsBodyMappingsItems0
*/
type UpdateNetworkSwitchDscpToCosMappingsParamsBodyMappingsItems0 struct {

	// The actual layer-2 CoS queue the DSCP value is mapped to. These are not bits set on outgoing frames. Value can be in the range of 0 to 5 inclusive.
	// Required: true
	Cos *int64 `json:"cos"`

	// The Differentiated Services Code Point (DSCP) tag in the IP header that will be mapped to a particular Class-of-Service (CoS) queue. Value can be in the range of 0 to 63 inclusive.
	// Required: true
	Dscp *int64 `json:"dscp"`

	// Label for the mapping (optional).
	Title string `json:"title,omitempty"`
}

// Validate validates this update network switch dscp to cos mappings params body mappings items0
func (o *UpdateNetworkSwitchDscpToCosMappingsParamsBodyMappingsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCos(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDscp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchDscpToCosMappingsParamsBodyMappingsItems0) validateCos(formats strfmt.Registry) error {

	if err := validate.Required("cos", "body", o.Cos); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkSwitchDscpToCosMappingsParamsBodyMappingsItems0) validateDscp(formats strfmt.Registry) error {

	if err := validate.Required("dscp", "body", o.Dscp); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network switch dscp to cos mappings params body mappings items0 based on context it is used
func (o *UpdateNetworkSwitchDscpToCosMappingsParamsBodyMappingsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSwitchDscpToCosMappingsParamsBodyMappingsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSwitchDscpToCosMappingsParamsBodyMappingsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchDscpToCosMappingsParamsBodyMappingsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
