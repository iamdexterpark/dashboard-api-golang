// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateOrganizationConfigTemplateSwitchProfilePortReader is a Reader for the UpdateOrganizationConfigTemplateSwitchProfilePort structure.
type UpdateOrganizationConfigTemplateSwitchProfilePortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOrganizationConfigTemplateSwitchProfilePortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOrganizationConfigTemplateSwitchProfilePortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateOrganizationConfigTemplateSwitchProfilePortOK creates a UpdateOrganizationConfigTemplateSwitchProfilePortOK with default headers values
func NewUpdateOrganizationConfigTemplateSwitchProfilePortOK() *UpdateOrganizationConfigTemplateSwitchProfilePortOK {
	return &UpdateOrganizationConfigTemplateSwitchProfilePortOK{}
}

/* UpdateOrganizationConfigTemplateSwitchProfilePortOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateOrganizationConfigTemplateSwitchProfilePortOK struct {
	Payload interface{}
}

func (o *UpdateOrganizationConfigTemplateSwitchProfilePortOK) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}][%d] updateOrganizationConfigTemplateSwitchProfilePortOK  %+v", 200, o.Payload)
}
func (o *UpdateOrganizationConfigTemplateSwitchProfilePortOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateOrganizationConfigTemplateSwitchProfilePortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateOrganizationConfigTemplateSwitchProfilePortBody update organization config template switch profile port body
// Example: {"accessPolicyType":"Sticky MAC allow list","adaptivePolicyGroupId":"123","enabled":true,"isolationEnabled":false,"linkNegotiation":"Auto negotiate","linkNegotiationCapabilities":["Auto negotiate","1 Gigabit full duplex (auto)"],"name":"My switch port","peerSgtCapable":false,"poeEnabled":true,"portScheduleId":"1234","rstpEnabled":true,"stickyMacAllowList":["34:56:fe:ce:8e:b0","34:56:fe:ce:8e:b1"],"stickyMacAllowListLimit":5,"stormControlEnabled":true,"stpGuard":"disabled","tags":["tag1","tag2"],"type":"access","udld":"Alert only","vlan":10,"voiceVlan":20}
swagger:model UpdateOrganizationConfigTemplateSwitchProfilePortBody
*/
type UpdateOrganizationConfigTemplateSwitchProfilePortBody struct {

	// The number of a custom access policy to configure on the switch profile port. Only applicable when 'accessPolicyType' is 'Custom access policy'
	AccessPolicyNumber int64 `json:"accessPolicyNumber,omitempty"`

	// The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'
	// Enum: [Open Custom access policy MAC allow list Sticky MAC allow list]
	AccessPolicyType string `json:"accessPolicyType,omitempty"`

	// The VLANs allowed on the switch profile port. Only applicable to trunk ports
	AllowedVlans string `json:"allowedVlans,omitempty"`

	// The status of the switch profile port
	Enabled bool `json:"enabled,omitempty"`

	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled bool `json:"flexibleStackingEnabled,omitempty"`

	// The isolation status of the switch profile port
	IsolationEnabled bool `json:"isolationEnabled,omitempty"`

	// The link speed for the switch profile port
	LinkNegotiation string `json:"linkNegotiation,omitempty"`

	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'
	MacAllowList []string `json:"macAllowList"`

	// The name of the switch profile port
	Name string `json:"name,omitempty"`

	// The PoE status of the switch profile port
	PoeEnabled bool `json:"poeEnabled,omitempty"`

	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleID string `json:"portScheduleId,omitempty"`

	// The rapid spanning tree protocol status
	RstpEnabled bool `json:"rstpEnabled,omitempty"`

	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'
	StickyMacAllowList []string `json:"stickyMacAllowList"`

	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'
	StickyMacAllowListLimit int64 `json:"stickyMacAllowListLimit,omitempty"`

	// The storm control status of the switch profile port
	StormControlEnabled bool `json:"stormControlEnabled,omitempty"`

	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard')
	// Enum: [disabled root guard bpdu guard loop guard]
	StpGuard string `json:"stpGuard,omitempty"`

	// The list of tags of the switch profile port
	Tags []string `json:"tags"`

	// The type of the switch profile port ('trunk' or 'access')
	// Enum: [trunk access]
	Type string `json:"type,omitempty"`

	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	// Enum: [Alert only Enforce]
	Udld string `json:"udld,omitempty"`

	// The VLAN of the switch profile port. A null value will clear the value set for trunk ports.
	Vlan int64 `json:"vlan,omitempty"`

	// The voice VLAN of the switch profile port. Only applicable to access ports
	VoiceVlan int64 `json:"voiceVlan,omitempty"`
}

// Validate validates this update organization config template switch profile port body
func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessPolicyType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStpGuard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUdld(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateOrganizationConfigTemplateSwitchProfilePortBodyTypeAccessPolicyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Open","Custom access policy","MAC allow list","Sticky MAC allow list"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationConfigTemplateSwitchProfilePortBodyTypeAccessPolicyTypePropEnum = append(updateOrganizationConfigTemplateSwitchProfilePortBodyTypeAccessPolicyTypePropEnum, v)
	}
}

const (

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyAccessPolicyTypeOpen captures enum value "Open"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyAccessPolicyTypeOpen string = "Open"

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyAccessPolicyTypeCustomAccessPolicy captures enum value "Custom access policy"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyAccessPolicyTypeCustomAccessPolicy string = "Custom access policy"

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyAccessPolicyTypeMACAllowList captures enum value "MAC allow list"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyAccessPolicyTypeMACAllowList string = "MAC allow list"

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyAccessPolicyTypeStickyMACAllowList captures enum value "Sticky MAC allow list"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyAccessPolicyTypeStickyMACAllowList string = "Sticky MAC allow list"
)

// prop value enum
func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) validateAccessPolicyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationConfigTemplateSwitchProfilePortBodyTypeAccessPolicyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) validateAccessPolicyType(formats strfmt.Registry) error {
	if swag.IsZero(o.AccessPolicyType) { // not required
		return nil
	}

	// value enum
	if err := o.validateAccessPolicyTypeEnum("updateOrganizationConfigTemplateSwitchProfilePort"+"."+"accessPolicyType", "body", o.AccessPolicyType); err != nil {
		return err
	}

	return nil
}

var updateOrganizationConfigTemplateSwitchProfilePortBodyTypeStpGuardPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["disabled","root guard","bpdu guard","loop guard"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationConfigTemplateSwitchProfilePortBodyTypeStpGuardPropEnum = append(updateOrganizationConfigTemplateSwitchProfilePortBodyTypeStpGuardPropEnum, v)
	}
}

const (

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyStpGuardDisabled captures enum value "disabled"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyStpGuardDisabled string = "disabled"

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyStpGuardRootGuard captures enum value "root guard"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyStpGuardRootGuard string = "root guard"

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyStpGuardBpduGuard captures enum value "bpdu guard"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyStpGuardBpduGuard string = "bpdu guard"

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyStpGuardLoopGuard captures enum value "loop guard"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyStpGuardLoopGuard string = "loop guard"
)

// prop value enum
func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) validateStpGuardEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationConfigTemplateSwitchProfilePortBodyTypeStpGuardPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) validateStpGuard(formats strfmt.Registry) error {
	if swag.IsZero(o.StpGuard) { // not required
		return nil
	}

	// value enum
	if err := o.validateStpGuardEnum("updateOrganizationConfigTemplateSwitchProfilePort"+"."+"stpGuard", "body", o.StpGuard); err != nil {
		return err
	}

	return nil
}

var updateOrganizationConfigTemplateSwitchProfilePortBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["trunk","access"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationConfigTemplateSwitchProfilePortBodyTypeTypePropEnum = append(updateOrganizationConfigTemplateSwitchProfilePortBodyTypeTypePropEnum, v)
	}
}

const (

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyTypeTrunk captures enum value "trunk"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyTypeTrunk string = "trunk"

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyTypeAccess captures enum value "access"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyTypeAccess string = "access"
)

// prop value enum
func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationConfigTemplateSwitchProfilePortBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("updateOrganizationConfigTemplateSwitchProfilePort"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

var updateOrganizationConfigTemplateSwitchProfilePortBodyTypeUdldPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Alert only","Enforce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationConfigTemplateSwitchProfilePortBodyTypeUdldPropEnum = append(updateOrganizationConfigTemplateSwitchProfilePortBodyTypeUdldPropEnum, v)
	}
}

const (

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyUdldAlertOnly captures enum value "Alert only"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyUdldAlertOnly string = "Alert only"

	// UpdateOrganizationConfigTemplateSwitchProfilePortBodyUdldEnforce captures enum value "Enforce"
	UpdateOrganizationConfigTemplateSwitchProfilePortBodyUdldEnforce string = "Enforce"
)

// prop value enum
func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) validateUdldEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationConfigTemplateSwitchProfilePortBodyTypeUdldPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) validateUdld(formats strfmt.Registry) error {
	if swag.IsZero(o.Udld) { // not required
		return nil
	}

	// value enum
	if err := o.validateUdldEnum("updateOrganizationConfigTemplateSwitchProfilePort"+"."+"udld", "body", o.Udld); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update organization config template switch profile port body based on context it is used
func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationConfigTemplateSwitchProfilePortBody) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationConfigTemplateSwitchProfilePortBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
