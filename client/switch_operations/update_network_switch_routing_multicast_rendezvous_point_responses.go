// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkSwitchRoutingMulticastRendezvousPointReader is a Reader for the UpdateNetworkSwitchRoutingMulticastRendezvousPoint structure.
type UpdateNetworkSwitchRoutingMulticastRendezvousPointReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkSwitchRoutingMulticastRendezvousPointReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkSwitchRoutingMulticastRendezvousPointOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkSwitchRoutingMulticastRendezvousPointOK creates a UpdateNetworkSwitchRoutingMulticastRendezvousPointOK with default headers values
func NewUpdateNetworkSwitchRoutingMulticastRendezvousPointOK() *UpdateNetworkSwitchRoutingMulticastRendezvousPointOK {
	return &UpdateNetworkSwitchRoutingMulticastRendezvousPointOK{}
}

/* UpdateNetworkSwitchRoutingMulticastRendezvousPointOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkSwitchRoutingMulticastRendezvousPointOK struct {
	Payload interface{}
}

func (o *UpdateNetworkSwitchRoutingMulticastRendezvousPointOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}][%d] updateNetworkSwitchRoutingMulticastRendezvousPointOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkSwitchRoutingMulticastRendezvousPointOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkSwitchRoutingMulticastRendezvousPointOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkSwitchRoutingMulticastRendezvousPointBody update network switch routing multicast rendezvous point body
// Example: {"interfaceIp":"192.168.1.2","multicastGroup":"192.168.128.0/24"}
swagger:model UpdateNetworkSwitchRoutingMulticastRendezvousPointBody
*/
type UpdateNetworkSwitchRoutingMulticastRendezvousPointBody struct {

	// The IP address of the interface to use
	// Required: true
	InterfaceIP *string `json:"interfaceIp"`

	// 'Any', or the IP address of a multicast group
	// Required: true
	MulticastGroup *string `json:"multicastGroup"`
}

// Validate validates this update network switch routing multicast rendezvous point body
func (o *UpdateNetworkSwitchRoutingMulticastRendezvousPointBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInterfaceIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMulticastGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSwitchRoutingMulticastRendezvousPointBody) validateInterfaceIP(formats strfmt.Registry) error {

	if err := validate.Required("updateNetworkSwitchRoutingMulticastRendezvousPoint"+"."+"interfaceIp", "body", o.InterfaceIP); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkSwitchRoutingMulticastRendezvousPointBody) validateMulticastGroup(formats strfmt.Registry) error {

	if err := validate.Required("updateNetworkSwitchRoutingMulticastRendezvousPoint"+"."+"multicastGroup", "body", o.MulticastGroup); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network switch routing multicast rendezvous point body based on context it is used
func (o *UpdateNetworkSwitchRoutingMulticastRendezvousPointBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingMulticastRendezvousPointBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSwitchRoutingMulticastRendezvousPointBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSwitchRoutingMulticastRendezvousPointBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
