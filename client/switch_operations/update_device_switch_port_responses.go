// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDeviceSwitchPortReader is a Reader for the UpdateDeviceSwitchPort structure.
type UpdateDeviceSwitchPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeviceSwitchPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDeviceSwitchPortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDeviceSwitchPortOK creates a UpdateDeviceSwitchPortOK with default headers values
func NewUpdateDeviceSwitchPortOK() *UpdateDeviceSwitchPortOK {
	return &UpdateDeviceSwitchPortOK{}
}

/* UpdateDeviceSwitchPortOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateDeviceSwitchPortOK struct {
	Payload interface{}
}

func (o *UpdateDeviceSwitchPortOK) Error() string {
	return fmt.Sprintf("[PUT /devices/{serial}/switch/ports/{portId}][%d] updateDeviceSwitchPortOK  %+v", 200, o.Payload)
}
func (o *UpdateDeviceSwitchPortOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateDeviceSwitchPortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateDeviceSwitchPortBody update device switch port body
// Example: {"accessPolicyType":"Sticky MAC allow list","adaptivePolicyGroupId":"123","enabled":true,"isolationEnabled":false,"linkNegotiation":"Auto negotiate","name":"My switch port","peerSgtCapable":false,"poeEnabled":true,"portScheduleId":"1234","rstpEnabled":true,"stickyMacAllowList":["34:56:fe:ce:8e:b0","34:56:fe:ce:8e:b1"],"stickyMacAllowListLimit":5,"stormControlEnabled":true,"stpGuard":"disabled","tags":["tag1","tag2"],"type":"access","udld":"Alert only","vlan":10,"voiceVlan":20}
swagger:model UpdateDeviceSwitchPortBody
*/
type UpdateDeviceSwitchPortBody struct {

	// The number of a custom access policy to configure on the switch port. Only applicable when 'accessPolicyType' is 'Custom access policy'
	AccessPolicyNumber int64 `json:"accessPolicyNumber,omitempty"`

	// The type of the access policy of the switch port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'
	// Enum: [Open Custom access policy MAC allow list Sticky MAC allow list]
	AccessPolicyType string `json:"accessPolicyType,omitempty"`

	// The adaptive policy group ID that will be used to tag traffic through this switch port. This ID must pre-exist during the configuration, else needs to be created using adaptivePolicy/groups API. Cannot be applied to a port on a switch bound to profile.
	AdaptivePolicyGroupID string `json:"adaptivePolicyGroupId,omitempty"`

	// The VLANs allowed on the switch port. Only applicable to trunk ports.
	AllowedVlans string `json:"allowedVlans,omitempty"`

	// The status of the switch port
	Enabled bool `json:"enabled,omitempty"`

	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled bool `json:"flexibleStackingEnabled,omitempty"`

	// The isolation status of the switch port
	IsolationEnabled bool `json:"isolationEnabled,omitempty"`

	// The link speed for the switch port
	LinkNegotiation string `json:"linkNegotiation,omitempty"`

	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'
	MacAllowList []string `json:"macAllowList"`

	// The name of the switch port
	Name string `json:"name,omitempty"`

	// If true, Peer SGT is enabled for traffic through this switch port. Applicable to trunk port only, not access port.
	// Cannot be applied to a port on a switch bound to profile.
	//
	PeerSgtCapable bool `json:"peerSgtCapable,omitempty"`

	// The PoE status of the switch port
	PoeEnabled bool `json:"poeEnabled,omitempty"`

	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleID string `json:"portScheduleId,omitempty"`

	// The rapid spanning tree protocol status
	RstpEnabled bool `json:"rstpEnabled,omitempty"`

	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'
	StickyMacAllowList []string `json:"stickyMacAllowList"`

	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'
	StickyMacAllowListLimit int64 `json:"stickyMacAllowListLimit,omitempty"`

	// The storm control status of the switch port
	StormControlEnabled bool `json:"stormControlEnabled,omitempty"`

	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard')
	// Enum: [disabled root guard bpdu guard loop guard]
	StpGuard string `json:"stpGuard,omitempty"`

	// The list of tags of the switch port
	Tags []string `json:"tags"`

	// The type of the switch port ('trunk' or 'access')
	// Enum: [trunk access]
	Type string `json:"type,omitempty"`

	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	// Enum: [Alert only Enforce]
	Udld string `json:"udld,omitempty"`

	// The VLAN of the switch port. A null value will clear the value set for trunk ports.
	Vlan int64 `json:"vlan,omitempty"`

	// The voice VLAN of the switch port. Only applicable to access ports.
	VoiceVlan int64 `json:"voiceVlan,omitempty"`
}

// Validate validates this update device switch port body
func (o *UpdateDeviceSwitchPortBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessPolicyType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStpGuard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUdld(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceSwitchPortBodyTypeAccessPolicyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Open","Custom access policy","MAC allow list","Sticky MAC allow list"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceSwitchPortBodyTypeAccessPolicyTypePropEnum = append(updateDeviceSwitchPortBodyTypeAccessPolicyTypePropEnum, v)
	}
}

const (

	// UpdateDeviceSwitchPortBodyAccessPolicyTypeOpen captures enum value "Open"
	UpdateDeviceSwitchPortBodyAccessPolicyTypeOpen string = "Open"

	// UpdateDeviceSwitchPortBodyAccessPolicyTypeCustomAccessPolicy captures enum value "Custom access policy"
	UpdateDeviceSwitchPortBodyAccessPolicyTypeCustomAccessPolicy string = "Custom access policy"

	// UpdateDeviceSwitchPortBodyAccessPolicyTypeMACAllowList captures enum value "MAC allow list"
	UpdateDeviceSwitchPortBodyAccessPolicyTypeMACAllowList string = "MAC allow list"

	// UpdateDeviceSwitchPortBodyAccessPolicyTypeStickyMACAllowList captures enum value "Sticky MAC allow list"
	UpdateDeviceSwitchPortBodyAccessPolicyTypeStickyMACAllowList string = "Sticky MAC allow list"
)

// prop value enum
func (o *UpdateDeviceSwitchPortBody) validateAccessPolicyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceSwitchPortBodyTypeAccessPolicyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceSwitchPortBody) validateAccessPolicyType(formats strfmt.Registry) error {
	if swag.IsZero(o.AccessPolicyType) { // not required
		return nil
	}

	// value enum
	if err := o.validateAccessPolicyTypeEnum("updateDeviceSwitchPort"+"."+"accessPolicyType", "body", o.AccessPolicyType); err != nil {
		return err
	}

	return nil
}

var updateDeviceSwitchPortBodyTypeStpGuardPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["disabled","root guard","bpdu guard","loop guard"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceSwitchPortBodyTypeStpGuardPropEnum = append(updateDeviceSwitchPortBodyTypeStpGuardPropEnum, v)
	}
}

const (

	// UpdateDeviceSwitchPortBodyStpGuardDisabled captures enum value "disabled"
	UpdateDeviceSwitchPortBodyStpGuardDisabled string = "disabled"

	// UpdateDeviceSwitchPortBodyStpGuardRootGuard captures enum value "root guard"
	UpdateDeviceSwitchPortBodyStpGuardRootGuard string = "root guard"

	// UpdateDeviceSwitchPortBodyStpGuardBpduGuard captures enum value "bpdu guard"
	UpdateDeviceSwitchPortBodyStpGuardBpduGuard string = "bpdu guard"

	// UpdateDeviceSwitchPortBodyStpGuardLoopGuard captures enum value "loop guard"
	UpdateDeviceSwitchPortBodyStpGuardLoopGuard string = "loop guard"
)

// prop value enum
func (o *UpdateDeviceSwitchPortBody) validateStpGuardEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceSwitchPortBodyTypeStpGuardPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceSwitchPortBody) validateStpGuard(formats strfmt.Registry) error {
	if swag.IsZero(o.StpGuard) { // not required
		return nil
	}

	// value enum
	if err := o.validateStpGuardEnum("updateDeviceSwitchPort"+"."+"stpGuard", "body", o.StpGuard); err != nil {
		return err
	}

	return nil
}

var updateDeviceSwitchPortBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["trunk","access"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceSwitchPortBodyTypeTypePropEnum = append(updateDeviceSwitchPortBodyTypeTypePropEnum, v)
	}
}

const (

	// UpdateDeviceSwitchPortBodyTypeTrunk captures enum value "trunk"
	UpdateDeviceSwitchPortBodyTypeTrunk string = "trunk"

	// UpdateDeviceSwitchPortBodyTypeAccess captures enum value "access"
	UpdateDeviceSwitchPortBodyTypeAccess string = "access"
)

// prop value enum
func (o *UpdateDeviceSwitchPortBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceSwitchPortBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceSwitchPortBody) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("updateDeviceSwitchPort"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

var updateDeviceSwitchPortBodyTypeUdldPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Alert only","Enforce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceSwitchPortBodyTypeUdldPropEnum = append(updateDeviceSwitchPortBodyTypeUdldPropEnum, v)
	}
}

const (

	// UpdateDeviceSwitchPortBodyUdldAlertOnly captures enum value "Alert only"
	UpdateDeviceSwitchPortBodyUdldAlertOnly string = "Alert only"

	// UpdateDeviceSwitchPortBodyUdldEnforce captures enum value "Enforce"
	UpdateDeviceSwitchPortBodyUdldEnforce string = "Enforce"
)

// prop value enum
func (o *UpdateDeviceSwitchPortBody) validateUdldEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceSwitchPortBodyTypeUdldPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceSwitchPortBody) validateUdld(formats strfmt.Registry) error {
	if swag.IsZero(o.Udld) { // not required
		return nil
	}

	// value enum
	if err := o.validateUdldEnum("updateDeviceSwitchPort"+"."+"udld", "body", o.Udld); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update device switch port body based on context it is used
func (o *UpdateDeviceSwitchPortBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceSwitchPortBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceSwitchPortBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSwitchPortBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
