// Code generated by go-swagger; DO NOT EDIT.

package switch_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDeviceSwitchRoutingInterfaceDhcpReader is a Reader for the UpdateDeviceSwitchRoutingInterfaceDhcp structure.
type UpdateDeviceSwitchRoutingInterfaceDhcpReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDeviceSwitchRoutingInterfaceDhcpOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDeviceSwitchRoutingInterfaceDhcpOK creates a UpdateDeviceSwitchRoutingInterfaceDhcpOK with default headers values
func NewUpdateDeviceSwitchRoutingInterfaceDhcpOK() *UpdateDeviceSwitchRoutingInterfaceDhcpOK {
	return &UpdateDeviceSwitchRoutingInterfaceDhcpOK{}
}

/* UpdateDeviceSwitchRoutingInterfaceDhcpOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateDeviceSwitchRoutingInterfaceDhcpOK struct {
	Payload interface{}
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpOK) Error() string {
	return fmt.Sprintf("[PUT /devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp][%d] updateDeviceSwitchRoutingInterfaceDhcpOK  %+v", 200, o.Payload)
}
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateDeviceSwitchRoutingInterfaceDhcpBody update device switch routing interface dhcp body
// Example: {"bootFileName":"home_boot_file","bootNextServer":"1.2.3.4","bootOptionsEnabled":true,"dhcpLeaseTime":"1 day","dhcpMode":"dhcpServer","dhcpOptions":[{"code":"5","type":"text","value":"five"}],"dnsCustomNameservers":["8.8.8.8, 8.8.4.4"],"dnsNameserversOption":"custom","fixedIpAssignments":[{"ip":"192.168.1.12","mac":"22:33:44:55:66:77","name":"Cisco Meraki valued client"}],"reservedIpRanges":[{"comment":"A reserved IP range","end":"192.168.1.10","start":"192.168.1.1"}]}
swagger:model UpdateDeviceSwitchRoutingInterfaceDhcpBody
*/
type UpdateDeviceSwitchRoutingInterfaceDhcpBody struct {

	// The PXE boot server filename for the DHCP server running on the switch interface
	BootFileName string `json:"bootFileName,omitempty"`

	// The PXE boot server IP for the DHCP server running on the switch interface
	BootNextServer string `json:"bootNextServer,omitempty"`

	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch interface
	BootOptionsEnabled bool `json:"bootOptionsEnabled,omitempty"`

	// The DHCP lease time config for the dhcp server running on switch interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	// Enum: [30 minutes 1 hour 4 hours 12 hours 1 day 1 week]
	DhcpLeaseTime string `json:"dhcpLeaseTime,omitempty"`

	// The DHCP mode options for the switch interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	// Enum: [dhcpDisabled dhcpRelay dhcpServer]
	DhcpMode string `json:"dhcpMode,omitempty"`

	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch interface
	DhcpOptions []*UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0 `json:"dhcpOptions"`

	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch interface
	DhcpRelayServerIps []string `json:"dhcpRelayServerIps"`

	// The DHCP name server IPs when DHCP name server option is 'custom'
	DNSCustomNameservers []string `json:"dnsCustomNameservers"`

	// The DHCP name server option for the dhcp server running on the switch interface ('googlePublicDns', 'openDns' or 'custom')
	// Enum: [googlePublicDns openDns custom]
	DNSNameserversOption string `json:"dnsNameserversOption,omitempty"`

	// Array of DHCP fixed IP assignments for the DHCP server running on the switch interface
	FixedIPAssignments []*UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0 `json:"fixedIpAssignments"`

	// Array of DHCP reserved IP assignments for the DHCP server running on the switch interface
	ReservedIPRanges []*UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyReservedIPRangesItems0 `json:"reservedIpRanges"`
}

// Validate validates this update device switch routing interface dhcp body
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDhcpLeaseTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDhcpMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDhcpOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDNSNameserversOption(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFixedIPAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReservedIPRanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDhcpLeaseTimePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["30 minutes","1 hour","4 hours","12 hours","1 day","1 week"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDhcpLeaseTimePropEnum = append(updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDhcpLeaseTimePropEnum, v)
	}
}

const (

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr30Minutes captures enum value "30 minutes"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr30Minutes string = "30 minutes"

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr1Hour captures enum value "1 hour"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr1Hour string = "1 hour"

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr4Hours captures enum value "4 hours"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr4Hours string = "4 hours"

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr12Hours captures enum value "12 hours"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr12Hours string = "12 hours"

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr1Day captures enum value "1 day"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr1Day string = "1 day"

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr1Week captures enum value "1 week"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpLeaseTimeNr1Week string = "1 week"
)

// prop value enum
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) validateDhcpLeaseTimeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDhcpLeaseTimePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) validateDhcpLeaseTime(formats strfmt.Registry) error {
	if swag.IsZero(o.DhcpLeaseTime) { // not required
		return nil
	}

	// value enum
	if err := o.validateDhcpLeaseTimeEnum("updateDeviceSwitchRoutingInterfaceDhcp"+"."+"dhcpLeaseTime", "body", o.DhcpLeaseTime); err != nil {
		return err
	}

	return nil
}

var updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDhcpModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dhcpDisabled","dhcpRelay","dhcpServer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDhcpModePropEnum = append(updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDhcpModePropEnum, v)
	}
}

const (

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpModeDhcpDisabled captures enum value "dhcpDisabled"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpModeDhcpDisabled string = "dhcpDisabled"

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpModeDhcpRelay captures enum value "dhcpRelay"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpModeDhcpRelay string = "dhcpRelay"

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpModeDhcpServer captures enum value "dhcpServer"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDhcpModeDhcpServer string = "dhcpServer"
)

// prop value enum
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) validateDhcpModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDhcpModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) validateDhcpMode(formats strfmt.Registry) error {
	if swag.IsZero(o.DhcpMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateDhcpModeEnum("updateDeviceSwitchRoutingInterfaceDhcp"+"."+"dhcpMode", "body", o.DhcpMode); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) validateDhcpOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.DhcpOptions) { // not required
		return nil
	}

	for i := 0; i < len(o.DhcpOptions); i++ {
		if swag.IsZero(o.DhcpOptions[i]) { // not required
			continue
		}

		if o.DhcpOptions[i] != nil {
			if err := o.DhcpOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "dhcpOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "dhcpOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDNSNameserversOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["googlePublicDns","openDns","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDNSNameserversOptionPropEnum = append(updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDNSNameserversOptionPropEnum, v)
	}
}

const (

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDNSNameserversOptionGooglePublicDNS captures enum value "googlePublicDns"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDNSNameserversOptionGooglePublicDNS string = "googlePublicDns"

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDNSNameserversOptionOpenDNS captures enum value "openDns"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDNSNameserversOptionOpenDNS string = "openDns"

	// UpdateDeviceSwitchRoutingInterfaceDhcpBodyDNSNameserversOptionCustom captures enum value "custom"
	UpdateDeviceSwitchRoutingInterfaceDhcpBodyDNSNameserversOptionCustom string = "custom"
)

// prop value enum
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) validateDNSNameserversOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceSwitchRoutingInterfaceDhcpBodyTypeDNSNameserversOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) validateDNSNameserversOption(formats strfmt.Registry) error {
	if swag.IsZero(o.DNSNameserversOption) { // not required
		return nil
	}

	// value enum
	if err := o.validateDNSNameserversOptionEnum("updateDeviceSwitchRoutingInterfaceDhcp"+"."+"dnsNameserversOption", "body", o.DNSNameserversOption); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) validateFixedIPAssignments(formats strfmt.Registry) error {
	if swag.IsZero(o.FixedIPAssignments) { // not required
		return nil
	}

	for i := 0; i < len(o.FixedIPAssignments); i++ {
		if swag.IsZero(o.FixedIPAssignments[i]) { // not required
			continue
		}

		if o.FixedIPAssignments[i] != nil {
			if err := o.FixedIPAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "fixedIpAssignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "fixedIpAssignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) validateReservedIPRanges(formats strfmt.Registry) error {
	if swag.IsZero(o.ReservedIPRanges) { // not required
		return nil
	}

	for i := 0; i < len(o.ReservedIPRanges); i++ {
		if swag.IsZero(o.ReservedIPRanges[i]) { // not required
			continue
		}

		if o.ReservedIPRanges[i] != nil {
			if err := o.ReservedIPRanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update device switch routing interface dhcp body based on the context it is used
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDhcpOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFixedIPAssignments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReservedIPRanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) contextValidateDhcpOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DhcpOptions); i++ {

		if o.DhcpOptions[i] != nil {
			if err := o.DhcpOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "dhcpOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "dhcpOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) contextValidateFixedIPAssignments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.FixedIPAssignments); i++ {

		if o.FixedIPAssignments[i] != nil {
			if err := o.FixedIPAssignments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "fixedIpAssignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "fixedIpAssignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) contextValidateReservedIPRanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ReservedIPRanges); i++ {

		if o.ReservedIPRanges[i] != nil {
			if err := o.ReservedIPRanges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateDeviceSwitchRoutingInterfaceDhcp" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSwitchRoutingInterfaceDhcpBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0 update device switch routing interface dhcp params body dhcp options items0
swagger:model UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0
*/
type UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0 struct {

	// The code for DHCP option which should be from 2 to 254
	// Required: true
	Code *string `json:"code"`

	// The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')
	// Required: true
	// Enum: [text ip integer hex]
	Type *string `json:"type"`

	// The value of the DHCP option
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this update device switch routing interface dhcp params body dhcp options items0
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

var updateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","ip","integer","hex"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeTypePropEnum = append(updateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeTypePropEnum, v)
	}
}

const (

	// UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeText captures enum value "text"
	UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeText string = "text"

	// UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeIP captures enum value "ip"
	UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeIP string = "ip"

	// UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeInteger captures enum value "integer"
	UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeInteger string = "integer"

	// UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeHex captures enum value "hex"
	UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeHex string = "hex"
)

// prop value enum
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update device switch routing interface dhcp params body dhcp options items0 based on context it is used
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyDhcpOptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0 update device switch routing interface dhcp params body fixed IP assignments items0
swagger:model UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0
*/
type UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0 struct {

	// The IP address of the client which has fixed IP address assigned to it
	// Required: true
	IP *string `json:"ip"`

	// The MAC address of the client which has fixed IP address
	// Required: true
	Mac *string `json:"mac"`

	// The name of the client which has fixed IP address
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this update device switch routing interface dhcp params body fixed IP assignments items0
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", o.IP); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", o.Mac); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update device switch routing interface dhcp params body fixed IP assignments items0 based on context it is used
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyFixedIPAssignmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyReservedIPRangesItems0 update device switch routing interface dhcp params body reserved IP ranges items0
swagger:model UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyReservedIPRangesItems0
*/
type UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyReservedIPRangesItems0 struct {

	// The comment for the reserved IP range
	Comment string `json:"comment,omitempty"`

	// The ending IP address of the reserved IP range
	// Required: true
	End *string `json:"end"`

	// The starting IP address of the reserved IP range
	// Required: true
	Start *string `json:"start"`
}

// Validate validates this update device switch routing interface dhcp params body reserved IP ranges items0
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyReservedIPRangesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyReservedIPRangesItems0) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", o.End); err != nil {
		return err
	}

	return nil
}

func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyReservedIPRangesItems0) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", o.Start); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update device switch routing interface dhcp params body reserved IP ranges items0 based on context it is used
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyReservedIPRangesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyReservedIPRangesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyReservedIPRangesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceSwitchRoutingInterfaceDhcpParamsBodyReservedIPRangesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
