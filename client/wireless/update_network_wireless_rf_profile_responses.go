// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkWirelessRfProfileReader is a Reader for the UpdateNetworkWirelessRfProfile structure.
type UpdateNetworkWirelessRfProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkWirelessRfProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkWirelessRfProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkWirelessRfProfileOK creates a UpdateNetworkWirelessRfProfileOK with default headers values
func NewUpdateNetworkWirelessRfProfileOK() *UpdateNetworkWirelessRfProfileOK {
	return &UpdateNetworkWirelessRfProfileOK{}
}

/* UpdateNetworkWirelessRfProfileOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkWirelessRfProfileOK struct {
	Payload interface{}
}

func (o *UpdateNetworkWirelessRfProfileOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/wireless/rfProfiles/{rfProfileId}][%d] updateNetworkWirelessRfProfileOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkWirelessRfProfileOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkWirelessRfProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkWirelessRfProfileBody update network wireless rf profile body
// Example: {}
swagger:model UpdateNetworkWirelessRfProfileBody
*/
type UpdateNetworkWirelessRfProfileBody struct {

	// ap band settings
	ApBandSettings *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings `json:"apBandSettings,omitempty"`

	// Band selection can be set to either 'ssid' or 'ap'.
	// Enum: [ssid ap]
	BandSelectionType string `json:"bandSelectionType,omitempty"`

	// Steers client to best available access point. Can be either true or false.
	ClientBalancingEnabled bool `json:"clientBalancingEnabled,omitempty"`

	// five ghz settings
	FiveGhzSettings *UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// Minimum bitrate can be set to either 'band' or 'ssid'.
	// Enum: [band ssid]
	MinBitrateType string `json:"minBitrateType,omitempty"`

	// The name of the new profile. Must be unique.
	Name string `json:"name,omitempty"`

	// per ssid settings
	PerSsidSettings *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings `json:"perSsidSettings,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this update network wireless rf profile body
func (o *UpdateNetworkWirelessRfProfileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApBandSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBandSelectionType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMinBitrateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePerSsidSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validateApBandSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.ApBandSettings) { // not required
		return nil
	}

	if o.ApBandSettings != nil {
		if err := o.ApBandSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "apBandSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "apBandSettings")
			}
			return err
		}
	}

	return nil
}

var updateNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ssid","ap"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum = append(updateNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileBodyBandSelectionTypeSsid captures enum value "ssid"
	UpdateNetworkWirelessRfProfileBodyBandSelectionTypeSsid string = "ssid"

	// UpdateNetworkWirelessRfProfileBodyBandSelectionTypeAp captures enum value "ap"
	UpdateNetworkWirelessRfProfileBodyBandSelectionTypeAp string = "ap"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileBody) validateBandSelectionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileBodyTypeBandSelectionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validateBandSelectionType(formats strfmt.Registry) error {
	if swag.IsZero(o.BandSelectionType) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandSelectionTypeEnum("updateNetworkWirelessRfProfile"+"."+"bandSelectionType", "body", o.BandSelectionType); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

var updateNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["band","ssid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum = append(updateNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileBodyMinBitrateTypeBand captures enum value "band"
	UpdateNetworkWirelessRfProfileBodyMinBitrateTypeBand string = "band"

	// UpdateNetworkWirelessRfProfileBodyMinBitrateTypeSsid captures enum value "ssid"
	UpdateNetworkWirelessRfProfileBodyMinBitrateTypeSsid string = "ssid"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileBody) validateMinBitrateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileBodyTypeMinBitrateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validateMinBitrateType(formats strfmt.Registry) error {
	if swag.IsZero(o.MinBitrateType) { // not required
		return nil
	}

	// value enum
	if err := o.validateMinBitrateTypeEnum("updateNetworkWirelessRfProfile"+"."+"minBitrateType", "body", o.MinBitrateType); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validatePerSsidSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.PerSsidSettings) { // not required
		return nil
	}

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network wireless rf profile body based on the context it is used
func (o *UpdateNetworkWirelessRfProfileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateApBandSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePerSsidSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) contextValidateApBandSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.ApBandSettings != nil {
		if err := o.ApBandSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "apBandSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "apBandSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) contextValidatePerSsidSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.PerSsidSettings != nil {
		if err := o.PerSsidSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyApBandSettings Settings that will be enabled if selectionType is set to 'ap'.
swagger:model UpdateNetworkWirelessRfProfileParamsBodyApBandSettings
*/
type UpdateNetworkWirelessRfProfileParamsBodyApBandSettings struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`
}

// Validate validates this update network wireless rf profile params body ap band settings
func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyApBandSettingsBandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyApBandSettingsTypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"apBandSettings"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body ap band settings based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyApBandSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyApBandSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings Settings related to 5Ghz band
swagger:model UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings
*/
type UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings struct {

	// Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'.
	ChannelWidth string `json:"channelWidth,omitempty"`

	// Sets max power (dBm) of 5Ghz band. Can be integer between 8 and 30.
	MaxPower int64 `json:"maxPower,omitempty"`

	// Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'.
	MinBitrate int64 `json:"minBitrate,omitempty"`

	// Sets min power (dBm) of 5Ghz band. Can be integer between 8 and 30.
	MinPower int64 `json:"minPower,omitempty"`

	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop int64 `json:"rxsop,omitempty"`

	// Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.
	ValidAutoChannels []int64 `json:"validAutoChannels"`
}

// Validate validates this update network wireless rf profile params body five ghz settings
func (o *UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless rf profile params body five ghz settings based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings Per-SSID radio settings by number.
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings struct {

	// 0
	Nr0 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0 `json:"0,omitempty"`

	// 1
	Nr1 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1 `json:"1,omitempty"`

	// 10
	Nr10 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10 `json:"10,omitempty"`

	// 11
	Nr11 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11 `json:"11,omitempty"`

	// 12
	Nr12 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12 `json:"12,omitempty"`

	// 13
	Nr13 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13 `json:"13,omitempty"`

	// 14
	Nr14 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14 `json:"14,omitempty"`

	// 2
	Nr2 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4 `json:"4,omitempty"`

	// 5
	Nr5 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5 `json:"5,omitempty"`

	// 6
	Nr6 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6 `json:"6,omitempty"`

	// 7
	Nr7 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7 `json:"7,omitempty"`

	// 8
	Nr8 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8 `json:"8,omitempty"`

	// 9
	Nr9 *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9 `json:"9,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr0(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr10(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr11(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr12(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr13(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr14(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr5(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr6(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr7(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr8(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr9(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr0(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr0) { // not required
		return nil
	}

	if o.Nr0 != nil {
		if err := o.Nr0.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr10(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr10) { // not required
		return nil
	}

	if o.Nr10 != nil {
		if err := o.Nr10.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr11(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr11) { // not required
		return nil
	}

	if o.Nr11 != nil {
		if err := o.Nr11.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr12(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr12) { // not required
		return nil
	}

	if o.Nr12 != nil {
		if err := o.Nr12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr13(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr13) { // not required
		return nil
	}

	if o.Nr13 != nil {
		if err := o.Nr13.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr14(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr14) { // not required
		return nil
	}

	if o.Nr14 != nil {
		if err := o.Nr14.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr5(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr5) { // not required
		return nil
	}

	if o.Nr5 != nil {
		if err := o.Nr5.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr6(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr6) { // not required
		return nil
	}

	if o.Nr6 != nil {
		if err := o.Nr6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr7(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr7) { // not required
		return nil
	}

	if o.Nr7 != nil {
		if err := o.Nr7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr8(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr8) { // not required
		return nil
	}

	if o.Nr8 != nil {
		if err := o.Nr8.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) validateNr9(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr9) { // not required
		return nil
	}

	if o.Nr9 != nil {
		if err := o.Nr9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network wireless rf profile params body per ssid settings based on the context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr0(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr10(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr11(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr12(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr13(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr14(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr5(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr7(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr8(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr9(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr0(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr0 != nil {
		if err := o.Nr0.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {
		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr10(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr10 != nil {
		if err := o.Nr10.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr11(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr11 != nil {
		if err := o.Nr11.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr12(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr12 != nil {
		if err := o.Nr12.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr13(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr13 != nil {
		if err := o.Nr13.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr14(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr14 != nil {
		if err := o.Nr14.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {
		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {
		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {
		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr5(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr5 != nil {
		if err := o.Nr5.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr6(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr6 != nil {
		if err := o.Nr6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr7(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr7 != nil {
		if err := o.Nr7.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr8(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr8 != nil {
		if err := o.Nr8.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) contextValidateNr9(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr9 != nil {
		if err := o.Nr9.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessRfProfile" + "." + "perSsidSettings" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0 Settings for SSID 0
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr0
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"0"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr0 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1 Settings for SSID 1
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr1
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"1"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr1 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10 Settings for SSID 10
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr10
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"10"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr10 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr10
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11 Settings for SSID 11
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr11
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"11"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr11 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr11
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12 Settings for SSID 12
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr12
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"12"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr12 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13 Settings for SSID 13
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr13
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"13"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr13 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr13
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14 Settings for SSID 14
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr14
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"14"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr14 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr14
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2 Settings for SSID 2
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr2
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"2"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr2 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3 Settings for SSID 3
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr3
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"3"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr3 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4 Settings for SSID 4
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr4
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"4"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr4 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5 Settings for SSID 5
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr5
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"5"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr5 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6 Settings for SSID 6
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr6
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"6"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr6 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7 Settings for SSID 7
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr7
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"7"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr7 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8 Settings for SSID 8
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr8
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"8"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr8 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr8
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9 Settings for SSID 9
swagger:model UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9
*/
type UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9 struct {

	// Choice between 'dual', '2.4ghz' or '5ghz'.
	// Enum: [dual 2.4ghz 5ghz]
	BandOperationMode string `json:"bandOperationMode,omitempty"`

	// Steers client to most open band between 2.4 GHz and 5 GHz. Can be either true or false.
	BandSteeringEnabled bool `json:"bandSteeringEnabled,omitempty"`

	// Sets min bitrate (Mbps) of this SSID. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`
}

// Validate validates this update network wireless rf profile params body per ssid settings nr9
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBandOperationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dual","2.4ghz","5ghz"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum = append(updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeDual captures enum value "dual"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeDual string = "dual"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr2Dot4ghz captures enum value "2.4ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr2Dot4ghz string = "2.4ghz"

	// UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr5ghz captures enum value "5ghz"
	UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9BandOperationModeNr5ghz string = "5ghz"
)

// prop value enum
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) validateBandOperationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9TypeBandOperationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) validateBandOperationMode(formats strfmt.Registry) error {
	if swag.IsZero(o.BandOperationMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateBandOperationModeEnum("updateNetworkWirelessRfProfile"+"."+"perSsidSettings"+"."+"9"+"."+"bandOperationMode", "body", o.BandOperationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless rf profile params body per ssid settings nr9 based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyPerSsidSettingsNr9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings Settings related to 2.4Ghz band
swagger:model UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings
*/
type UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings struct {

	// Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering.
	AxEnabled bool `json:"axEnabled,omitempty"`

	// Sets max power (dBm) of 2.4Ghz band. Can be integer between 5 and 30.
	MaxPower int64 `json:"maxPower,omitempty"`

	// Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'.
	MinBitrate float32 `json:"minBitrate,omitempty"`

	// Sets min power (dBm) of 2.4Ghz band. Can be integer between 5 and 30.
	MinPower int64 `json:"minPower,omitempty"`

	// The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default.
	Rxsop int64 `json:"rxsop,omitempty"`

	// Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'.
	ValidAutoChannels []int64 `json:"validAutoChannels"`
}

// Validate validates this update network wireless rf profile params body two four ghz settings
func (o *UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless rf profile params body two four ghz settings based on context it is used
func (o *UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessRfProfileParamsBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
