// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkWirelessSsidBonjourForwardingReader is a Reader for the UpdateNetworkWirelessSsidBonjourForwarding structure.
type UpdateNetworkWirelessSsidBonjourForwardingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkWirelessSsidBonjourForwardingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkWirelessSsidBonjourForwardingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkWirelessSsidBonjourForwardingOK creates a UpdateNetworkWirelessSsidBonjourForwardingOK with default headers values
func NewUpdateNetworkWirelessSsidBonjourForwardingOK() *UpdateNetworkWirelessSsidBonjourForwardingOK {
	return &UpdateNetworkWirelessSsidBonjourForwardingOK{}
}

/* UpdateNetworkWirelessSsidBonjourForwardingOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkWirelessSsidBonjourForwardingOK struct {
	Payload interface{}
}

func (o *UpdateNetworkWirelessSsidBonjourForwardingOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/wireless/ssids/{number}/bonjourForwarding][%d] updateNetworkWirelessSsidBonjourForwardingOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkWirelessSsidBonjourForwardingOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkWirelessSsidBonjourForwardingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkWirelessSsidBonjourForwardingBody update network wireless ssid bonjour forwarding body
// Example: {"enabled":true,"rules":[{"description":"A simple bonjour rule","services":["All Services"],"vlanId":"1"}]}
swagger:model UpdateNetworkWirelessSsidBonjourForwardingBody
*/
type UpdateNetworkWirelessSsidBonjourForwardingBody struct {

	// If true, Bonjour forwarding is enabled on this SSID.
	Enabled bool `json:"enabled,omitempty"`

	// List of bonjour forwarding rules.
	Rules []*UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0 `json:"rules"`
}

// Validate validates this update network wireless ssid bonjour forwarding body
func (o *UpdateNetworkWirelessSsidBonjourForwardingBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidBonjourForwardingBody) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(o.Rules) { // not required
		return nil
	}

	for i := 0; i < len(o.Rules); i++ {
		if swag.IsZero(o.Rules[i]) { // not required
			continue
		}

		if o.Rules[i] != nil {
			if err := o.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessSsidBonjourForwarding" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessSsidBonjourForwarding" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network wireless ssid bonjour forwarding body based on the context it is used
func (o *UpdateNetworkWirelessSsidBonjourForwardingBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidBonjourForwardingBody) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Rules); i++ {

		if o.Rules[i] != nil {
			if err := o.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessSsidBonjourForwarding" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessSsidBonjourForwarding" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidBonjourForwardingBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidBonjourForwardingBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidBonjourForwardingBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0 update network wireless ssid bonjour forwarding params body rules items0
swagger:model UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0
*/
type UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0 struct {

	// A description for your Bonjour forwarding rule. Optional.
	Description string `json:"description,omitempty"`

	// A list of Bonjour services. At least one service must be specified. Available services are 'All Services', 'AirPlay', 'AFP', 'BitTorrent', 'FTP', 'iChat', 'iTunes', 'Printers', 'Samba', 'Scanners' and 'SSH'
	// Required: true
	Services []string `json:"services"`

	// The ID of the service VLAN. Required.
	// Required: true
	VlanID *string `json:"vlanId"`
}

// Validate validates this update network wireless ssid bonjour forwarding params body rules items0
func (o *UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVlanID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0ServicesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["All Services","AirPlay","AFP","BitTorrent","FTP","iChat","iTunes","Printers","Samba","Scanners","SSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0ServicesItemsEnum = append(updateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0ServicesItemsEnum, v)
	}
}

func (o *UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0) validateServicesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0ServicesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0) validateServices(formats strfmt.Registry) error {

	if err := validate.Required("services", "body", o.Services); err != nil {
		return err
	}

	for i := 0; i < len(o.Services); i++ {

		// value enum
		if err := o.validateServicesItemsEnum("services"+"."+strconv.Itoa(i), "body", o.Services[i]); err != nil {
			return err
		}

	}

	return nil
}

func (o *UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0) validateVlanID(formats strfmt.Registry) error {

	if err := validate.Required("vlanId", "body", o.VlanID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless ssid bonjour forwarding params body rules items0 based on context it is used
func (o *UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidBonjourForwardingParamsBodyRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
