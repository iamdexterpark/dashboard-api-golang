// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkWirelessClientConnectivityEventsParams creates a new GetNetworkWirelessClientConnectivityEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNetworkWirelessClientConnectivityEventsParams() *GetNetworkWirelessClientConnectivityEventsParams {
	return &GetNetworkWirelessClientConnectivityEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkWirelessClientConnectivityEventsParamsWithTimeout creates a new GetNetworkWirelessClientConnectivityEventsParams object
// with the ability to set a timeout on a request.
func NewGetNetworkWirelessClientConnectivityEventsParamsWithTimeout(timeout time.Duration) *GetNetworkWirelessClientConnectivityEventsParams {
	return &GetNetworkWirelessClientConnectivityEventsParams{
		timeout: timeout,
	}
}

// NewGetNetworkWirelessClientConnectivityEventsParamsWithContext creates a new GetNetworkWirelessClientConnectivityEventsParams object
// with the ability to set a context for a request.
func NewGetNetworkWirelessClientConnectivityEventsParamsWithContext(ctx context.Context) *GetNetworkWirelessClientConnectivityEventsParams {
	return &GetNetworkWirelessClientConnectivityEventsParams{
		Context: ctx,
	}
}

// NewGetNetworkWirelessClientConnectivityEventsParamsWithHTTPClient creates a new GetNetworkWirelessClientConnectivityEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNetworkWirelessClientConnectivityEventsParamsWithHTTPClient(client *http.Client) *GetNetworkWirelessClientConnectivityEventsParams {
	return &GetNetworkWirelessClientConnectivityEventsParams{
		HTTPClient: client,
	}
}

/* GetNetworkWirelessClientConnectivityEventsParams contains all the parameters to send to the API endpoint
   for the get network wireless client connectivity events operation.

   Typically these are written to a http.Request.
*/
type GetNetworkWirelessClientConnectivityEventsParams struct {

	/* Band.

	   Filter results by band (either '2.4', '5', '6').
	*/
	Band *string

	// ClientID.
	ClientID string

	/* DeviceSerial.

	   Filter results by an AP's serial number.
	*/
	DeviceSerial *string

	/* EndingBefore.

	   A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	EndingBefore *string

	/* IncludedSeverities.

	   A list of severities to include. If not specified, events of all severities will be returned. Valid severities are 'good', 'info', 'warn' and/or 'bad'.
	*/
	IncludedSeverities []string

	// NetworkID.
	NetworkID string

	/* PerPage.

	   The number of entries per page returned. Acceptable range is 3 - 1000.
	*/
	PerPage *int64

	/* SsidNumber.

	   An SSID number to include. If not specified, events for all SSIDs will be returned.
	*/
	SsidNumber *int64

	/* StartingAfter.

	   A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	StartingAfter *string

	/* T0.

	   The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
	*/
	T0 *string

	/* T1.

	   The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
	*/
	T1 *string

	/* Timespan.

	   The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.

	   Format: float
	*/
	Timespan *float32

	/* Types.

	   A list of event types to include. If not specified, events of all types will be returned. Valid types are 'assoc', 'disassoc', 'auth', 'deauth', 'dns', 'dhcp', 'roam', 'connection' and/or 'sticky'.
	*/
	Types []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get network wireless client connectivity events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithDefaults() *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get network wireless client connectivity events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithTimeout(timeout time.Duration) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithContext(ctx context.Context) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithHTTPClient(client *http.Client) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBand adds the band to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithBand(band *string) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetBand(band)
	return o
}

// SetBand adds the band to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetBand(band *string) {
	o.Band = band
}

// WithClientID adds the clientID to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithClientID(clientID string) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithDeviceSerial adds the deviceSerial to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithDeviceSerial(deviceSerial *string) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetDeviceSerial(deviceSerial)
	return o
}

// SetDeviceSerial adds the deviceSerial to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetDeviceSerial(deviceSerial *string) {
	o.DeviceSerial = deviceSerial
}

// WithEndingBefore adds the endingBefore to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithEndingBefore(endingBefore *string) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetEndingBefore(endingBefore)
	return o
}

// SetEndingBefore adds the endingBefore to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetEndingBefore(endingBefore *string) {
	o.EndingBefore = endingBefore
}

// WithIncludedSeverities adds the includedSeverities to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithIncludedSeverities(includedSeverities []string) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetIncludedSeverities(includedSeverities)
	return o
}

// SetIncludedSeverities adds the includedSeverities to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetIncludedSeverities(includedSeverities []string) {
	o.IncludedSeverities = includedSeverities
}

// WithNetworkID adds the networkID to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithNetworkID(networkID string) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithPerPage adds the perPage to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithPerPage(perPage *int64) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSsidNumber adds the ssidNumber to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithSsidNumber(ssidNumber *int64) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetSsidNumber(ssidNumber)
	return o
}

// SetSsidNumber adds the ssidNumber to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetSsidNumber(ssidNumber *int64) {
	o.SsidNumber = ssidNumber
}

// WithStartingAfter adds the startingAfter to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithStartingAfter(startingAfter *string) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetStartingAfter(startingAfter)
	return o
}

// SetStartingAfter adds the startingAfter to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetStartingAfter(startingAfter *string) {
	o.StartingAfter = startingAfter
}

// WithT0 adds the t0 to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithT0(t0 *string) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetT0(t0)
	return o
}

// SetT0 adds the t0 to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetT0(t0 *string) {
	o.T0 = t0
}

// WithT1 adds the t1 to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithT1(t1 *string) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetT1(t1)
	return o
}

// SetT1 adds the t1 to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetT1(t1 *string) {
	o.T1 = t1
}

// WithTimespan adds the timespan to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithTimespan(timespan *float32) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetTimespan(timespan)
	return o
}

// SetTimespan adds the timespan to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetTimespan(timespan *float32) {
	o.Timespan = timespan
}

// WithTypes adds the types to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) WithTypes(types []string) *GetNetworkWirelessClientConnectivityEventsParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the get network wireless client connectivity events params
func (o *GetNetworkWirelessClientConnectivityEventsParams) SetTypes(types []string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkWirelessClientConnectivityEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Band != nil {

		// query param band
		var qrBand string

		if o.Band != nil {
			qrBand = *o.Band
		}
		qBand := qrBand
		if qBand != "" {

			if err := r.SetQueryParam("band", qBand); err != nil {
				return err
			}
		}
	}

	// path param clientId
	if err := r.SetPathParam("clientId", o.ClientID); err != nil {
		return err
	}

	if o.DeviceSerial != nil {

		// query param deviceSerial
		var qrDeviceSerial string

		if o.DeviceSerial != nil {
			qrDeviceSerial = *o.DeviceSerial
		}
		qDeviceSerial := qrDeviceSerial
		if qDeviceSerial != "" {

			if err := r.SetQueryParam("deviceSerial", qDeviceSerial); err != nil {
				return err
			}
		}
	}

	if o.EndingBefore != nil {

		// query param endingBefore
		var qrEndingBefore string

		if o.EndingBefore != nil {
			qrEndingBefore = *o.EndingBefore
		}
		qEndingBefore := qrEndingBefore
		if qEndingBefore != "" {

			if err := r.SetQueryParam("endingBefore", qEndingBefore); err != nil {
				return err
			}
		}
	}

	if o.IncludedSeverities != nil {

		// binding items for includedSeverities
		joinedIncludedSeverities := o.bindParamIncludedSeverities(reg)

		// query array param includedSeverities
		if err := r.SetQueryParam("includedSeverities", joinedIncludedSeverities...); err != nil {
			return err
		}
	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.PerPage != nil {

		// query param perPage
		var qrPerPage int64

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("perPage", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.SsidNumber != nil {

		// query param ssidNumber
		var qrSsidNumber int64

		if o.SsidNumber != nil {
			qrSsidNumber = *o.SsidNumber
		}
		qSsidNumber := swag.FormatInt64(qrSsidNumber)
		if qSsidNumber != "" {

			if err := r.SetQueryParam("ssidNumber", qSsidNumber); err != nil {
				return err
			}
		}
	}

	if o.StartingAfter != nil {

		// query param startingAfter
		var qrStartingAfter string

		if o.StartingAfter != nil {
			qrStartingAfter = *o.StartingAfter
		}
		qStartingAfter := qrStartingAfter
		if qStartingAfter != "" {

			if err := r.SetQueryParam("startingAfter", qStartingAfter); err != nil {
				return err
			}
		}
	}

	if o.T0 != nil {

		// query param t0
		var qrT0 string

		if o.T0 != nil {
			qrT0 = *o.T0
		}
		qT0 := qrT0
		if qT0 != "" {

			if err := r.SetQueryParam("t0", qT0); err != nil {
				return err
			}
		}
	}

	if o.T1 != nil {

		// query param t1
		var qrT1 string

		if o.T1 != nil {
			qrT1 = *o.T1
		}
		qT1 := qrT1
		if qT1 != "" {

			if err := r.SetQueryParam("t1", qT1); err != nil {
				return err
			}
		}
	}

	if o.Timespan != nil {

		// query param timespan
		var qrTimespan float32

		if o.Timespan != nil {
			qrTimespan = *o.Timespan
		}
		qTimespan := swag.FormatFloat32(qrTimespan)
		if qTimespan != "" {

			if err := r.SetQueryParam("timespan", qTimespan); err != nil {
				return err
			}
		}
	}

	if o.Types != nil {

		// binding items for types
		joinedTypes := o.bindParamTypes(reg)

		// query array param types
		if err := r.SetQueryParam("types", joinedTypes...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetNetworkWirelessClientConnectivityEvents binds the parameter includedSeverities
func (o *GetNetworkWirelessClientConnectivityEventsParams) bindParamIncludedSeverities(formats strfmt.Registry) []string {
	includedSeveritiesIR := o.IncludedSeverities

	var includedSeveritiesIC []string
	for _, includedSeveritiesIIR := range includedSeveritiesIR { // explode []string

		includedSeveritiesIIV := includedSeveritiesIIR // string as string
		includedSeveritiesIC = append(includedSeveritiesIC, includedSeveritiesIIV)
	}

	// items.CollectionFormat: ""
	includedSeveritiesIS := swag.JoinByFormat(includedSeveritiesIC, "")

	return includedSeveritiesIS
}

// bindParamGetNetworkWirelessClientConnectivityEvents binds the parameter types
func (o *GetNetworkWirelessClientConnectivityEventsParams) bindParamTypes(formats strfmt.Registry) []string {
	typesIR := o.Types

	var typesIC []string
	for _, typesIIR := range typesIR { // explode []string

		typesIIV := typesIIR // string as string
		typesIC = append(typesIC, typesIIV)
	}

	// items.CollectionFormat: ""
	typesIS := swag.JoinByFormat(typesIC, "")

	return typesIS
}
