// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkWirelessSettingsReader is a Reader for the UpdateNetworkWirelessSettings structure.
type UpdateNetworkWirelessSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkWirelessSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkWirelessSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkWirelessSettingsOK creates a UpdateNetworkWirelessSettingsOK with default headers values
func NewUpdateNetworkWirelessSettingsOK() *UpdateNetworkWirelessSettingsOK {
	return &UpdateNetworkWirelessSettingsOK{}
}

/* UpdateNetworkWirelessSettingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkWirelessSettingsOK struct {
	Payload interface{}
}

func (o *UpdateNetworkWirelessSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/wireless/settings][%d] updateNetworkWirelessSettingsOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkWirelessSettingsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkWirelessSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkWirelessSettingsBody update network wireless settings body
// Example: {"ipv6BridgeEnabled":false,"locationAnalyticsEnabled":false,"meshingEnabled":true,"upgradeStrategy":"minimizeUpgradeTime"}
swagger:model UpdateNetworkWirelessSettingsBody
*/
type UpdateNetworkWirelessSettingsBody struct {

	// Toggle for enabling or disabling IPv6 bridging in a network (Note: if enabled, SSIDs must also be configured to use bridge mode)
	IPV6BridgeEnabled bool `json:"ipv6BridgeEnabled,omitempty"`

	// Toggle for enabling or disabling LED lights on all APs in the network (making them run dark)
	LedLightsOn bool `json:"ledLightsOn,omitempty"`

	// Toggle for enabling or disabling location analytics for your network
	LocationAnalyticsEnabled bool `json:"locationAnalyticsEnabled,omitempty"`

	// Toggle for enabling or disabling meshing in a network
	MeshingEnabled bool `json:"meshingEnabled,omitempty"`

	// The upgrade strategy to apply to the network. Must be one of 'minimizeUpgradeTime' or 'minimizeClientDowntime'. Requires firmware version MR 26.8 or higher'
	// Enum: [minimizeUpgradeTime minimizeClientDowntime]
	UpgradeStrategy string `json:"upgradeStrategy,omitempty"`
}

// Validate validates this update network wireless settings body
func (o *UpdateNetworkWirelessSettingsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUpgradeStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessSettingsBodyTypeUpgradeStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["minimizeUpgradeTime","minimizeClientDowntime"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessSettingsBodyTypeUpgradeStrategyPropEnum = append(updateNetworkWirelessSettingsBodyTypeUpgradeStrategyPropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessSettingsBodyUpgradeStrategyMinimizeUpgradeTime captures enum value "minimizeUpgradeTime"
	UpdateNetworkWirelessSettingsBodyUpgradeStrategyMinimizeUpgradeTime string = "minimizeUpgradeTime"

	// UpdateNetworkWirelessSettingsBodyUpgradeStrategyMinimizeClientDowntime captures enum value "minimizeClientDowntime"
	UpdateNetworkWirelessSettingsBodyUpgradeStrategyMinimizeClientDowntime string = "minimizeClientDowntime"
)

// prop value enum
func (o *UpdateNetworkWirelessSettingsBody) validateUpgradeStrategyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessSettingsBodyTypeUpgradeStrategyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessSettingsBody) validateUpgradeStrategy(formats strfmt.Registry) error {
	if swag.IsZero(o.UpgradeStrategy) { // not required
		return nil
	}

	// value enum
	if err := o.validateUpgradeStrategyEnum("updateNetworkWirelessSettings"+"."+"upgradeStrategy", "body", o.UpgradeStrategy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless settings body based on context it is used
func (o *UpdateNetworkWirelessSettingsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSettingsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSettingsBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSettingsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
