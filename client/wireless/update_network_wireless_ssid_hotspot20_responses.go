// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkWirelessSsidHotspot20Reader is a Reader for the UpdateNetworkWirelessSsidHotspot20 structure.
type UpdateNetworkWirelessSsidHotspot20Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkWirelessSsidHotspot20Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkWirelessSsidHotspot20OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkWirelessSsidHotspot20OK creates a UpdateNetworkWirelessSsidHotspot20OK with default headers values
func NewUpdateNetworkWirelessSsidHotspot20OK() *UpdateNetworkWirelessSsidHotspot20OK {
	return &UpdateNetworkWirelessSsidHotspot20OK{}
}

/* UpdateNetworkWirelessSsidHotspot20OK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkWirelessSsidHotspot20OK struct {
	Payload interface{}
}

func (o *UpdateNetworkWirelessSsidHotspot20OK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/wireless/ssids/{number}/hotspot20][%d] updateNetworkWirelessSsidHotspot20OK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkWirelessSsidHotspot20OK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkWirelessSsidHotspot20OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkWirelessSsidHotspot20Body update network wireless ssid hotspot20 body
// Example: {"domains":["meraki.local","domain2.com"],"enabled":true,"mccMncs":[{"mcc":"123","mnc":"456"},{"mcc":"563","mnc":"232"}],"naiRealms":[{"format":"1","methods":[{"authenticationTypes":{"credentials":[],"eapInnerAuthentication":["EAP-TTLS with MSCHAPv2"],"nonEapInnerAuthentication":["MSCHAP"],"tunneledEapMethodCredentials":[]},"id":"1"}],"name":"Realm 1"}],"networkAccessType":"Private network","operator":{"name":"Meraki Product Management"},"roamConsortOis":["ABC123","456EFG"],"venue":{"name":"SF Branch","type":"Unspecified Assembly"}}
swagger:model UpdateNetworkWirelessSsidHotspot20Body
*/
type UpdateNetworkWirelessSsidHotspot20Body struct {

	// An array of domain names
	Domains []string `json:"domains"`

	// Whether or not Hotspot 2.0 for this SSID is enabled
	Enabled bool `json:"enabled,omitempty"`

	// An array of MCC/MNC pairs
	MccMncs []*UpdateNetworkWirelessSsidHotspot20ParamsBodyMccMncsItems0 `json:"mccMncs"`

	// An array of NAI realms
	NaiRealms []*UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0 `json:"naiRealms"`

	// The network type of this SSID ('Private network', 'Private network with guest access', 'Chargeable public network', 'Free public network', 'Personal device network', 'Emergency services only network', 'Test or experimental', 'Wildcard')
	// Enum: [Private network Private network with guest access Chargeable public network Free public network Personal device network Emergency services only network Test or experimental Wildcard]
	NetworkAccessType string `json:"networkAccessType,omitempty"`

	// operator
	Operator *UpdateNetworkWirelessSsidHotspot20ParamsBodyOperator `json:"operator,omitempty"`

	// An array of roaming consortium OIs (hexadecimal number 3-5 octets in length)
	RoamConsortOis []string `json:"roamConsortOis"`

	// venue
	Venue *UpdateNetworkWirelessSsidHotspot20ParamsBodyVenue `json:"venue,omitempty"`
}

// Validate validates this update network wireless ssid hotspot20 body
func (o *UpdateNetworkWirelessSsidHotspot20Body) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMccMncs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNaiRealms(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkAccessType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVenue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20Body) validateMccMncs(formats strfmt.Registry) error {
	if swag.IsZero(o.MccMncs) { // not required
		return nil
	}

	for i := 0; i < len(o.MccMncs); i++ {
		if swag.IsZero(o.MccMncs[i]) { // not required
			continue
		}

		if o.MccMncs[i] != nil {
			if err := o.MccMncs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "mccMncs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "mccMncs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20Body) validateNaiRealms(formats strfmt.Registry) error {
	if swag.IsZero(o.NaiRealms) { // not required
		return nil
	}

	for i := 0; i < len(o.NaiRealms); i++ {
		if swag.IsZero(o.NaiRealms[i]) { // not required
			continue
		}

		if o.NaiRealms[i] != nil {
			if err := o.NaiRealms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "naiRealms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "naiRealms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var updateNetworkWirelessSsidHotspot20BodyTypeNetworkAccessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Private network","Private network with guest access","Chargeable public network","Free public network","Personal device network","Emergency services only network","Test or experimental","Wildcard"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessSsidHotspot20BodyTypeNetworkAccessTypePropEnum = append(updateNetworkWirelessSsidHotspot20BodyTypeNetworkAccessTypePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypePrivateNetwork captures enum value "Private network"
	UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypePrivateNetwork string = "Private network"

	// UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypePrivateNetworkWithGuestAccess captures enum value "Private network with guest access"
	UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypePrivateNetworkWithGuestAccess string = "Private network with guest access"

	// UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypeChargeablePublicNetwork captures enum value "Chargeable public network"
	UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypeChargeablePublicNetwork string = "Chargeable public network"

	// UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypeFreePublicNetwork captures enum value "Free public network"
	UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypeFreePublicNetwork string = "Free public network"

	// UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypePersonalDeviceNetwork captures enum value "Personal device network"
	UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypePersonalDeviceNetwork string = "Personal device network"

	// UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypeEmergencyServicesOnlyNetwork captures enum value "Emergency services only network"
	UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypeEmergencyServicesOnlyNetwork string = "Emergency services only network"

	// UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypeTestOrExperimental captures enum value "Test or experimental"
	UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypeTestOrExperimental string = "Test or experimental"

	// UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypeWildcard captures enum value "Wildcard"
	UpdateNetworkWirelessSsidHotspot20BodyNetworkAccessTypeWildcard string = "Wildcard"
)

// prop value enum
func (o *UpdateNetworkWirelessSsidHotspot20Body) validateNetworkAccessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessSsidHotspot20BodyTypeNetworkAccessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20Body) validateNetworkAccessType(formats strfmt.Registry) error {
	if swag.IsZero(o.NetworkAccessType) { // not required
		return nil
	}

	// value enum
	if err := o.validateNetworkAccessTypeEnum("updateNetworkWirelessSsidHotspot20"+"."+"networkAccessType", "body", o.NetworkAccessType); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20Body) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(o.Operator) { // not required
		return nil
	}

	if o.Operator != nil {
		if err := o.Operator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "operator")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20Body) validateVenue(formats strfmt.Registry) error {
	if swag.IsZero(o.Venue) { // not required
		return nil
	}

	if o.Venue != nil {
		if err := o.Venue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "venue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "venue")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network wireless ssid hotspot20 body based on the context it is used
func (o *UpdateNetworkWirelessSsidHotspot20Body) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMccMncs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNaiRealms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVenue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20Body) contextValidateMccMncs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.MccMncs); i++ {

		if o.MccMncs[i] != nil {
			if err := o.MccMncs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "mccMncs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "mccMncs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20Body) contextValidateNaiRealms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.NaiRealms); i++ {

		if o.NaiRealms[i] != nil {
			if err := o.NaiRealms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "naiRealms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "naiRealms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20Body) contextValidateOperator(ctx context.Context, formats strfmt.Registry) error {

	if o.Operator != nil {
		if err := o.Operator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "operator")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20Body) contextValidateVenue(ctx context.Context, formats strfmt.Registry) error {

	if o.Venue != nil {
		if err := o.Venue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "venue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidHotspot20" + "." + "venue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20Body) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidHotspot20Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidHotspot20ParamsBodyMccMncsItems0 update network wireless ssid hotspot20 params body mcc mncs items0
swagger:model UpdateNetworkWirelessSsidHotspot20ParamsBodyMccMncsItems0
*/
type UpdateNetworkWirelessSsidHotspot20ParamsBodyMccMncsItems0 struct {

	// MCC value
	Mcc string `json:"mcc,omitempty"`

	// MNC value
	Mnc string `json:"mnc,omitempty"`
}

// Validate validates this update network wireless ssid hotspot20 params body mcc mncs items0
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyMccMncsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless ssid hotspot20 params body mcc mncs items0 based on context it is used
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyMccMncsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyMccMncsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyMccMncsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidHotspot20ParamsBodyMccMncsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0 update network wireless ssid hotspot20 params body nai realms items0
swagger:model UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0
*/
type UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0 struct {

	// The format for the realm ('1' or '0')
	// Enum: [1 0]
	Format string `json:"format,omitempty"`

	// An array of EAP methods for the realm.
	Methods []*UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0MethodsItems0 `json:"methods"`

	// The name of the realm
	Realm string `json:"realm,omitempty"`
}

// Validate validates this update network wireless ssid hotspot20 params body nai realms items0
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMethods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0TypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1","0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0TypeFormatPropEnum = append(updateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0TypeFormatPropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0FormatNr1 captures enum value "1"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0FormatNr1 string = "1"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0FormatNr0 captures enum value "0"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0FormatNr0 string = "0"
)

// prop value enum
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0) validateFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0TypeFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(o.Format) { // not required
		return nil
	}

	// value enum
	if err := o.validateFormatEnum("format", "body", o.Format); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0) validateMethods(formats strfmt.Registry) error {
	if swag.IsZero(o.Methods) { // not required
		return nil
	}

	for i := 0; i < len(o.Methods); i++ {
		if swag.IsZero(o.Methods[i]) { // not required
			continue
		}

		if o.Methods[i] != nil {
			if err := o.Methods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("methods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("methods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network wireless ssid hotspot20 params body nai realms items0 based on the context it is used
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMethods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0) contextValidateMethods(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Methods); i++ {

		if o.Methods[i] != nil {
			if err := o.Methods[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("methods" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("methods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0MethodsItems0 update network wireless ssid hotspot20 params body nai realms items0 methods items0
swagger:model UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0MethodsItems0
*/
type UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0MethodsItems0 struct {

	// The authentication types for the method. These should be formatted as an object with the EAP method category in camelcase as the key and the list of types as the value (nonEapInnerAuthentication: Reserved, PAP, CHAP, MSCHAP, MSCHAPV2; eapInnerAuthentication: EAP-TLS, EAP-SIM, EAP-AKA, EAP-TTLS with MSCHAPv2; credentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, none, Reserved, Vendor Specific; tunneledEapMethodCredentials: SIM, USIM, NFC Secure Element, Hardware Token, Softoken, Certificate, username/password, Reserved, Anonymous, Vendor Specific)
	AuthenticationTypes interface{} `json:"authenticationTypes,omitempty"`

	// ID of method
	ID string `json:"id,omitempty"`
}

// Validate validates this update network wireless ssid hotspot20 params body nai realms items0 methods items0
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0MethodsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless ssid hotspot20 params body nai realms items0 methods items0 based on context it is used
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0MethodsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0MethodsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0MethodsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidHotspot20ParamsBodyNaiRealmsItems0MethodsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidHotspot20ParamsBodyOperator Operator settings for this SSID
swagger:model UpdateNetworkWirelessSsidHotspot20ParamsBodyOperator
*/
type UpdateNetworkWirelessSsidHotspot20ParamsBodyOperator struct {

	// Operator name
	Name string `json:"name,omitempty"`
}

// Validate validates this update network wireless ssid hotspot20 params body operator
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyOperator) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless ssid hotspot20 params body operator based on context it is used
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyOperator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyOperator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyOperator) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidHotspot20ParamsBodyOperator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidHotspot20ParamsBodyVenue Venue settings for this SSID
swagger:model UpdateNetworkWirelessSsidHotspot20ParamsBodyVenue
*/
type UpdateNetworkWirelessSsidHotspot20ParamsBodyVenue struct {

	// Venue name
	Name string `json:"name,omitempty"`

	// Venue type ('Unspecified', 'Unspecified Assembly', 'Arena', 'Stadium', 'Passenger Terminal', 'Amphitheater', 'Amusement Park', 'Place of Worship', 'Convention Center', 'Library', 'Museum', 'Restaurant', 'Theater', 'Bar', 'Coffee Shop', 'Zoo or Aquarium', 'Emergency Coordination Center', 'Unspecified Business', 'Doctor or Dentist office', 'Bank', 'Fire Station', 'Police Station', 'Post Office', 'Professional Office', 'Research and Development Facility', 'Attorney Office', 'Unspecified Educational', 'School, Primary', 'School, Secondary', 'University or College', 'Unspecified Factory and Industrial', 'Factory', 'Unspecified Institutional', 'Hospital', 'Long-Term Care Facility', 'Alcohol and Drug Rehabilitation Center', 'Group Home', 'Prison or Jail', 'Unspecified Mercantile', 'Retail Store', 'Grocery Market', 'Automotive Service Station', 'Shopping Mall', 'Gas Station', 'Unspecified Residential', 'Private Residence', 'Hotel or Motel', 'Dormitory', 'Boarding House', 'Unspecified Storage', 'Unspecified Utility and Miscellaneous', 'Unspecified Vehicular', 'Automobile or Truck', 'Airplane', 'Bus', 'Ferry', 'Ship or Boat', 'Train', 'Motor Bike', 'Unspecified Outdoor', 'Muni-mesh Network', 'City Park', 'Rest Area', 'Traffic Control', 'Bus Stop', 'Kiosk')
	// Enum: [Unspecified Unspecified Assembly Arena Stadium Passenger Terminal Amphitheater Amusement Park Place of Worship Convention Center Library Museum Restaurant Theater Bar Coffee Shop Zoo or Aquarium Emergency Coordination Center Unspecified Business Doctor or Dentist office Bank Fire Station Police Station Post Office Professional Office Research and Development Facility Attorney Office Unspecified Educational School, Primary School, Secondary University or College Unspecified Factory and Industrial Factory Unspecified Institutional Hospital Long-Term Care Facility Alcohol and Drug Rehabilitation Center Group Home Prison or Jail Unspecified Mercantile Retail Store Grocery Market Automotive Service Station Shopping Mall Gas Station Unspecified Residential Private Residence Hotel or Motel Dormitory Boarding House Unspecified Storage Unspecified Utility and Miscellaneous Unspecified Vehicular Automobile or Truck Airplane Bus Ferry Ship or Boat Train Motor Bike Unspecified Outdoor Muni-mesh Network City Park Rest Area Traffic Control Bus Stop Kiosk]
	Type string `json:"type,omitempty"`
}

// Validate validates this update network wireless ssid hotspot20 params body venue
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyVenue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unspecified","Unspecified Assembly","Arena","Stadium","Passenger Terminal","Amphitheater","Amusement Park","Place of Worship","Convention Center","Library","Museum","Restaurant","Theater","Bar","Coffee Shop","Zoo or Aquarium","Emergency Coordination Center","Unspecified Business","Doctor or Dentist office","Bank","Fire Station","Police Station","Post Office","Professional Office","Research and Development Facility","Attorney Office","Unspecified Educational","School, Primary","School, Secondary","University or College","Unspecified Factory and Industrial","Factory","Unspecified Institutional","Hospital","Long-Term Care Facility","Alcohol and Drug Rehabilitation Center","Group Home","Prison or Jail","Unspecified Mercantile","Retail Store","Grocery Market","Automotive Service Station","Shopping Mall","Gas Station","Unspecified Residential","Private Residence","Hotel or Motel","Dormitory","Boarding House","Unspecified Storage","Unspecified Utility and Miscellaneous","Unspecified Vehicular","Automobile or Truck","Airplane","Bus","Ferry","Ship or Boat","Train","Motor Bike","Unspecified Outdoor","Muni-mesh Network","City Park","Rest Area","Traffic Control","Bus Stop","Kiosk"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeTypePropEnum = append(updateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeTypePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecified captures enum value "Unspecified"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecified string = "Unspecified"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedAssembly captures enum value "Unspecified Assembly"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedAssembly string = "Unspecified Assembly"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeArena captures enum value "Arena"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeArena string = "Arena"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeStadium captures enum value "Stadium"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeStadium string = "Stadium"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePassengerTerminal captures enum value "Passenger Terminal"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePassengerTerminal string = "Passenger Terminal"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAmphitheater captures enum value "Amphitheater"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAmphitheater string = "Amphitheater"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAmusementPark captures enum value "Amusement Park"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAmusementPark string = "Amusement Park"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePlaceOfWorship captures enum value "Place of Worship"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePlaceOfWorship string = "Place of Worship"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeConventionCenter captures enum value "Convention Center"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeConventionCenter string = "Convention Center"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeLibrary captures enum value "Library"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeLibrary string = "Library"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeMuseum captures enum value "Museum"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeMuseum string = "Museum"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeRestaurant captures enum value "Restaurant"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeRestaurant string = "Restaurant"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeTheater captures enum value "Theater"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeTheater string = "Theater"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeBar captures enum value "Bar"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeBar string = "Bar"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeCoffeeShop captures enum value "Coffee Shop"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeCoffeeShop string = "Coffee Shop"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeZooOrAquarium captures enum value "Zoo or Aquarium"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeZooOrAquarium string = "Zoo or Aquarium"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeEmergencyCoordinationCenter captures enum value "Emergency Coordination Center"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeEmergencyCoordinationCenter string = "Emergency Coordination Center"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedBusiness captures enum value "Unspecified Business"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedBusiness string = "Unspecified Business"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeDoctorOrDentistOffice captures enum value "Doctor or Dentist office"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeDoctorOrDentistOffice string = "Doctor or Dentist office"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeBank captures enum value "Bank"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeBank string = "Bank"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeFireStation captures enum value "Fire Station"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeFireStation string = "Fire Station"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePoliceStation captures enum value "Police Station"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePoliceStation string = "Police Station"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePostOffice captures enum value "Post Office"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePostOffice string = "Post Office"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeProfessionalOffice captures enum value "Professional Office"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeProfessionalOffice string = "Professional Office"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeResearchAndDevelopmentFacility captures enum value "Research and Development Facility"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeResearchAndDevelopmentFacility string = "Research and Development Facility"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAttorneyOffice captures enum value "Attorney Office"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAttorneyOffice string = "Attorney Office"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedEducational captures enum value "Unspecified Educational"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedEducational string = "Unspecified Educational"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeSchoolPrimary captures enum value "School, Primary"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeSchoolPrimary string = "School, Primary"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeSchoolSecondary captures enum value "School, Secondary"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeSchoolSecondary string = "School, Secondary"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUniversityOrCollege captures enum value "University or College"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUniversityOrCollege string = "University or College"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedFactoryAndIndustrial captures enum value "Unspecified Factory and Industrial"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedFactoryAndIndustrial string = "Unspecified Factory and Industrial"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeFactory captures enum value "Factory"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeFactory string = "Factory"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedInstitutional captures enum value "Unspecified Institutional"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedInstitutional string = "Unspecified Institutional"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeHospital captures enum value "Hospital"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeHospital string = "Hospital"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeLongDashTermCareFacility captures enum value "Long-Term Care Facility"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeLongDashTermCareFacility string = "Long-Term Care Facility"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAlcoholAndDrugRehabilitationCenter captures enum value "Alcohol and Drug Rehabilitation Center"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAlcoholAndDrugRehabilitationCenter string = "Alcohol and Drug Rehabilitation Center"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeGroupHome captures enum value "Group Home"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeGroupHome string = "Group Home"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePrisonOrJail captures enum value "Prison or Jail"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePrisonOrJail string = "Prison or Jail"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedMercantile captures enum value "Unspecified Mercantile"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedMercantile string = "Unspecified Mercantile"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeRetailStore captures enum value "Retail Store"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeRetailStore string = "Retail Store"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeGroceryMarket captures enum value "Grocery Market"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeGroceryMarket string = "Grocery Market"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAutomotiveServiceStation captures enum value "Automotive Service Station"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAutomotiveServiceStation string = "Automotive Service Station"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeShoppingMall captures enum value "Shopping Mall"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeShoppingMall string = "Shopping Mall"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeGasStation captures enum value "Gas Station"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeGasStation string = "Gas Station"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedResidential captures enum value "Unspecified Residential"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedResidential string = "Unspecified Residential"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePrivateResidence captures enum value "Private Residence"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypePrivateResidence string = "Private Residence"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeHotelOrMotel captures enum value "Hotel or Motel"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeHotelOrMotel string = "Hotel or Motel"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeDormitory captures enum value "Dormitory"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeDormitory string = "Dormitory"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeBoardingHouse captures enum value "Boarding House"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeBoardingHouse string = "Boarding House"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedStorage captures enum value "Unspecified Storage"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedStorage string = "Unspecified Storage"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedUtilityAndMiscellaneous captures enum value "Unspecified Utility and Miscellaneous"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedUtilityAndMiscellaneous string = "Unspecified Utility and Miscellaneous"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedVehicular captures enum value "Unspecified Vehicular"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedVehicular string = "Unspecified Vehicular"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAutomobileOrTruck captures enum value "Automobile or Truck"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAutomobileOrTruck string = "Automobile or Truck"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAirplane captures enum value "Airplane"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeAirplane string = "Airplane"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeBus captures enum value "Bus"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeBus string = "Bus"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeFerry captures enum value "Ferry"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeFerry string = "Ferry"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeShipOrBoat captures enum value "Ship or Boat"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeShipOrBoat string = "Ship or Boat"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeTrain captures enum value "Train"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeTrain string = "Train"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeMotorBike captures enum value "Motor Bike"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeMotorBike string = "Motor Bike"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedOutdoor captures enum value "Unspecified Outdoor"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeUnspecifiedOutdoor string = "Unspecified Outdoor"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeMuniDashMeshNetwork captures enum value "Muni-mesh Network"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeMuniDashMeshNetwork string = "Muni-mesh Network"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeCityPark captures enum value "City Park"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeCityPark string = "City Park"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeRestArea captures enum value "Rest Area"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeRestArea string = "Rest Area"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeTrafficControl captures enum value "Traffic Control"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeTrafficControl string = "Traffic Control"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeBusStop captures enum value "Bus Stop"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeBusStop string = "Bus Stop"

	// UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeKiosk captures enum value "Kiosk"
	UpdateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeKiosk string = "Kiosk"
)

// prop value enum
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyVenue) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessSsidHotspot20ParamsBodyVenueTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyVenue) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("updateNetworkWirelessSsidHotspot20"+"."+"venue"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless ssid hotspot20 params body venue based on context it is used
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyVenue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyVenue) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidHotspot20ParamsBodyVenue) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidHotspot20ParamsBodyVenue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
