// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkWirelessBluetoothSettingsReader is a Reader for the UpdateNetworkWirelessBluetoothSettings structure.
type UpdateNetworkWirelessBluetoothSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkWirelessBluetoothSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkWirelessBluetoothSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkWirelessBluetoothSettingsOK creates a UpdateNetworkWirelessBluetoothSettingsOK with default headers values
func NewUpdateNetworkWirelessBluetoothSettingsOK() *UpdateNetworkWirelessBluetoothSettingsOK {
	return &UpdateNetworkWirelessBluetoothSettingsOK{}
}

/* UpdateNetworkWirelessBluetoothSettingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkWirelessBluetoothSettingsOK struct {
	Payload interface{}
}

func (o *UpdateNetworkWirelessBluetoothSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/wireless/bluetooth/settings][%d] updateNetworkWirelessBluetoothSettingsOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkWirelessBluetoothSettingsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkWirelessBluetoothSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkWirelessBluetoothSettingsBody update network wireless bluetooth settings body
// Example: {"advertisingEnabled":true,"major":1,"majorMinorAssignmentMode":"Non-unique","scanningEnabled":true,"uuid":"00000000-0000-0000-000-000000000000"}
swagger:model UpdateNetworkWirelessBluetoothSettingsBody
*/
type UpdateNetworkWirelessBluetoothSettingsBody struct {

	// Whether APs will advertise beacons. (true, false)
	AdvertisingEnabled bool `json:"advertisingEnabled,omitempty"`

	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major int64 `json:"major,omitempty"`

	// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
	// Enum: [Unique Non-unique]
	MajorMinorAssignmentMode string `json:"majorMinorAssignmentMode,omitempty"`

	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor int64 `json:"minor,omitempty"`

	// Whether APs will scan for Bluetooth enabled clients. (true, false)
	ScanningEnabled bool `json:"scanningEnabled,omitempty"`

	// The UUID to be used in the beacon identifier.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this update network wireless bluetooth settings body
func (o *UpdateNetworkWirelessBluetoothSettingsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMajorMinorAssignmentMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessBluetoothSettingsBodyTypeMajorMinorAssignmentModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unique","Non-unique"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessBluetoothSettingsBodyTypeMajorMinorAssignmentModePropEnum = append(updateNetworkWirelessBluetoothSettingsBodyTypeMajorMinorAssignmentModePropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessBluetoothSettingsBodyMajorMinorAssignmentModeUnique captures enum value "Unique"
	UpdateNetworkWirelessBluetoothSettingsBodyMajorMinorAssignmentModeUnique string = "Unique"

	// UpdateNetworkWirelessBluetoothSettingsBodyMajorMinorAssignmentModeNonDashUnique captures enum value "Non-unique"
	UpdateNetworkWirelessBluetoothSettingsBodyMajorMinorAssignmentModeNonDashUnique string = "Non-unique"
)

// prop value enum
func (o *UpdateNetworkWirelessBluetoothSettingsBody) validateMajorMinorAssignmentModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessBluetoothSettingsBodyTypeMajorMinorAssignmentModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessBluetoothSettingsBody) validateMajorMinorAssignmentMode(formats strfmt.Registry) error {
	if swag.IsZero(o.MajorMinorAssignmentMode) { // not required
		return nil
	}

	// value enum
	if err := o.validateMajorMinorAssignmentModeEnum("updateNetworkWirelessBluetoothSettings"+"."+"majorMinorAssignmentMode", "body", o.MajorMinorAssignmentMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless bluetooth settings body based on context it is used
func (o *UpdateNetworkWirelessBluetoothSettingsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessBluetoothSettingsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessBluetoothSettingsBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessBluetoothSettingsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
