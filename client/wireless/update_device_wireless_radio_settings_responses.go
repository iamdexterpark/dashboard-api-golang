// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDeviceWirelessRadioSettingsReader is a Reader for the UpdateDeviceWirelessRadioSettings structure.
type UpdateDeviceWirelessRadioSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeviceWirelessRadioSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDeviceWirelessRadioSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDeviceWirelessRadioSettingsOK creates a UpdateDeviceWirelessRadioSettingsOK with default headers values
func NewUpdateDeviceWirelessRadioSettingsOK() *UpdateDeviceWirelessRadioSettingsOK {
	return &UpdateDeviceWirelessRadioSettingsOK{}
}

/* UpdateDeviceWirelessRadioSettingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateDeviceWirelessRadioSettingsOK struct {
	Payload interface{}
}

func (o *UpdateDeviceWirelessRadioSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /devices/{serial}/wireless/radio/settings][%d] updateDeviceWirelessRadioSettingsOK  %+v", 200, o.Payload)
}
func (o *UpdateDeviceWirelessRadioSettingsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateDeviceWirelessRadioSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateDeviceWirelessRadioSettingsBody update device wireless radio settings body
// Example: {"fiveGhzSettings":{"channel":149,"channelWidth":20,"targetPower":15},"rfProfileId":"1234","twoFourGhzSettings":{"channel":11,"targetPower":21}}
swagger:model UpdateDeviceWirelessRadioSettingsBody
*/
type UpdateDeviceWirelessRadioSettingsBody struct {

	// five ghz settings
	FiveGhzSettings *UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings `json:"fiveGhzSettings,omitempty"`

	// The ID of an RF profile to assign to the device. If the value of this parameter is null, the appropriate basic RF profile (indoor or outdoor) will be assigned to the device. Assigning an RF profile will clear ALL manually configured overrides on the device (channel width, channel, power).
	RfProfileID string `json:"rfProfileId,omitempty"`

	// two four ghz settings
	TwoFourGhzSettings *UpdateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettings `json:"twoFourGhzSettings,omitempty"`
}

// Validate validates this update device wireless radio settings body
func (o *UpdateDeviceWirelessRadioSettingsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiveGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTwoFourGhzSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceWirelessRadioSettingsBody) validateFiveGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.FiveGhzSettings) { // not required
		return nil
	}

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceWirelessRadioSettings" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceWirelessRadioSettings" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateDeviceWirelessRadioSettingsBody) validateTwoFourGhzSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TwoFourGhzSettings) { // not required
		return nil
	}

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceWirelessRadioSettings" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceWirelessRadioSettings" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update device wireless radio settings body based on the context it is used
func (o *UpdateDeviceWirelessRadioSettingsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFiveGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTwoFourGhzSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceWirelessRadioSettingsBody) contextValidateFiveGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.FiveGhzSettings != nil {
		if err := o.FiveGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceWirelessRadioSettings" + "." + "fiveGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceWirelessRadioSettings" + "." + "fiveGhzSettings")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateDeviceWirelessRadioSettingsBody) contextValidateTwoFourGhzSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TwoFourGhzSettings != nil {
		if err := o.TwoFourGhzSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceWirelessRadioSettings" + "." + "twoFourGhzSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceWirelessRadioSettings" + "." + "twoFourGhzSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceWirelessRadioSettingsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceWirelessRadioSettingsBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceWirelessRadioSettingsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings Manual radio settings for 5 GHz.
swagger:model UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings
*/
type UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings struct {

	// Sets a manual channel for 5 GHz. Can be '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161', '165', '169', '173' or '177' or null for using auto channel.
	// Enum: [36 40 44 48 52 56 60 64 100 104 108 112 116 120 124 128 132 136 140 144 149 153 157 161 165 169 173 177]
	Channel int64 `json:"channel,omitempty"`

	// Sets a manual channel for 5 GHz. Can be '0', '20', '40', '80' or '160' or null for using auto channel width.
	// Enum: [0 20 40 80 160]
	ChannelWidth int64 `json:"channelWidth,omitempty"`

	// Set a manual target power for 5 GHz. Can be between '8' or '30' or null for using auto power range.
	TargetPower int64 `json:"targetPower,omitempty"`
}

// Validate validates this update device wireless radio settings params body five ghz settings
func (o *UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateChannelWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettingsTypeChannelPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[36,40,44,48,52,56,60,64,100,104,108,112,116,120,124,128,132,136,140,144,149,153,157,161,165,169,173,177]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettingsTypeChannelPropEnum = append(updateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettingsTypeChannelPropEnum, v)
	}
}

// prop value enum
func (o *UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings) validateChannelEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, updateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettingsTypeChannelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings) validateChannel(formats strfmt.Registry) error {
	if swag.IsZero(o.Channel) { // not required
		return nil
	}

	// value enum
	if err := o.validateChannelEnum("updateDeviceWirelessRadioSettings"+"."+"fiveGhzSettings"+"."+"channel", "body", o.Channel); err != nil {
		return err
	}

	return nil
}

var updateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettingsTypeChannelWidthPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,20,40,80,160]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettingsTypeChannelWidthPropEnum = append(updateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettingsTypeChannelWidthPropEnum, v)
	}
}

// prop value enum
func (o *UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings) validateChannelWidthEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, updateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettingsTypeChannelWidthPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings) validateChannelWidth(formats strfmt.Registry) error {
	if swag.IsZero(o.ChannelWidth) { // not required
		return nil
	}

	// value enum
	if err := o.validateChannelWidthEnum("updateDeviceWirelessRadioSettings"+"."+"fiveGhzSettings"+"."+"channelWidth", "body", o.ChannelWidth); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update device wireless radio settings params body five ghz settings based on context it is used
func (o *UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceWirelessRadioSettingsParamsBodyFiveGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettings Manual radio settings for 2.4 GHz.
swagger:model UpdateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettings
*/
type UpdateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettings struct {

	// Sets a manual channel for 2.4 GHz. Can be '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13' or '14' or null for using auto channel.
	// Enum: [1 2 3 4 5 6 7 8 9 10 11 12 13 14]
	Channel int64 `json:"channel,omitempty"`

	// Set a manual target power for 2.4 GHz. Can be between '5' or '30' or null for using auto power range.
	TargetPower int64 `json:"targetPower,omitempty"`
}

// Validate validates this update device wireless radio settings params body two four ghz settings
func (o *UpdateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettingsTypeChannelPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2,3,4,5,6,7,8,9,10,11,12,13,14]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettingsTypeChannelPropEnum = append(updateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettingsTypeChannelPropEnum, v)
	}
}

// prop value enum
func (o *UpdateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettings) validateChannelEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, updateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettingsTypeChannelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettings) validateChannel(formats strfmt.Registry) error {
	if swag.IsZero(o.Channel) { // not required
		return nil
	}

	// value enum
	if err := o.validateChannelEnum("updateDeviceWirelessRadioSettings"+"."+"twoFourGhzSettings"+"."+"channel", "body", o.Channel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update device wireless radio settings params body two four ghz settings based on context it is used
func (o *UpdateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettings) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceWirelessRadioSettingsParamsBodyTwoFourGhzSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
