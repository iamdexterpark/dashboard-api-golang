// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new wireless API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wireless API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkWirelessRfProfile(params *CreateNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkWirelessRfProfileCreated, error)

	CreateNetworkWirelessSsidIdentityPsk(params *CreateNetworkWirelessSsidIdentityPskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkWirelessSsidIdentityPskCreated, error)

	DeleteNetworkWirelessRfProfile(params *DeleteNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkWirelessRfProfileNoContent, error)

	DeleteNetworkWirelessSsidIdentityPsk(params *DeleteNetworkWirelessSsidIdentityPskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkWirelessSsidIdentityPskNoContent, error)

	GetDeviceWirelessBluetoothSettings(params *GetDeviceWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceWirelessBluetoothSettingsOK, error)

	GetDeviceWirelessConnectionStats(params *GetDeviceWirelessConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceWirelessConnectionStatsOK, error)

	GetDeviceWirelessLatencyStats(params *GetDeviceWirelessLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceWirelessLatencyStatsOK, error)

	GetDeviceWirelessRadioSettings(params *GetDeviceWirelessRadioSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceWirelessRadioSettingsOK, error)

	GetDeviceWirelessStatus(params *GetDeviceWirelessStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceWirelessStatusOK, error)

	GetNetworkWirelessAirMarshal(params *GetNetworkWirelessAirMarshalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessAirMarshalOK, error)

	GetNetworkWirelessAlternateManagementInterface(params *GetNetworkWirelessAlternateManagementInterfaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessAlternateManagementInterfaceOK, error)

	GetNetworkWirelessBilling(params *GetNetworkWirelessBillingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessBillingOK, error)

	GetNetworkWirelessBluetoothSettings(params *GetNetworkWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessBluetoothSettingsOK, error)

	GetNetworkWirelessChannelUtilizationHistory(params *GetNetworkWirelessChannelUtilizationHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessChannelUtilizationHistoryOK, error)

	GetNetworkWirelessClientConnectionStats(params *GetNetworkWirelessClientConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientConnectionStatsOK, error)

	GetNetworkWirelessClientConnectivityEvents(params *GetNetworkWirelessClientConnectivityEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientConnectivityEventsOK, error)

	GetNetworkWirelessClientCountHistory(params *GetNetworkWirelessClientCountHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientCountHistoryOK, error)

	GetNetworkWirelessClientLatencyHistory(params *GetNetworkWirelessClientLatencyHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientLatencyHistoryOK, error)

	GetNetworkWirelessClientLatencyStats(params *GetNetworkWirelessClientLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientLatencyStatsOK, error)

	GetNetworkWirelessClientsConnectionStats(params *GetNetworkWirelessClientsConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientsConnectionStatsOK, error)

	GetNetworkWirelessClientsLatencyStats(params *GetNetworkWirelessClientsLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientsLatencyStatsOK, error)

	GetNetworkWirelessConnectionStats(params *GetNetworkWirelessConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessConnectionStatsOK, error)

	GetNetworkWirelessDataRateHistory(params *GetNetworkWirelessDataRateHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessDataRateHistoryOK, error)

	GetNetworkWirelessDevicesConnectionStats(params *GetNetworkWirelessDevicesConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessDevicesConnectionStatsOK, error)

	GetNetworkWirelessDevicesLatencyStats(params *GetNetworkWirelessDevicesLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessDevicesLatencyStatsOK, error)

	GetNetworkWirelessFailedConnections(params *GetNetworkWirelessFailedConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessFailedConnectionsOK, error)

	GetNetworkWirelessLatencyHistory(params *GetNetworkWirelessLatencyHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessLatencyHistoryOK, error)

	GetNetworkWirelessLatencyStats(params *GetNetworkWirelessLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessLatencyStatsOK, error)

	GetNetworkWirelessMeshStatuses(params *GetNetworkWirelessMeshStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessMeshStatusesOK, error)

	GetNetworkWirelessRfProfile(params *GetNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessRfProfileOK, error)

	GetNetworkWirelessRfProfiles(params *GetNetworkWirelessRfProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessRfProfilesOK, error)

	GetNetworkWirelessSettings(params *GetNetworkWirelessSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSettingsOK, error)

	GetNetworkWirelessSignalQualityHistory(params *GetNetworkWirelessSignalQualityHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSignalQualityHistoryOK, error)

	GetNetworkWirelessSsid(params *GetNetworkWirelessSsidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidOK, error)

	GetNetworkWirelessSsidBonjourForwarding(params *GetNetworkWirelessSsidBonjourForwardingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidBonjourForwardingOK, error)

	GetNetworkWirelessSsidDeviceTypeGroupPolicies(params *GetNetworkWirelessSsidDeviceTypeGroupPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidDeviceTypeGroupPoliciesOK, error)

	GetNetworkWirelessSsidEapOverride(params *GetNetworkWirelessSsidEapOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidEapOverrideOK, error)

	GetNetworkWirelessSsidFirewallL3FirewallRules(params *GetNetworkWirelessSsidFirewallL3FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidFirewallL3FirewallRulesOK, error)

	GetNetworkWirelessSsidFirewallL7FirewallRules(params *GetNetworkWirelessSsidFirewallL7FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidFirewallL7FirewallRulesOK, error)

	GetNetworkWirelessSsidHotspot20(params *GetNetworkWirelessSsidHotspot20Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidHotspot20OK, error)

	GetNetworkWirelessSsidIdentityPsk(params *GetNetworkWirelessSsidIdentityPskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidIdentityPskOK, error)

	GetNetworkWirelessSsidIdentityPsks(params *GetNetworkWirelessSsidIdentityPsksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidIdentityPsksOK, error)

	GetNetworkWirelessSsidSchedules(params *GetNetworkWirelessSsidSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidSchedulesOK, error)

	GetNetworkWirelessSsidSplashSettings(params *GetNetworkWirelessSsidSplashSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidSplashSettingsOK, error)

	GetNetworkWirelessSsidTrafficShapingRules(params *GetNetworkWirelessSsidTrafficShapingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidTrafficShapingRulesOK, error)

	GetNetworkWirelessSsidVpn(params *GetNetworkWirelessSsidVpnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidVpnOK, error)

	GetNetworkWirelessSsids(params *GetNetworkWirelessSsidsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidsOK, error)

	GetNetworkWirelessUsageHistory(params *GetNetworkWirelessUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessUsageHistoryOK, error)

	UpdateDeviceWirelessBluetoothSettings(params *UpdateDeviceWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceWirelessBluetoothSettingsOK, error)

	UpdateDeviceWirelessRadioSettings(params *UpdateDeviceWirelessRadioSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceWirelessRadioSettingsOK, error)

	UpdateNetworkWirelessAlternateManagementInterface(params *UpdateNetworkWirelessAlternateManagementInterfaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessAlternateManagementInterfaceOK, error)

	UpdateNetworkWirelessBilling(params *UpdateNetworkWirelessBillingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessBillingOK, error)

	UpdateNetworkWirelessBluetoothSettings(params *UpdateNetworkWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessBluetoothSettingsOK, error)

	UpdateNetworkWirelessRfProfile(params *UpdateNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessRfProfileOK, error)

	UpdateNetworkWirelessSettings(params *UpdateNetworkWirelessSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSettingsOK, error)

	UpdateNetworkWirelessSsid(params *UpdateNetworkWirelessSsidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidOK, error)

	UpdateNetworkWirelessSsidBonjourForwarding(params *UpdateNetworkWirelessSsidBonjourForwardingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidBonjourForwardingOK, error)

	UpdateNetworkWirelessSsidDeviceTypeGroupPolicies(params *UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesOK, error)

	UpdateNetworkWirelessSsidEapOverride(params *UpdateNetworkWirelessSsidEapOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidEapOverrideOK, error)

	UpdateNetworkWirelessSsidFirewallL3FirewallRules(params *UpdateNetworkWirelessSsidFirewallL3FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidFirewallL3FirewallRulesOK, error)

	UpdateNetworkWirelessSsidFirewallL7FirewallRules(params *UpdateNetworkWirelessSsidFirewallL7FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidFirewallL7FirewallRulesOK, error)

	UpdateNetworkWirelessSsidHotspot20(params *UpdateNetworkWirelessSsidHotspot20Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidHotspot20OK, error)

	UpdateNetworkWirelessSsidIdentityPsk(params *UpdateNetworkWirelessSsidIdentityPskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidIdentityPskOK, error)

	UpdateNetworkWirelessSsidSchedules(params *UpdateNetworkWirelessSsidSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidSchedulesOK, error)

	UpdateNetworkWirelessSsidSplashSettings(params *UpdateNetworkWirelessSsidSplashSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidSplashSettingsOK, error)

	UpdateNetworkWirelessSsidTrafficShapingRules(params *UpdateNetworkWirelessSsidTrafficShapingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidTrafficShapingRulesOK, error)

	UpdateNetworkWirelessSsidVpn(params *UpdateNetworkWirelessSsidVpnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidVpnOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkWirelessRfProfile creates new r f profile for this network

  Creates new RF profile for this network
*/
func (a *Client) CreateNetworkWirelessRfProfile(params *CreateNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkWirelessRfProfileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkWirelessRfProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkWirelessRfProfile",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/wireless/rfProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkWirelessRfProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkWirelessRfProfileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkWirelessRfProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkWirelessSsidIdentityPsk creates an identity p s k

  Create an Identity PSK
*/
func (a *Client) CreateNetworkWirelessSsidIdentityPsk(params *CreateNetworkWirelessSsidIdentityPskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkWirelessSsidIdentityPskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkWirelessSsidIdentityPskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkWirelessSsidIdentityPsk",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/identityPsks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkWirelessSsidIdentityPskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkWirelessSsidIdentityPskCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkWirelessSsidIdentityPsk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkWirelessRfProfile deletes a r f profile

  Delete a RF Profile
*/
func (a *Client) DeleteNetworkWirelessRfProfile(params *DeleteNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkWirelessRfProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkWirelessRfProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkWirelessRfProfile",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkWirelessRfProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkWirelessRfProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkWirelessRfProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkWirelessSsidIdentityPsk deletes an identity p s k

  Delete an Identity PSK
*/
func (a *Client) DeleteNetworkWirelessSsidIdentityPsk(params *DeleteNetworkWirelessSsidIdentityPskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkWirelessSsidIdentityPskNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkWirelessSsidIdentityPskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkWirelessSsidIdentityPsk",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkWirelessSsidIdentityPskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkWirelessSsidIdentityPskNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkWirelessSsidIdentityPsk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceWirelessBluetoothSettings returns the bluetooth settings for a wireless device

  Return the bluetooth settings for a wireless device
*/
func (a *Client) GetDeviceWirelessBluetoothSettings(params *GetDeviceWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceWirelessBluetoothSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceWirelessBluetoothSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceWirelessBluetoothSettings",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/wireless/bluetooth/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceWirelessBluetoothSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceWirelessBluetoothSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceWirelessBluetoothSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceWirelessConnectionStats aggregateds connectivity info for a given a p on this network

  Aggregated connectivity info for a given AP on this network
*/
func (a *Client) GetDeviceWirelessConnectionStats(params *GetDeviceWirelessConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceWirelessConnectionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceWirelessConnectionStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceWirelessConnectionStats",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/wireless/connectionStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceWirelessConnectionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceWirelessConnectionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceWirelessConnectionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceWirelessLatencyStats aggregateds latency info for a given a p on this network

  Aggregated latency info for a given AP on this network
*/
func (a *Client) GetDeviceWirelessLatencyStats(params *GetDeviceWirelessLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceWirelessLatencyStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceWirelessLatencyStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceWirelessLatencyStats",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/wireless/latencyStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceWirelessLatencyStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceWirelessLatencyStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceWirelessLatencyStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceWirelessRadioSettings returns the radio settings of a device

  Return the radio settings of a device
*/
func (a *Client) GetDeviceWirelessRadioSettings(params *GetDeviceWirelessRadioSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceWirelessRadioSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceWirelessRadioSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceWirelessRadioSettings",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/wireless/radio/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceWirelessRadioSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceWirelessRadioSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceWirelessRadioSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceWirelessStatus returns the s s ID statuses of an access point

  Return the SSID statuses of an access point
*/
func (a *Client) GetDeviceWirelessStatus(params *GetDeviceWirelessStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceWirelessStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceWirelessStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceWirelessStatus",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/wireless/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceWirelessStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceWirelessStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceWirelessStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessAirMarshal lists air marshal scan results from a network

  List Air Marshal scan results from a network
*/
func (a *Client) GetNetworkWirelessAirMarshal(params *GetNetworkWirelessAirMarshalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessAirMarshalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessAirMarshalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessAirMarshal",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/airMarshal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessAirMarshalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessAirMarshalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessAirMarshal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessAlternateManagementInterface returns alternate management interface and devices with IP assigned

  Return alternate management interface and devices with IP assigned
*/
func (a *Client) GetNetworkWirelessAlternateManagementInterface(params *GetNetworkWirelessAlternateManagementInterfaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessAlternateManagementInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessAlternateManagementInterfaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessAlternateManagementInterface",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/alternateManagementInterface",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessAlternateManagementInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessAlternateManagementInterfaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessAlternateManagementInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessBilling returns the billing settings of this network

  Return the billing settings of this network
*/
func (a *Client) GetNetworkWirelessBilling(params *GetNetworkWirelessBillingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessBillingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessBillingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessBilling",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/billing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessBillingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessBillingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessBilling: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessBluetoothSettings returns the bluetooth settings for a network a href https documentation meraki com m r bluetooth bluetooth low energy b l e bluetooth settings a must be enabled on the network

  Return the Bluetooth settings for a network. <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a> must be enabled on the network.
*/
func (a *Client) GetNetworkWirelessBluetoothSettings(params *GetNetworkWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessBluetoothSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessBluetoothSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessBluetoothSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/bluetooth/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessBluetoothSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessBluetoothSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessBluetoothSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessChannelUtilizationHistory returns a p channel utilization over time for a device or network client

  Return AP channel utilization over time for a device or network client
*/
func (a *Client) GetNetworkWirelessChannelUtilizationHistory(params *GetNetworkWirelessChannelUtilizationHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessChannelUtilizationHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessChannelUtilizationHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessChannelUtilizationHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/channelUtilizationHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessChannelUtilizationHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessChannelUtilizationHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessChannelUtilizationHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessClientConnectionStats aggregateds connectivity info for a given client on this network

  Aggregated connectivity info for a given client on this network. Clients are identified by their MAC.
*/
func (a *Client) GetNetworkWirelessClientConnectionStats(params *GetNetworkWirelessClientConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientConnectionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessClientConnectionStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessClientConnectionStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/clients/{clientId}/connectionStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessClientConnectionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessClientConnectionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessClientConnectionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessClientConnectivityEvents lists the wireless connectivity events for a client within a network in the timespan

  List the wireless connectivity events for a client within a network in the timespan.
*/
func (a *Client) GetNetworkWirelessClientConnectivityEvents(params *GetNetworkWirelessClientConnectivityEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientConnectivityEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessClientConnectivityEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessClientConnectivityEvents",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/clients/{clientId}/connectivityEvents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessClientConnectivityEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessClientConnectivityEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessClientConnectivityEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessClientCountHistory returns wireless client counts over time for a network device or network client

  Return wireless client counts over time for a network, device, or network client
*/
func (a *Client) GetNetworkWirelessClientCountHistory(params *GetNetworkWirelessClientCountHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientCountHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessClientCountHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessClientCountHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/clientCountHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessClientCountHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessClientCountHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessClientCountHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessClientLatencyHistory returns the latency history for a client

  Return the latency history for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP. The latency data is from a sample of 2% of packets and is grouped into 4 traffic categories: background, best effort, video, voice. Within these categories the sampled packet counters are bucketed by latency in milliseconds.
*/
func (a *Client) GetNetworkWirelessClientLatencyHistory(params *GetNetworkWirelessClientLatencyHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientLatencyHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessClientLatencyHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessClientLatencyHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/clients/{clientId}/latencyHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessClientLatencyHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessClientLatencyHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessClientLatencyHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessClientLatencyStats aggregateds latency info for a given client on this network

  Aggregated latency info for a given client on this network. Clients are identified by their MAC.
*/
func (a *Client) GetNetworkWirelessClientLatencyStats(params *GetNetworkWirelessClientLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientLatencyStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessClientLatencyStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessClientLatencyStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/clients/{clientId}/latencyStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessClientLatencyStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessClientLatencyStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessClientLatencyStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessClientsConnectionStats aggregateds connectivity info for this network grouped by clients

  Aggregated connectivity info for this network, grouped by clients
*/
func (a *Client) GetNetworkWirelessClientsConnectionStats(params *GetNetworkWirelessClientsConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientsConnectionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessClientsConnectionStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessClientsConnectionStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/clients/connectionStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessClientsConnectionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessClientsConnectionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessClientsConnectionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessClientsLatencyStats aggregateds latency info for this network grouped by clients

  Aggregated latency info for this network, grouped by clients
*/
func (a *Client) GetNetworkWirelessClientsLatencyStats(params *GetNetworkWirelessClientsLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessClientsLatencyStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessClientsLatencyStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessClientsLatencyStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/clients/latencyStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessClientsLatencyStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessClientsLatencyStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessClientsLatencyStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessConnectionStats aggregateds connectivity info for this network

  Aggregated connectivity info for this network
*/
func (a *Client) GetNetworkWirelessConnectionStats(params *GetNetworkWirelessConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessConnectionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessConnectionStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessConnectionStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/connectionStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessConnectionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessConnectionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessConnectionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessDataRateHistory returns p h y data rates over time for a network device or network client

  Return PHY data rates over time for a network, device, or network client
*/
func (a *Client) GetNetworkWirelessDataRateHistory(params *GetNetworkWirelessDataRateHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessDataRateHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessDataRateHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessDataRateHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/dataRateHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessDataRateHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessDataRateHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessDataRateHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessDevicesConnectionStats aggregateds connectivity info for this network grouped by node

  Aggregated connectivity info for this network, grouped by node
*/
func (a *Client) GetNetworkWirelessDevicesConnectionStats(params *GetNetworkWirelessDevicesConnectionStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessDevicesConnectionStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessDevicesConnectionStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessDevicesConnectionStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/devices/connectionStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessDevicesConnectionStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessDevicesConnectionStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessDevicesConnectionStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessDevicesLatencyStats aggregateds latency info for this network grouped by node

  Aggregated latency info for this network, grouped by node
*/
func (a *Client) GetNetworkWirelessDevicesLatencyStats(params *GetNetworkWirelessDevicesLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessDevicesLatencyStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessDevicesLatencyStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessDevicesLatencyStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/devices/latencyStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessDevicesLatencyStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessDevicesLatencyStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessDevicesLatencyStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessFailedConnections lists of all failed client connection events on this network in a given time range

  List of all failed client connection events on this network in a given time range
*/
func (a *Client) GetNetworkWirelessFailedConnections(params *GetNetworkWirelessFailedConnectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessFailedConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessFailedConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessFailedConnections",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/failedConnections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessFailedConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessFailedConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessFailedConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessLatencyHistory returns average wireless latency over time for a network device or network client

  Return average wireless latency over time for a network, device, or network client
*/
func (a *Client) GetNetworkWirelessLatencyHistory(params *GetNetworkWirelessLatencyHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessLatencyHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessLatencyHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessLatencyHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/latencyHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessLatencyHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessLatencyHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessLatencyHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessLatencyStats aggregateds latency info for this network

  Aggregated latency info for this network
*/
func (a *Client) GetNetworkWirelessLatencyStats(params *GetNetworkWirelessLatencyStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessLatencyStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessLatencyStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessLatencyStats",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/latencyStats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessLatencyStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessLatencyStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessLatencyStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessMeshStatuses lists wireless mesh statuses for repeaters

  List wireless mesh statuses for repeaters
*/
func (a *Client) GetNetworkWirelessMeshStatuses(params *GetNetworkWirelessMeshStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessMeshStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessMeshStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessMeshStatuses",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/meshStatuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessMeshStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessMeshStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessMeshStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessRfProfile returns a r f profile

  Return a RF profile
*/
func (a *Client) GetNetworkWirelessRfProfile(params *GetNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessRfProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessRfProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessRfProfile",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessRfProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessRfProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessRfProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessRfProfiles lists the non basic r f profiles for this network

  List the non-basic RF profiles for this network
*/
func (a *Client) GetNetworkWirelessRfProfiles(params *GetNetworkWirelessRfProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessRfProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessRfProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessRfProfiles",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/rfProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessRfProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessRfProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessRfProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSettings returns the wireless settings for a network

  Return the wireless settings for a network
*/
func (a *Client) GetNetworkWirelessSettings(params *GetNetworkWirelessSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSignalQualityHistory returns signal quality s n r r s s i over time for a device or network client

  Return signal quality (SNR/RSSI) over time for a device or network client
*/
func (a *Client) GetNetworkWirelessSignalQualityHistory(params *GetNetworkWirelessSignalQualityHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSignalQualityHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSignalQualityHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSignalQualityHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/signalQualityHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSignalQualityHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSignalQualityHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSignalQualityHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsid returns a single m r s s ID

  Return a single MR SSID
*/
func (a *Client) GetNetworkWirelessSsid(params *GetNetworkWirelessSsidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsid",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidBonjourForwarding lists the bonjour forwarding setting and rules for the s s ID

  List the Bonjour forwarding setting and rules for the SSID
*/
func (a *Client) GetNetworkWirelessSsidBonjourForwarding(params *GetNetworkWirelessSsidBonjourForwardingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidBonjourForwardingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidBonjourForwardingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidBonjourForwarding",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidBonjourForwardingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidBonjourForwardingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidBonjourForwarding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidDeviceTypeGroupPolicies lists the device type group policies for the s s ID

  List the device type group policies for the SSID
*/
func (a *Client) GetNetworkWirelessSsidDeviceTypeGroupPolicies(params *GetNetworkWirelessSsidDeviceTypeGroupPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidDeviceTypeGroupPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidDeviceTypeGroupPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidDeviceTypeGroupPolicies",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidDeviceTypeGroupPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidDeviceTypeGroupPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidDeviceTypeGroupPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidEapOverride returns the e a p overridden parameters for an s s ID

  Return the EAP overridden parameters for an SSID
*/
func (a *Client) GetNetworkWirelessSsidEapOverride(params *GetNetworkWirelessSsidEapOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidEapOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidEapOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidEapOverride",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/eapOverride",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidEapOverrideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidEapOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidEapOverride: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidFirewallL3FirewallRules returns the l3 firewall rules for an s s ID on an m r network

  Return the L3 firewall rules for an SSID on an MR network
*/
func (a *Client) GetNetworkWirelessSsidFirewallL3FirewallRules(params *GetNetworkWirelessSsidFirewallL3FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidFirewallL3FirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidFirewallL3FirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidFirewallL3FirewallRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidFirewallL3FirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidFirewallL3FirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidFirewallL3FirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidFirewallL7FirewallRules returns the l7 firewall rules for an s s ID on an m r network

  Return the L7 firewall rules for an SSID on an MR network
*/
func (a *Client) GetNetworkWirelessSsidFirewallL7FirewallRules(params *GetNetworkWirelessSsidFirewallL7FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidFirewallL7FirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidFirewallL7FirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidFirewallL7FirewallRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidFirewallL7FirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidFirewallL7FirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidFirewallL7FirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidHotspot20 returns the hotspot 2 0 settings for an s s ID

  Return the Hotspot 2.0 settings for an SSID
*/
func (a *Client) GetNetworkWirelessSsidHotspot20(params *GetNetworkWirelessSsidHotspot20Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidHotspot20OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidHotspot20Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidHotspot20",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/hotspot20",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidHotspot20Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidHotspot20OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidHotspot20: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidIdentityPsk returns an identity p s k

  Return an Identity PSK
*/
func (a *Client) GetNetworkWirelessSsidIdentityPsk(params *GetNetworkWirelessSsidIdentityPskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidIdentityPskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidIdentityPskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidIdentityPsk",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidIdentityPskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidIdentityPskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidIdentityPsk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidIdentityPsks lists all identity p s ks in a wireless network

  List all Identity PSKs in a wireless network
*/
func (a *Client) GetNetworkWirelessSsidIdentityPsks(params *GetNetworkWirelessSsidIdentityPsksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidIdentityPsksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidIdentityPsksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidIdentityPsks",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/identityPsks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidIdentityPsksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidIdentityPsksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidIdentityPsks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidSchedules lists the outage schedule for the s s ID

  List the outage schedule for the SSID
*/
func (a *Client) GetNetworkWirelessSsidSchedules(params *GetNetworkWirelessSsidSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidSchedules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidSplashSettings displays the splash page settings for the given s s ID

  Display the splash page settings for the given SSID
*/
func (a *Client) GetNetworkWirelessSsidSplashSettings(params *GetNetworkWirelessSsidSplashSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidSplashSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidSplashSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidSplashSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/splash/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidSplashSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidSplashSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidSplashSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidTrafficShapingRules displays the traffic shaping settings for a s s ID on an m r network

  Display the traffic shaping settings for a SSID on an MR network
*/
func (a *Client) GetNetworkWirelessSsidTrafficShapingRules(params *GetNetworkWirelessSsidTrafficShapingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidTrafficShapingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidTrafficShapingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidTrafficShapingRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidTrafficShapingRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidTrafficShapingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidTrafficShapingRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsidVpn lists the v p n settings for the s s ID

  List the VPN settings for the SSID.
*/
func (a *Client) GetNetworkWirelessSsidVpn(params *GetNetworkWirelessSsidVpnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidVpnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsidVpn",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/vpn",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidVpnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsidVpn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessSsids lists the m r s s i ds in a network

  List the MR SSIDs in a network
*/
func (a *Client) GetNetworkWirelessSsids(params *GetNetworkWirelessSsidsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessSsidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessSsidsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessSsids",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/ssids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessSsidsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessSsidsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessSsids: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWirelessUsageHistory returns a p usage over time for a device or network client

  Return AP usage over time for a device or network client
*/
func (a *Client) GetNetworkWirelessUsageHistory(params *GetNetworkWirelessUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWirelessUsageHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWirelessUsageHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWirelessUsageHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/wireless/usageHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWirelessUsageHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWirelessUsageHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWirelessUsageHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceWirelessBluetoothSettings updates the bluetooth settings for a wireless device

  Update the bluetooth settings for a wireless device
*/
func (a *Client) UpdateDeviceWirelessBluetoothSettings(params *UpdateDeviceWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceWirelessBluetoothSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceWirelessBluetoothSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDeviceWirelessBluetoothSettings",
		Method:             "PUT",
		PathPattern:        "/devices/{serial}/wireless/bluetooth/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceWirelessBluetoothSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceWirelessBluetoothSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceWirelessBluetoothSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceWirelessRadioSettings updates the radio settings of a device

  Update the radio settings of a device
*/
func (a *Client) UpdateDeviceWirelessRadioSettings(params *UpdateDeviceWirelessRadioSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceWirelessRadioSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceWirelessRadioSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDeviceWirelessRadioSettings",
		Method:             "PUT",
		PathPattern:        "/devices/{serial}/wireless/radio/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceWirelessRadioSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceWirelessRadioSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceWirelessRadioSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessAlternateManagementInterface updates alternate management interface and device static IP

  Update alternate management interface and device static IP
*/
func (a *Client) UpdateNetworkWirelessAlternateManagementInterface(params *UpdateNetworkWirelessAlternateManagementInterfaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessAlternateManagementInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessAlternateManagementInterfaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessAlternateManagementInterface",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/alternateManagementInterface",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessAlternateManagementInterfaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessAlternateManagementInterfaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessAlternateManagementInterface: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessBilling updates the billing settings

  Update the billing settings
*/
func (a *Client) UpdateNetworkWirelessBilling(params *UpdateNetworkWirelessBillingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessBillingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessBillingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessBilling",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/billing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessBillingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessBillingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessBilling: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessBluetoothSettings updates the bluetooth settings for a network

  Update the Bluetooth settings for a network. See the docs page for <a href="https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)">Bluetooth settings</a>.
*/
func (a *Client) UpdateNetworkWirelessBluetoothSettings(params *UpdateNetworkWirelessBluetoothSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessBluetoothSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessBluetoothSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessBluetoothSettings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/bluetooth/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessBluetoothSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessBluetoothSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessBluetoothSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessRfProfile updates specified r f profile for this network

  Updates specified RF profile for this network
*/
func (a *Client) UpdateNetworkWirelessRfProfile(params *UpdateNetworkWirelessRfProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessRfProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessRfProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessRfProfile",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/rfProfiles/{rfProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessRfProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessRfProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessRfProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSettings updates the wireless settings for a network

  Update the wireless settings for a network
*/
func (a *Client) UpdateNetworkWirelessSettings(params *UpdateNetworkWirelessSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSettings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsid updates the attributes of an m r s s ID

  Update the attributes of an MR SSID
*/
func (a *Client) UpdateNetworkWirelessSsid(params *UpdateNetworkWirelessSsidParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsid",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsid: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsidBonjourForwarding updates the bonjour forwarding setting and rules for the s s ID

  Update the bonjour forwarding setting and rules for the SSID
*/
func (a *Client) UpdateNetworkWirelessSsidBonjourForwarding(params *UpdateNetworkWirelessSsidBonjourForwardingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidBonjourForwardingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidBonjourForwardingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsidBonjourForwarding",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/bonjourForwarding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidBonjourForwardingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidBonjourForwardingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsidBonjourForwarding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsidDeviceTypeGroupPolicies updates the device type group policies for the s s ID

  Update the device type group policies for the SSID
*/
func (a *Client) UpdateNetworkWirelessSsidDeviceTypeGroupPolicies(params *UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidDeviceTypeGroupPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsidDeviceTypeGroupPolicies",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/deviceTypeGroupPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidDeviceTypeGroupPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsidDeviceTypeGroupPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsidEapOverride updates the e a p overridden parameters for an s s ID

  Update the EAP overridden parameters for an SSID.
*/
func (a *Client) UpdateNetworkWirelessSsidEapOverride(params *UpdateNetworkWirelessSsidEapOverrideParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidEapOverrideOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidEapOverrideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsidEapOverride",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/eapOverride",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidEapOverrideReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidEapOverrideOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsidEapOverride: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsidFirewallL3FirewallRules updates the l3 firewall rules of an s s ID on an m r network

  Update the L3 firewall rules of an SSID on an MR network
*/
func (a *Client) UpdateNetworkWirelessSsidFirewallL3FirewallRules(params *UpdateNetworkWirelessSsidFirewallL3FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidFirewallL3FirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidFirewallL3FirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsidFirewallL3FirewallRules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidFirewallL3FirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidFirewallL3FirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsidFirewallL3FirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsidFirewallL7FirewallRules updates the l7 firewall rules of an s s ID on an m r network

  Update the L7 firewall rules of an SSID on an MR network
*/
func (a *Client) UpdateNetworkWirelessSsidFirewallL7FirewallRules(params *UpdateNetworkWirelessSsidFirewallL7FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidFirewallL7FirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidFirewallL7FirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsidFirewallL7FirewallRules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidFirewallL7FirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidFirewallL7FirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsidFirewallL7FirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsidHotspot20 updates the hotspot 2 0 settings of an s s ID

  Update the Hotspot 2.0 settings of an SSID
*/
func (a *Client) UpdateNetworkWirelessSsidHotspot20(params *UpdateNetworkWirelessSsidHotspot20Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidHotspot20OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidHotspot20Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsidHotspot20",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/hotspot20",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidHotspot20Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidHotspot20OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsidHotspot20: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsidIdentityPsk updates an identity p s k

  Update an Identity PSK
*/
func (a *Client) UpdateNetworkWirelessSsidIdentityPsk(params *UpdateNetworkWirelessSsidIdentityPskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidIdentityPskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidIdentityPskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsidIdentityPsk",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/identityPsks/{identityPskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidIdentityPskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidIdentityPskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsidIdentityPsk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsidSchedules updates the outage schedule for the s s ID

  Update the outage schedule for the SSID
*/
func (a *Client) UpdateNetworkWirelessSsidSchedules(params *UpdateNetworkWirelessSsidSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsidSchedules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsidSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsidSplashSettings modifies the splash page settings for the given s s ID

  Modify the splash page settings for the given SSID
*/
func (a *Client) UpdateNetworkWirelessSsidSplashSettings(params *UpdateNetworkWirelessSsidSplashSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidSplashSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidSplashSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsidSplashSettings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/splash/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidSplashSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidSplashSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsidSplashSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsidTrafficShapingRules updates the traffic shaping settings for an s s ID on an m r network

  Update the traffic shaping settings for an SSID on an MR network
*/
func (a *Client) UpdateNetworkWirelessSsidTrafficShapingRules(params *UpdateNetworkWirelessSsidTrafficShapingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidTrafficShapingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidTrafficShapingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsidTrafficShapingRules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/trafficShaping/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidTrafficShapingRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidTrafficShapingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsidTrafficShapingRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWirelessSsidVpn updates the v p n settings for the s s ID

  Update the VPN settings for the SSID
*/
func (a *Client) UpdateNetworkWirelessSsidVpn(params *UpdateNetworkWirelessSsidVpnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWirelessSsidVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWirelessSsidVpnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWirelessSsidVpn",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/wireless/ssids/{number}/vpn",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWirelessSsidVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWirelessSsidVpnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWirelessSsidVpn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
