// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkWirelessSsidSplashSettingsReader is a Reader for the UpdateNetworkWirelessSsidSplashSettings structure.
type UpdateNetworkWirelessSsidSplashSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkWirelessSsidSplashSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkWirelessSsidSplashSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkWirelessSsidSplashSettingsOK creates a UpdateNetworkWirelessSsidSplashSettingsOK with default headers values
func NewUpdateNetworkWirelessSsidSplashSettingsOK() *UpdateNetworkWirelessSsidSplashSettingsOK {
	return &UpdateNetworkWirelessSsidSplashSettingsOK{}
}

/* UpdateNetworkWirelessSsidSplashSettingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkWirelessSsidSplashSettingsOK struct {
	Payload interface{}
}

func (o *UpdateNetworkWirelessSsidSplashSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/wireless/ssids/{number}/splash/settings][%d] updateNetworkWirelessSsidSplashSettingsOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkWirelessSsidSplashSettingsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkWirelessSsidSplashSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkWirelessSsidSplashSettingsBody update network wireless ssid splash settings body
// Example: {"redirectUrl":"https://example.com","splashImage":{"md5":"542cccac8d7dedee0f185311d154d194"},"splashLogo":{"extension":"jpg","md5":"abcd1234"},"splashPage":"Click-through splash page","splashPrepaidFront":{"md5":"542cccac8d7dedee0f185311d154d194"},"splashUrl":"https://www.custom_splash_url.com","useRedirectUrl":true,"useSplashUrl":true,"welcomeMessage":"Welcome!"}
swagger:model UpdateNetworkWirelessSsidSplashSettingsBody
*/
type UpdateNetworkWirelessSsidSplashSettingsBody struct {

	// Whether or not to allow simultaneous logins from different devices.
	AllowSimultaneousLogins bool `json:"allowSimultaneousLogins,omitempty"`

	// billing
	Billing *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBilling `json:"billing,omitempty"`

	// How restricted allowing traffic should be. If true, all traffic types are blocked until the splash page is acknowledged. If false, all non-HTTP traffic is allowed before the splash page is acknowledged.
	BlockAllTrafficBeforeSignOn bool `json:"blockAllTrafficBeforeSignOn,omitempty"`

	// How login attempts should be handled when the controller is unreachable. Can be either 'open', 'restricted', or 'default'.
	// Enum: [open restricted default]
	ControllerDisconnectionBehavior string `json:"controllerDisconnectionBehavior,omitempty"`

	// guest sponsorship
	GuestSponsorship *UpdateNetworkWirelessSsidSplashSettingsParamsBodyGuestSponsorship `json:"guestSponsorship,omitempty"`

	// The custom redirect URL where the users will go after the splash page.
	RedirectURL string `json:"redirectUrl,omitempty"`

	// sentry enrollment
	SentryEnrollment *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment `json:"sentryEnrollment,omitempty"`

	// splash image
	SplashImage *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashImage `json:"splashImage,omitempty"`

	// splash logo
	SplashLogo *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashLogo `json:"splashLogo,omitempty"`

	// splash prepaid front
	SplashPrepaidFront *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashPrepaidFront `json:"splashPrepaidFront,omitempty"`

	// Splash timeout in minutes. This will determine how often users will see the splash page.
	SplashTimeout int64 `json:"splashTimeout,omitempty"`

	// [optional] The custom splash URL of the click-through splash page. Note that the URL can be configured without necessarily being used. In order to enable the custom URL, see 'useSplashUrl'
	SplashURL string `json:"splashUrl,omitempty"`

	// The Boolean indicating whether the the user will be redirected to the custom redirect URL after the splash page. A custom redirect URL must be set if this is true.
	UseRedirectURL bool `json:"useRedirectUrl,omitempty"`

	// [optional] Boolean indicating whether the users will be redirected to the custom splash url. A custom splash URL must be set if this is true. Note that depending on your SSID's access control settings, it may not be possible to use the custom splash URL.
	UseSplashURL bool `json:"useSplashUrl,omitempty"`

	// The welcome message for the users on the splash page.
	WelcomeMessage string `json:"welcomeMessage,omitempty"`
}

// Validate validates this update network wireless ssid splash settings body
func (o *UpdateNetworkWirelessSsidSplashSettingsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBilling(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateControllerDisconnectionBehavior(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGuestSponsorship(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSentryEnrollment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSplashImage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSplashLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSplashPrepaidFront(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) validateBilling(formats strfmt.Registry) error {
	if swag.IsZero(o.Billing) { // not required
		return nil
	}

	if o.Billing != nil {
		if err := o.Billing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "billing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "billing")
			}
			return err
		}
	}

	return nil
}

var updateNetworkWirelessSsidSplashSettingsBodyTypeControllerDisconnectionBehaviorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["open","restricted","default"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessSsidSplashSettingsBodyTypeControllerDisconnectionBehaviorPropEnum = append(updateNetworkWirelessSsidSplashSettingsBodyTypeControllerDisconnectionBehaviorPropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessSsidSplashSettingsBodyControllerDisconnectionBehaviorOpen captures enum value "open"
	UpdateNetworkWirelessSsidSplashSettingsBodyControllerDisconnectionBehaviorOpen string = "open"

	// UpdateNetworkWirelessSsidSplashSettingsBodyControllerDisconnectionBehaviorRestricted captures enum value "restricted"
	UpdateNetworkWirelessSsidSplashSettingsBodyControllerDisconnectionBehaviorRestricted string = "restricted"

	// UpdateNetworkWirelessSsidSplashSettingsBodyControllerDisconnectionBehaviorDefault captures enum value "default"
	UpdateNetworkWirelessSsidSplashSettingsBodyControllerDisconnectionBehaviorDefault string = "default"
)

// prop value enum
func (o *UpdateNetworkWirelessSsidSplashSettingsBody) validateControllerDisconnectionBehaviorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessSsidSplashSettingsBodyTypeControllerDisconnectionBehaviorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) validateControllerDisconnectionBehavior(formats strfmt.Registry) error {
	if swag.IsZero(o.ControllerDisconnectionBehavior) { // not required
		return nil
	}

	// value enum
	if err := o.validateControllerDisconnectionBehaviorEnum("updateNetworkWirelessSsidSplashSettings"+"."+"controllerDisconnectionBehavior", "body", o.ControllerDisconnectionBehavior); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) validateGuestSponsorship(formats strfmt.Registry) error {
	if swag.IsZero(o.GuestSponsorship) { // not required
		return nil
	}

	if o.GuestSponsorship != nil {
		if err := o.GuestSponsorship.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "guestSponsorship")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "guestSponsorship")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) validateSentryEnrollment(formats strfmt.Registry) error {
	if swag.IsZero(o.SentryEnrollment) { // not required
		return nil
	}

	if o.SentryEnrollment != nil {
		if err := o.SentryEnrollment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "sentryEnrollment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "sentryEnrollment")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) validateSplashImage(formats strfmt.Registry) error {
	if swag.IsZero(o.SplashImage) { // not required
		return nil
	}

	if o.SplashImage != nil {
		if err := o.SplashImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashImage")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) validateSplashLogo(formats strfmt.Registry) error {
	if swag.IsZero(o.SplashLogo) { // not required
		return nil
	}

	if o.SplashLogo != nil {
		if err := o.SplashLogo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashLogo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashLogo")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) validateSplashPrepaidFront(formats strfmt.Registry) error {
	if swag.IsZero(o.SplashPrepaidFront) { // not required
		return nil
	}

	if o.SplashPrepaidFront != nil {
		if err := o.SplashPrepaidFront.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashPrepaidFront")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashPrepaidFront")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network wireless ssid splash settings body based on the context it is used
func (o *UpdateNetworkWirelessSsidSplashSettingsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBilling(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateGuestSponsorship(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSentryEnrollment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSplashImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSplashLogo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSplashPrepaidFront(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) contextValidateBilling(ctx context.Context, formats strfmt.Registry) error {

	if o.Billing != nil {
		if err := o.Billing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "billing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "billing")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) contextValidateGuestSponsorship(ctx context.Context, formats strfmt.Registry) error {

	if o.GuestSponsorship != nil {
		if err := o.GuestSponsorship.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "guestSponsorship")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "guestSponsorship")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) contextValidateSentryEnrollment(ctx context.Context, formats strfmt.Registry) error {

	if o.SentryEnrollment != nil {
		if err := o.SentryEnrollment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "sentryEnrollment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "sentryEnrollment")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) contextValidateSplashImage(ctx context.Context, formats strfmt.Registry) error {

	if o.SplashImage != nil {
		if err := o.SplashImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashImage")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) contextValidateSplashLogo(ctx context.Context, formats strfmt.Registry) error {

	if o.SplashLogo != nil {
		if err := o.SplashLogo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashLogo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashLogo")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsBody) contextValidateSplashPrepaidFront(ctx context.Context, formats strfmt.Registry) error {

	if o.SplashPrepaidFront != nil {
		if err := o.SplashPrepaidFront.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashPrepaidFront")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "splashPrepaidFront")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSplashSettingsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidSplashSettingsParamsBodyBilling Details associated with billing splash.
swagger:model UpdateNetworkWirelessSsidSplashSettingsParamsBodyBilling
*/
type UpdateNetworkWirelessSsidSplashSettingsParamsBodyBilling struct {

	// free access
	FreeAccess *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBillingFreeAccess `json:"freeAccess,omitempty"`

	// Whether or not billing uses the fast login prepaid access option.
	PrepaidAccessFastLoginEnabled bool `json:"prepaidAccessFastLoginEnabled,omitempty"`

	// The email address that receives replies from clients.
	ReplyToEmailAddress string `json:"replyToEmailAddress,omitempty"`
}

// Validate validates this update network wireless ssid splash settings params body billing
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBilling) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFreeAccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBilling) validateFreeAccess(formats strfmt.Registry) error {
	if swag.IsZero(o.FreeAccess) { // not required
		return nil
	}

	if o.FreeAccess != nil {
		if err := o.FreeAccess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "billing" + "." + "freeAccess")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "billing" + "." + "freeAccess")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network wireless ssid splash settings params body billing based on the context it is used
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBilling) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFreeAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBilling) contextValidateFreeAccess(ctx context.Context, formats strfmt.Registry) error {

	if o.FreeAccess != nil {
		if err := o.FreeAccess.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "billing" + "." + "freeAccess")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "billing" + "." + "freeAccess")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBilling) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBilling) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSplashSettingsParamsBodyBilling
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidSplashSettingsParamsBodyBillingFreeAccess Details associated with a free access plan with limits.
swagger:model UpdateNetworkWirelessSsidSplashSettingsParamsBodyBillingFreeAccess
*/
type UpdateNetworkWirelessSsidSplashSettingsParamsBodyBillingFreeAccess struct {

	// How long a device can use a network for free.
	DurationInMinutes int64 `json:"durationInMinutes,omitempty"`

	// Whether or not free access is enabled.
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this update network wireless ssid splash settings params body billing free access
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBillingFreeAccess) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless ssid splash settings params body billing free access based on context it is used
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBillingFreeAccess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBillingFreeAccess) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyBillingFreeAccess) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSplashSettingsParamsBodyBillingFreeAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidSplashSettingsParamsBodyGuestSponsorship Details associated with guest sponsored splash.
swagger:model UpdateNetworkWirelessSsidSplashSettingsParamsBodyGuestSponsorship
*/
type UpdateNetworkWirelessSsidSplashSettingsParamsBodyGuestSponsorship struct {

	// Duration in minutes of sponsored guest authorization. Must be between 1 and 60480 (6 weeks)
	DurationInMinutes int64 `json:"durationInMinutes,omitempty"`

	// Whether or not guests can specify how much time they are requesting.
	GuestCanRequestTimeframe bool `json:"guestCanRequestTimeframe,omitempty"`
}

// Validate validates this update network wireless ssid splash settings params body guest sponsorship
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyGuestSponsorship) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless ssid splash settings params body guest sponsorship based on context it is used
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyGuestSponsorship) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyGuestSponsorship) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodyGuestSponsorship) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSplashSettingsParamsBodyGuestSponsorship
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment Systems Manager sentry enrollment splash settings.
swagger:model UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment
*/
type UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment struct {

	// The system types that the Sentry enforces. Must be included in: 'iOS, 'Android', 'macOS', and 'Windows'.
	EnforcedSystems []string `json:"enforcedSystems"`

	// The strength of the enforcement of selected system types. Must be one of: 'focused', 'click-through', and 'strict'.
	// Enum: [focused click-through strict]
	Strength string `json:"strength,omitempty"`

	// systems manager network
	SystemsManagerNetwork *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentSystemsManagerNetwork `json:"systemsManagerNetwork,omitempty"`
}

// Validate validates this update network wireless ssid splash settings params body sentry enrollment
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStrength(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSystemsManagerNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentTypeStrengthPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["focused","click-through","strict"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentTypeStrengthPropEnum = append(updateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentTypeStrengthPropEnum, v)
	}
}

const (

	// UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentStrengthFocused captures enum value "focused"
	UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentStrengthFocused string = "focused"

	// UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentStrengthClickDashThrough captures enum value "click-through"
	UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentStrengthClickDashThrough string = "click-through"

	// UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentStrengthStrict captures enum value "strict"
	UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentStrengthStrict string = "strict"
)

// prop value enum
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment) validateStrengthEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentTypeStrengthPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment) validateStrength(formats strfmt.Registry) error {
	if swag.IsZero(o.Strength) { // not required
		return nil
	}

	// value enum
	if err := o.validateStrengthEnum("updateNetworkWirelessSsidSplashSettings"+"."+"sentryEnrollment"+"."+"strength", "body", o.Strength); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment) validateSystemsManagerNetwork(formats strfmt.Registry) error {
	if swag.IsZero(o.SystemsManagerNetwork) { // not required
		return nil
	}

	if o.SystemsManagerNetwork != nil {
		if err := o.SystemsManagerNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "sentryEnrollment" + "." + "systemsManagerNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "sentryEnrollment" + "." + "systemsManagerNetwork")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network wireless ssid splash settings params body sentry enrollment based on the context it is used
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSystemsManagerNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment) contextValidateSystemsManagerNetwork(ctx context.Context, formats strfmt.Registry) error {

	if o.SystemsManagerNetwork != nil {
		if err := o.SystemsManagerNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "sentryEnrollment" + "." + "systemsManagerNetwork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkWirelessSsidSplashSettings" + "." + "sentryEnrollment" + "." + "systemsManagerNetwork")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentSystemsManagerNetwork Systems Manager network targeted for sentry enrollment.
swagger:model UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentSystemsManagerNetwork
*/
type UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentSystemsManagerNetwork struct {

	// The network ID of the Systems Manager network.
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this update network wireless ssid splash settings params body sentry enrollment systems manager network
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentSystemsManagerNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentSystemsManagerNetwork) validateID(formats strfmt.Registry) error {

	if err := validate.Required("updateNetworkWirelessSsidSplashSettings"+"."+"sentryEnrollment"+"."+"systemsManagerNetwork"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless ssid splash settings params body sentry enrollment systems manager network based on context it is used
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentSystemsManagerNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentSystemsManagerNetwork) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentSystemsManagerNetwork) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSplashSettingsParamsBodySentryEnrollmentSystemsManagerNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashImage The image used in the splash page.
swagger:model UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashImage
*/
type UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashImage struct {

	// The extension of the image file.
	Extension string `json:"extension,omitempty"`

	// The MD5 value of the image file. Setting this to null will remove the image from the splash page.
	Md5 string `json:"md5,omitempty"`
}

// Validate validates this update network wireless ssid splash settings params body splash image
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashImage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless ssid splash settings params body splash image based on context it is used
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashImage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashImage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashImage) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashLogo The logo used in the splash page.
swagger:model UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashLogo
*/
type UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashLogo struct {

	// The extension of the logo file.
	Extension string `json:"extension,omitempty"`

	// The MD5 value of the logo file. Setting this to null will remove the logo from the splash page.
	Md5 string `json:"md5,omitempty"`
}

// Validate validates this update network wireless ssid splash settings params body splash logo
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashLogo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless ssid splash settings params body splash logo based on context it is used
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashLogo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashLogo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashLogo) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashLogo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashPrepaidFront The prepaid front image used in the splash page.
swagger:model UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashPrepaidFront
*/
type UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashPrepaidFront struct {

	// The extension of the prepaid front image file.
	Extension string `json:"extension,omitempty"`

	// The MD5 value of the prepaid front image file. Setting this to null will remove the prepaid front from the splash page.
	Md5 string `json:"md5,omitempty"`
}

// Validate validates this update network wireless ssid splash settings params body splash prepaid front
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashPrepaidFront) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network wireless ssid splash settings params body splash prepaid front based on context it is used
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashPrepaidFront) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashPrepaidFront) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashPrepaidFront) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSplashSettingsParamsBodySplashPrepaidFront
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
