// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkWirelessSsidSchedulesReader is a Reader for the UpdateNetworkWirelessSsidSchedules structure.
type UpdateNetworkWirelessSsidSchedulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkWirelessSsidSchedulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkWirelessSsidSchedulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkWirelessSsidSchedulesOK creates a UpdateNetworkWirelessSsidSchedulesOK with default headers values
func NewUpdateNetworkWirelessSsidSchedulesOK() *UpdateNetworkWirelessSsidSchedulesOK {
	return &UpdateNetworkWirelessSsidSchedulesOK{}
}

/* UpdateNetworkWirelessSsidSchedulesOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkWirelessSsidSchedulesOK struct {
	Payload interface{}
}

func (o *UpdateNetworkWirelessSsidSchedulesOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/wireless/ssids/{number}/schedules][%d] updateNetworkWirelessSsidSchedulesOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkWirelessSsidSchedulesOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkWirelessSsidSchedulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkWirelessSsidSchedulesBody update network wireless ssid schedules body
// Example: {"enabled":true,"ranges":[{"endDay":"Tuesday","endTime":"05:00","startDay":"Tuesday","startTime":"01:00"},{"endDay":"monday","endTime":"05:00","startDay":"Fri","startTime":"19:00"}]}
swagger:model UpdateNetworkWirelessSsidSchedulesBody
*/
type UpdateNetworkWirelessSsidSchedulesBody struct {

	// If true, the SSID outage schedule is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// List of outage ranges. Has a start date and time, and end date and time. If this parameter is passed in along with rangesInSeconds parameter, this will take precedence.
	Ranges []*UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0 `json:"ranges"`

	// List of outage ranges in seconds since Sunday at Midnight. Has a start and end. If this parameter is passed in along with the ranges parameter, ranges will take precedence.
	RangesInSeconds []*UpdateNetworkWirelessSsidSchedulesParamsBodyRangesInSecondsItems0 `json:"rangesInSeconds"`
}

// Validate validates this update network wireless ssid schedules body
func (o *UpdateNetworkWirelessSsidSchedulesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRanges(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRangesInSeconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSchedulesBody) validateRanges(formats strfmt.Registry) error {
	if swag.IsZero(o.Ranges) { // not required
		return nil
	}

	for i := 0; i < len(o.Ranges); i++ {
		if swag.IsZero(o.Ranges[i]) { // not required
			continue
		}

		if o.Ranges[i] != nil {
			if err := o.Ranges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessSsidSchedules" + "." + "ranges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessSsidSchedules" + "." + "ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSchedulesBody) validateRangesInSeconds(formats strfmt.Registry) error {
	if swag.IsZero(o.RangesInSeconds) { // not required
		return nil
	}

	for i := 0; i < len(o.RangesInSeconds); i++ {
		if swag.IsZero(o.RangesInSeconds[i]) { // not required
			continue
		}

		if o.RangesInSeconds[i] != nil {
			if err := o.RangesInSeconds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessSsidSchedules" + "." + "rangesInSeconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessSsidSchedules" + "." + "rangesInSeconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network wireless ssid schedules body based on the context it is used
func (o *UpdateNetworkWirelessSsidSchedulesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRangesInSeconds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSchedulesBody) contextValidateRanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Ranges); i++ {

		if o.Ranges[i] != nil {
			if err := o.Ranges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessSsidSchedules" + "." + "ranges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessSsidSchedules" + "." + "ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSchedulesBody) contextValidateRangesInSeconds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.RangesInSeconds); i++ {

		if o.RangesInSeconds[i] != nil {
			if err := o.RangesInSeconds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessSsidSchedules" + "." + "rangesInSeconds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessSsidSchedules" + "." + "rangesInSeconds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSchedulesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSchedulesBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSchedulesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidSchedulesParamsBodyRangesInSecondsItems0 update network wireless ssid schedules params body ranges in seconds items0
swagger:model UpdateNetworkWirelessSsidSchedulesParamsBodyRangesInSecondsItems0
*/
type UpdateNetworkWirelessSsidSchedulesParamsBodyRangesInSecondsItems0 struct {

	// Seconds since Sunday at midnight when that outage range ends.
	// Required: true
	End *int64 `json:"end"`

	// Seconds since Sunday at midnight when the outage range starts.
	// Required: true
	Start *int64 `json:"start"`
}

// Validate validates this update network wireless ssid schedules params body ranges in seconds items0
func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesInSecondsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesInSecondsItems0) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", o.End); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesInSecondsItems0) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", o.Start); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless ssid schedules params body ranges in seconds items0 based on context it is used
func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesInSecondsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesInSecondsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesInSecondsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSchedulesParamsBodyRangesInSecondsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0 update network wireless ssid schedules params body ranges items0
swagger:model UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0
*/
type UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0 struct {

	// Day of when the outage ends. Can be either full day name, or three letter abbreviation
	// Required: true
	EndDay *string `json:"endDay"`

	// 24 hour time when the outage ends.
	// Required: true
	EndTime *string `json:"endTime"`

	// Day of when the outage starts. Can be either full day name, or three letter abbreviation.
	// Required: true
	StartDay *string `json:"startDay"`

	// 24 hour time when the outage starts.
	// Required: true
	StartTime *string `json:"startTime"`
}

// Validate validates this update network wireless ssid schedules params body ranges items0
func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEndDay(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartDay(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0) validateEndDay(formats strfmt.Registry) error {

	if err := validate.Required("endDay", "body", o.EndDay); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", o.EndTime); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0) validateStartDay(formats strfmt.Registry) error {

	if err := validate.Required("startDay", "body", o.StartDay); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", o.StartTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless ssid schedules params body ranges items0 based on context it is used
func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessSsidSchedulesParamsBodyRangesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
