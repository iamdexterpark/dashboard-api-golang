// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkWirelessRfProfilesParams creates a new GetNetworkWirelessRfProfilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNetworkWirelessRfProfilesParams() *GetNetworkWirelessRfProfilesParams {
	return &GetNetworkWirelessRfProfilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkWirelessRfProfilesParamsWithTimeout creates a new GetNetworkWirelessRfProfilesParams object
// with the ability to set a timeout on a request.
func NewGetNetworkWirelessRfProfilesParamsWithTimeout(timeout time.Duration) *GetNetworkWirelessRfProfilesParams {
	return &GetNetworkWirelessRfProfilesParams{
		timeout: timeout,
	}
}

// NewGetNetworkWirelessRfProfilesParamsWithContext creates a new GetNetworkWirelessRfProfilesParams object
// with the ability to set a context for a request.
func NewGetNetworkWirelessRfProfilesParamsWithContext(ctx context.Context) *GetNetworkWirelessRfProfilesParams {
	return &GetNetworkWirelessRfProfilesParams{
		Context: ctx,
	}
}

// NewGetNetworkWirelessRfProfilesParamsWithHTTPClient creates a new GetNetworkWirelessRfProfilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNetworkWirelessRfProfilesParamsWithHTTPClient(client *http.Client) *GetNetworkWirelessRfProfilesParams {
	return &GetNetworkWirelessRfProfilesParams{
		HTTPClient: client,
	}
}

/* GetNetworkWirelessRfProfilesParams contains all the parameters to send to the API endpoint
   for the get network wireless rf profiles operation.

   Typically these are written to a http.Request.
*/
type GetNetworkWirelessRfProfilesParams struct {

	/* IncludeTemplateProfiles.

	   If the network is bound to a template, this parameter controls whether or not the non-basic RF profiles defined on the template should be included in the response alongside the non-basic profiles defined on the bound network. Defaults to false.
	*/
	IncludeTemplateProfiles *bool

	// NetworkID.
	NetworkID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get network wireless rf profiles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkWirelessRfProfilesParams) WithDefaults() *GetNetworkWirelessRfProfilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get network wireless rf profiles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkWirelessRfProfilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get network wireless rf profiles params
func (o *GetNetworkWirelessRfProfilesParams) WithTimeout(timeout time.Duration) *GetNetworkWirelessRfProfilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network wireless rf profiles params
func (o *GetNetworkWirelessRfProfilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network wireless rf profiles params
func (o *GetNetworkWirelessRfProfilesParams) WithContext(ctx context.Context) *GetNetworkWirelessRfProfilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network wireless rf profiles params
func (o *GetNetworkWirelessRfProfilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network wireless rf profiles params
func (o *GetNetworkWirelessRfProfilesParams) WithHTTPClient(client *http.Client) *GetNetworkWirelessRfProfilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network wireless rf profiles params
func (o *GetNetworkWirelessRfProfilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeTemplateProfiles adds the includeTemplateProfiles to the get network wireless rf profiles params
func (o *GetNetworkWirelessRfProfilesParams) WithIncludeTemplateProfiles(includeTemplateProfiles *bool) *GetNetworkWirelessRfProfilesParams {
	o.SetIncludeTemplateProfiles(includeTemplateProfiles)
	return o
}

// SetIncludeTemplateProfiles adds the includeTemplateProfiles to the get network wireless rf profiles params
func (o *GetNetworkWirelessRfProfilesParams) SetIncludeTemplateProfiles(includeTemplateProfiles *bool) {
	o.IncludeTemplateProfiles = includeTemplateProfiles
}

// WithNetworkID adds the networkID to the get network wireless rf profiles params
func (o *GetNetworkWirelessRfProfilesParams) WithNetworkID(networkID string) *GetNetworkWirelessRfProfilesParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network wireless rf profiles params
func (o *GetNetworkWirelessRfProfilesParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkWirelessRfProfilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeTemplateProfiles != nil {

		// query param includeTemplateProfiles
		var qrIncludeTemplateProfiles bool

		if o.IncludeTemplateProfiles != nil {
			qrIncludeTemplateProfiles = *o.IncludeTemplateProfiles
		}
		qIncludeTemplateProfiles := swag.FormatBool(qrIncludeTemplateProfiles)
		if qIncludeTemplateProfiles != "" {

			if err := r.SetQueryParam("includeTemplateProfiles", qIncludeTemplateProfiles); err != nil {
				return err
			}
		}
	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
