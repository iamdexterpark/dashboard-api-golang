// Code generated by go-swagger; DO NOT EDIT.

package wireless

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkWirelessAlternateManagementInterfaceReader is a Reader for the UpdateNetworkWirelessAlternateManagementInterface structure.
type UpdateNetworkWirelessAlternateManagementInterfaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkWirelessAlternateManagementInterfaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkWirelessAlternateManagementInterfaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkWirelessAlternateManagementInterfaceOK creates a UpdateNetworkWirelessAlternateManagementInterfaceOK with default headers values
func NewUpdateNetworkWirelessAlternateManagementInterfaceOK() *UpdateNetworkWirelessAlternateManagementInterfaceOK {
	return &UpdateNetworkWirelessAlternateManagementInterfaceOK{}
}

/* UpdateNetworkWirelessAlternateManagementInterfaceOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkWirelessAlternateManagementInterfaceOK struct {
	Payload interface{}
}

func (o *UpdateNetworkWirelessAlternateManagementInterfaceOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/wireless/alternateManagementInterface][%d] updateNetworkWirelessAlternateManagementInterfaceOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkWirelessAlternateManagementInterfaceOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkWirelessAlternateManagementInterfaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkWirelessAlternateManagementInterfaceBody update network wireless alternate management interface body
// Example: {"accessPoints":[{"alternateManagementIp":"1.2.3.4","dns1":"8.8.8.8","dns2":"8.8.4.4","gateway":"1.2.3.5","serial":"Q234-ABCD-5678","subnetMask":"255.255.255.0"}],"enabled":true,"protocols":["radius","snmp","syslog","ldap"],"vlanId":100}
swagger:model UpdateNetworkWirelessAlternateManagementInterfaceBody
*/
type UpdateNetworkWirelessAlternateManagementInterfaceBody struct {

	// Array of access point serial number and IP assignment. Note: accessPoints IP assignment is not applicable for template networks, in other words, do not put 'accessPoints' in the body when updating template networks. Also, an empty 'accessPoints' array will remove all previous static IP assignments
	AccessPoints []*UpdateNetworkWirelessAlternateManagementInterfaceParamsBodyAccessPointsItems0 `json:"accessPoints"`

	// Boolean value to enable or disable alternate management interface
	Enabled bool `json:"enabled,omitempty"`

	// Can be one or more of the following values: 'radius', 'snmp', 'syslog' or 'ldap'
	Protocols []string `json:"protocols"`

	// Alternate management interface VLAN, must be between 1 and 4094
	VlanID int64 `json:"vlanId,omitempty"`
}

// Validate validates this update network wireless alternate management interface body
func (o *UpdateNetworkWirelessAlternateManagementInterfaceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProtocols(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessAlternateManagementInterfaceBody) validateAccessPoints(formats strfmt.Registry) error {
	if swag.IsZero(o.AccessPoints) { // not required
		return nil
	}

	for i := 0; i < len(o.AccessPoints); i++ {
		if swag.IsZero(o.AccessPoints[i]) { // not required
			continue
		}

		if o.AccessPoints[i] != nil {
			if err := o.AccessPoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessAlternateManagementInterface" + "." + "accessPoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessAlternateManagementInterface" + "." + "accessPoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var updateNetworkWirelessAlternateManagementInterfaceBodyProtocolsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["radius","snmp","syslog","ldap"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkWirelessAlternateManagementInterfaceBodyProtocolsItemsEnum = append(updateNetworkWirelessAlternateManagementInterfaceBodyProtocolsItemsEnum, v)
	}
}

func (o *UpdateNetworkWirelessAlternateManagementInterfaceBody) validateProtocolsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkWirelessAlternateManagementInterfaceBodyProtocolsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkWirelessAlternateManagementInterfaceBody) validateProtocols(formats strfmt.Registry) error {
	if swag.IsZero(o.Protocols) { // not required
		return nil
	}

	for i := 0; i < len(o.Protocols); i++ {

		// value enum
		if err := o.validateProtocolsItemsEnum("updateNetworkWirelessAlternateManagementInterface"+"."+"protocols"+"."+strconv.Itoa(i), "body", o.Protocols[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this update network wireless alternate management interface body based on the context it is used
func (o *UpdateNetworkWirelessAlternateManagementInterfaceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccessPoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessAlternateManagementInterfaceBody) contextValidateAccessPoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AccessPoints); i++ {

		if o.AccessPoints[i] != nil {
			if err := o.AccessPoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkWirelessAlternateManagementInterface" + "." + "accessPoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkWirelessAlternateManagementInterface" + "." + "accessPoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessAlternateManagementInterfaceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessAlternateManagementInterfaceBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessAlternateManagementInterfaceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkWirelessAlternateManagementInterfaceParamsBodyAccessPointsItems0 update network wireless alternate management interface params body access points items0
swagger:model UpdateNetworkWirelessAlternateManagementInterfaceParamsBodyAccessPointsItems0
*/
type UpdateNetworkWirelessAlternateManagementInterfaceParamsBodyAccessPointsItems0 struct {

	// Wireless alternate management interface device IP. Provide an empty string to remove alternate management IP assignment
	// Required: true
	AlternateManagementIP *string `json:"alternateManagementIp"`

	// Primary DNS must be in IP format
	Dns1 string `json:"dns1,omitempty"`

	// Optional secondary DNS must be in IP format
	Dns2 string `json:"dns2,omitempty"`

	// Gateway must be in IP format
	Gateway string `json:"gateway,omitempty"`

	// Serial number of access point to be configured with alternate management IP
	// Required: true
	Serial *string `json:"serial"`

	// Subnet mask must be in IP format
	SubnetMask string `json:"subnetMask,omitempty"`
}

// Validate validates this update network wireless alternate management interface params body access points items0
func (o *UpdateNetworkWirelessAlternateManagementInterfaceParamsBodyAccessPointsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAlternateManagementIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSerial(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkWirelessAlternateManagementInterfaceParamsBodyAccessPointsItems0) validateAlternateManagementIP(formats strfmt.Registry) error {

	if err := validate.Required("alternateManagementIp", "body", o.AlternateManagementIP); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkWirelessAlternateManagementInterfaceParamsBodyAccessPointsItems0) validateSerial(formats strfmt.Registry) error {

	if err := validate.Required("serial", "body", o.Serial); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network wireless alternate management interface params body access points items0 based on context it is used
func (o *UpdateNetworkWirelessAlternateManagementInterfaceParamsBodyAccessPointsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkWirelessAlternateManagementInterfaceParamsBodyAccessPointsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkWirelessAlternateManagementInterfaceParamsBodyAccessPointsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkWirelessAlternateManagementInterfaceParamsBodyAccessPointsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
