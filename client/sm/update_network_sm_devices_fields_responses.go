// Code generated by go-swagger; DO NOT EDIT.

package sm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkSmDevicesFieldsReader is a Reader for the UpdateNetworkSmDevicesFields structure.
type UpdateNetworkSmDevicesFieldsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkSmDevicesFieldsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkSmDevicesFieldsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkSmDevicesFieldsOK creates a UpdateNetworkSmDevicesFieldsOK with default headers values
func NewUpdateNetworkSmDevicesFieldsOK() *UpdateNetworkSmDevicesFieldsOK {
	return &UpdateNetworkSmDevicesFieldsOK{}
}

/* UpdateNetworkSmDevicesFieldsOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkSmDevicesFieldsOK struct {
	Payload interface{}
}

func (o *UpdateNetworkSmDevicesFieldsOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/sm/devices/fields][%d] updateNetworkSmDevicesFieldsOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkSmDevicesFieldsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkSmDevicesFieldsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkSmDevicesFieldsBody update network sm devices fields body
// Example: {"deviceFields":{"name":"Miles's phone","notes":"Here's some info about my device"},"id":"1284392014819"}
swagger:model UpdateNetworkSmDevicesFieldsBody
*/
type UpdateNetworkSmDevicesFieldsBody struct {

	// device fields
	// Required: true
	DeviceFields *UpdateNetworkSmDevicesFieldsParamsBodyDeviceFields `json:"deviceFields"`

	// The id of the device to be modified.
	ID string `json:"id,omitempty"`

	// The serial of the device to be modified.
	Serial string `json:"serial,omitempty"`

	// The wifiMac of the device to be modified.
	WifiMac string `json:"wifiMac,omitempty"`
}

// Validate validates this update network sm devices fields body
func (o *UpdateNetworkSmDevicesFieldsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeviceFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSmDevicesFieldsBody) validateDeviceFields(formats strfmt.Registry) error {

	if err := validate.Required("updateNetworkSmDevicesFields"+"."+"deviceFields", "body", o.DeviceFields); err != nil {
		return err
	}

	if o.DeviceFields != nil {
		if err := o.DeviceFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSmDevicesFields" + "." + "deviceFields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSmDevicesFields" + "." + "deviceFields")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network sm devices fields body based on the context it is used
func (o *UpdateNetworkSmDevicesFieldsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDeviceFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSmDevicesFieldsBody) contextValidateDeviceFields(ctx context.Context, formats strfmt.Registry) error {

	if o.DeviceFields != nil {
		if err := o.DeviceFields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSmDevicesFields" + "." + "deviceFields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSmDevicesFields" + "." + "deviceFields")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSmDevicesFieldsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSmDevicesFieldsBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSmDevicesFieldsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkSmDevicesFieldsParamsBodyDeviceFields The new fields of the device. Each field of this object is optional.
swagger:model UpdateNetworkSmDevicesFieldsParamsBodyDeviceFields
*/
type UpdateNetworkSmDevicesFieldsParamsBodyDeviceFields struct {

	// New name for the device
	Name string `json:"name,omitempty"`

	// New notes for the device
	Notes string `json:"notes,omitempty"`
}

// Validate validates this update network sm devices fields params body device fields
func (o *UpdateNetworkSmDevicesFieldsParamsBodyDeviceFields) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network sm devices fields params body device fields based on context it is used
func (o *UpdateNetworkSmDevicesFieldsParamsBodyDeviceFields) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSmDevicesFieldsParamsBodyDeviceFields) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSmDevicesFieldsParamsBodyDeviceFields) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSmDevicesFieldsParamsBodyDeviceFields
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
