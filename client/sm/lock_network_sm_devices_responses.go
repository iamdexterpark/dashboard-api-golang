// Code generated by go-swagger; DO NOT EDIT.

package sm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LockNetworkSmDevicesReader is a Reader for the LockNetworkSmDevices structure.
type LockNetworkSmDevicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LockNetworkSmDevicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLockNetworkSmDevicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLockNetworkSmDevicesOK creates a LockNetworkSmDevicesOK with default headers values
func NewLockNetworkSmDevicesOK() *LockNetworkSmDevicesOK {
	return &LockNetworkSmDevicesOK{}
}

/* LockNetworkSmDevicesOK describes a response with status code 200, with default header values.

Successful operation
*/
type LockNetworkSmDevicesOK struct {
	Payload interface{}
}

func (o *LockNetworkSmDevicesOK) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/sm/devices/lock][%d] lockNetworkSmDevicesOK  %+v", 200, o.Payload)
}
func (o *LockNetworkSmDevicesOK) GetPayload() interface{} {
	return o.Payload
}

func (o *LockNetworkSmDevicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LockNetworkSmDevicesBody lock network sm devices body
// Example: {"ids":["1284392014819"]}
swagger:model LockNetworkSmDevicesBody
*/
type LockNetworkSmDevicesBody struct {

	// The ids of the devices to be locked.
	Ids []string `json:"ids"`

	// The pin number for locking macOS devices (a six digit number). Required only for macOS devices.
	Pin int64 `json:"pin,omitempty"`

	// The scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags of the devices to be wiped.
	Scope []string `json:"scope"`

	// The serials of the devices to be locked.
	Serials []string `json:"serials"`

	// The wifiMacs of the devices to be locked.
	WifiMacs []string `json:"wifiMacs"`
}

// Validate validates this lock network sm devices body
func (o *LockNetworkSmDevicesBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this lock network sm devices body based on context it is used
func (o *LockNetworkSmDevicesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LockNetworkSmDevicesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LockNetworkSmDevicesBody) UnmarshalBinary(b []byte) error {
	var res LockNetworkSmDevicesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
