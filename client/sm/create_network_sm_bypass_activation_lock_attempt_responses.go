// Code generated by go-swagger; DO NOT EDIT.

package sm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNetworkSmBypassActivationLockAttemptReader is a Reader for the CreateNetworkSmBypassActivationLockAttempt structure.
type CreateNetworkSmBypassActivationLockAttemptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNetworkSmBypassActivationLockAttemptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateNetworkSmBypassActivationLockAttemptCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateNetworkSmBypassActivationLockAttemptCreated creates a CreateNetworkSmBypassActivationLockAttemptCreated with default headers values
func NewCreateNetworkSmBypassActivationLockAttemptCreated() *CreateNetworkSmBypassActivationLockAttemptCreated {
	return &CreateNetworkSmBypassActivationLockAttemptCreated{}
}

/* CreateNetworkSmBypassActivationLockAttemptCreated describes a response with status code 201, with default header values.

Successful operation
*/
type CreateNetworkSmBypassActivationLockAttemptCreated struct {
	Payload interface{}
}

func (o *CreateNetworkSmBypassActivationLockAttemptCreated) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/sm/bypassActivationLockAttempts][%d] createNetworkSmBypassActivationLockAttemptCreated  %+v", 201, o.Payload)
}
func (o *CreateNetworkSmBypassActivationLockAttemptCreated) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateNetworkSmBypassActivationLockAttemptCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateNetworkSmBypassActivationLockAttemptBody create network sm bypass activation lock attempt body
// Example: {"ids":["1284392014819","2983092129865"]}
swagger:model CreateNetworkSmBypassActivationLockAttemptBody
*/
type CreateNetworkSmBypassActivationLockAttemptBody struct {

	// The ids of the devices to attempt activation lock bypass.
	// Required: true
	Ids []string `json:"ids"`
}

// Validate validates this create network sm bypass activation lock attempt body
func (o *CreateNetworkSmBypassActivationLockAttemptBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkSmBypassActivationLockAttemptBody) validateIds(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkSmBypassActivationLockAttempt"+"."+"ids", "body", o.Ids); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network sm bypass activation lock attempt body based on context it is used
func (o *CreateNetworkSmBypassActivationLockAttemptBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkSmBypassActivationLockAttemptBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkSmBypassActivationLockAttemptBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkSmBypassActivationLockAttemptBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
