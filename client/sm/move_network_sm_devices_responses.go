// Code generated by go-swagger; DO NOT EDIT.

package sm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MoveNetworkSmDevicesReader is a Reader for the MoveNetworkSmDevices structure.
type MoveNetworkSmDevicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MoveNetworkSmDevicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMoveNetworkSmDevicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMoveNetworkSmDevicesOK creates a MoveNetworkSmDevicesOK with default headers values
func NewMoveNetworkSmDevicesOK() *MoveNetworkSmDevicesOK {
	return &MoveNetworkSmDevicesOK{}
}

/* MoveNetworkSmDevicesOK describes a response with status code 200, with default header values.

Successful operation
*/
type MoveNetworkSmDevicesOK struct {
	Payload interface{}
}

func (o *MoveNetworkSmDevicesOK) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/sm/devices/move][%d] moveNetworkSmDevicesOK  %+v", 200, o.Payload)
}
func (o *MoveNetworkSmDevicesOK) GetPayload() interface{} {
	return o.Payload
}

func (o *MoveNetworkSmDevicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*MoveNetworkSmDevicesBody move network sm devices body
// Example: {"ids":["1284392014819"],"newNetwork":"N_24329156"}
swagger:model MoveNetworkSmDevicesBody
*/
type MoveNetworkSmDevicesBody struct {

	// The ids of the devices to be moved.
	Ids []string `json:"ids"`

	// The new network to which the devices will be moved.
	// Required: true
	NewNetwork *string `json:"newNetwork"`

	// The scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags of the devices to be moved.
	Scope []string `json:"scope"`

	// The serials of the devices to be moved.
	Serials []string `json:"serials"`

	// The wifiMacs of the devices to be moved.
	WifiMacs []string `json:"wifiMacs"`
}

// Validate validates this move network sm devices body
func (o *MoveNetworkSmDevicesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNewNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveNetworkSmDevicesBody) validateNewNetwork(formats strfmt.Registry) error {

	if err := validate.Required("moveNetworkSmDevices"+"."+"newNetwork", "body", o.NewNetwork); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this move network sm devices body based on context it is used
func (o *MoveNetworkSmDevicesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveNetworkSmDevicesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveNetworkSmDevicesBody) UnmarshalBinary(b []byte) error {
	var res MoveNetworkSmDevicesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
