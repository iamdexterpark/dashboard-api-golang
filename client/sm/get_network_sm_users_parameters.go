// Code generated by go-swagger; DO NOT EDIT.

package sm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkSmUsersParams creates a new GetNetworkSmUsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNetworkSmUsersParams() *GetNetworkSmUsersParams {
	return &GetNetworkSmUsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkSmUsersParamsWithTimeout creates a new GetNetworkSmUsersParams object
// with the ability to set a timeout on a request.
func NewGetNetworkSmUsersParamsWithTimeout(timeout time.Duration) *GetNetworkSmUsersParams {
	return &GetNetworkSmUsersParams{
		timeout: timeout,
	}
}

// NewGetNetworkSmUsersParamsWithContext creates a new GetNetworkSmUsersParams object
// with the ability to set a context for a request.
func NewGetNetworkSmUsersParamsWithContext(ctx context.Context) *GetNetworkSmUsersParams {
	return &GetNetworkSmUsersParams{
		Context: ctx,
	}
}

// NewGetNetworkSmUsersParamsWithHTTPClient creates a new GetNetworkSmUsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNetworkSmUsersParamsWithHTTPClient(client *http.Client) *GetNetworkSmUsersParams {
	return &GetNetworkSmUsersParams{
		HTTPClient: client,
	}
}

/* GetNetworkSmUsersParams contains all the parameters to send to the API endpoint
   for the get network sm users operation.

   Typically these are written to a http.Request.
*/
type GetNetworkSmUsersParams struct {

	/* Emails.

	   Filter users by email(s).
	*/
	Emails []string

	/* Ids.

	   Filter users by id(s).
	*/
	Ids []string

	// NetworkID.
	NetworkID string

	/* Scope.

	   Specifiy a scope (one of all, none, withAny, withAll, withoutAny, withoutAll) and a set of tags.
	*/
	Scope []string

	/* Usernames.

	   Filter users by username(s).
	*/
	Usernames []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get network sm users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkSmUsersParams) WithDefaults() *GetNetworkSmUsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get network sm users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkSmUsersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get network sm users params
func (o *GetNetworkSmUsersParams) WithTimeout(timeout time.Duration) *GetNetworkSmUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network sm users params
func (o *GetNetworkSmUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network sm users params
func (o *GetNetworkSmUsersParams) WithContext(ctx context.Context) *GetNetworkSmUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network sm users params
func (o *GetNetworkSmUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network sm users params
func (o *GetNetworkSmUsersParams) WithHTTPClient(client *http.Client) *GetNetworkSmUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network sm users params
func (o *GetNetworkSmUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmails adds the emails to the get network sm users params
func (o *GetNetworkSmUsersParams) WithEmails(emails []string) *GetNetworkSmUsersParams {
	o.SetEmails(emails)
	return o
}

// SetEmails adds the emails to the get network sm users params
func (o *GetNetworkSmUsersParams) SetEmails(emails []string) {
	o.Emails = emails
}

// WithIds adds the ids to the get network sm users params
func (o *GetNetworkSmUsersParams) WithIds(ids []string) *GetNetworkSmUsersParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get network sm users params
func (o *GetNetworkSmUsersParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithNetworkID adds the networkID to the get network sm users params
func (o *GetNetworkSmUsersParams) WithNetworkID(networkID string) *GetNetworkSmUsersParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network sm users params
func (o *GetNetworkSmUsersParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithScope adds the scope to the get network sm users params
func (o *GetNetworkSmUsersParams) WithScope(scope []string) *GetNetworkSmUsersParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get network sm users params
func (o *GetNetworkSmUsersParams) SetScope(scope []string) {
	o.Scope = scope
}

// WithUsernames adds the usernames to the get network sm users params
func (o *GetNetworkSmUsersParams) WithUsernames(usernames []string) *GetNetworkSmUsersParams {
	o.SetUsernames(usernames)
	return o
}

// SetUsernames adds the usernames to the get network sm users params
func (o *GetNetworkSmUsersParams) SetUsernames(usernames []string) {
	o.Usernames = usernames
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkSmUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Emails != nil {

		// binding items for emails
		joinedEmails := o.bindParamEmails(reg)

		// query array param emails
		if err := r.SetQueryParam("emails", joinedEmails...); err != nil {
			return err
		}
	}

	if o.Ids != nil {

		// binding items for ids
		joinedIds := o.bindParamIds(reg)

		// query array param ids
		if err := r.SetQueryParam("ids", joinedIds...); err != nil {
			return err
		}
	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.Scope != nil {

		// binding items for scope
		joinedScope := o.bindParamScope(reg)

		// query array param scope
		if err := r.SetQueryParam("scope", joinedScope...); err != nil {
			return err
		}
	}

	if o.Usernames != nil {

		// binding items for usernames
		joinedUsernames := o.bindParamUsernames(reg)

		// query array param usernames
		if err := r.SetQueryParam("usernames", joinedUsernames...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetNetworkSmUsers binds the parameter emails
func (o *GetNetworkSmUsersParams) bindParamEmails(formats strfmt.Registry) []string {
	emailsIR := o.Emails

	var emailsIC []string
	for _, emailsIIR := range emailsIR { // explode []string

		emailsIIV := emailsIIR // string as string
		emailsIC = append(emailsIC, emailsIIV)
	}

	// items.CollectionFormat: ""
	emailsIS := swag.JoinByFormat(emailsIC, "")

	return emailsIS
}

// bindParamGetNetworkSmUsers binds the parameter ids
func (o *GetNetworkSmUsersParams) bindParamIds(formats strfmt.Registry) []string {
	idsIR := o.Ids

	var idsIC []string
	for _, idsIIR := range idsIR { // explode []string

		idsIIV := idsIIR // string as string
		idsIC = append(idsIC, idsIIV)
	}

	// items.CollectionFormat: ""
	idsIS := swag.JoinByFormat(idsIC, "")

	return idsIS
}

// bindParamGetNetworkSmUsers binds the parameter scope
func (o *GetNetworkSmUsersParams) bindParamScope(formats strfmt.Registry) []string {
	scopeIR := o.Scope

	var scopeIC []string
	for _, scopeIIR := range scopeIR { // explode []string

		scopeIIV := scopeIIR // string as string
		scopeIC = append(scopeIC, scopeIIV)
	}

	// items.CollectionFormat: ""
	scopeIS := swag.JoinByFormat(scopeIC, "")

	return scopeIS
}

// bindParamGetNetworkSmUsers binds the parameter usernames
func (o *GetNetworkSmUsersParams) bindParamUsernames(formats strfmt.Registry) []string {
	usernamesIR := o.Usernames

	var usernamesIC []string
	for _, usernamesIIR := range usernamesIR { // explode []string

		usernamesIIV := usernamesIIR // string as string
		usernamesIC = append(usernamesIC, usernamesIIV)
	}

	// items.CollectionFormat: ""
	usernamesIS := swag.JoinByFormat(usernamesIC, "")

	return usernamesIS
}
