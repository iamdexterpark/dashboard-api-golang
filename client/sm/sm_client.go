// Code generated by go-swagger; DO NOT EDIT.

package sm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CheckinNetworkSmDevices(params *CheckinNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckinNetworkSmDevicesOK, error)

	CreateNetworkSmBypassActivationLockAttempt(params *CreateNetworkSmBypassActivationLockAttemptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkSmBypassActivationLockAttemptCreated, error)

	CreateNetworkSmTargetGroup(params *CreateNetworkSmTargetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkSmTargetGroupCreated, error)

	DeleteNetworkSmTargetGroup(params *DeleteNetworkSmTargetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkSmTargetGroupNoContent, error)

	DeleteNetworkSmUserAccessDevice(params *DeleteNetworkSmUserAccessDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkSmUserAccessDeviceNoContent, error)

	GetNetworkSmBypassActivationLockAttempt(params *GetNetworkSmBypassActivationLockAttemptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmBypassActivationLockAttemptOK, error)

	GetNetworkSmDeviceCellularUsageHistory(params *GetNetworkSmDeviceCellularUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceCellularUsageHistoryOK, error)

	GetNetworkSmDeviceCerts(params *GetNetworkSmDeviceCertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceCertsOK, error)

	GetNetworkSmDeviceConnectivity(params *GetNetworkSmDeviceConnectivityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceConnectivityOK, error)

	GetNetworkSmDeviceDesktopLogs(params *GetNetworkSmDeviceDesktopLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceDesktopLogsOK, error)

	GetNetworkSmDeviceDeviceCommandLogs(params *GetNetworkSmDeviceDeviceCommandLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceDeviceCommandLogsOK, error)

	GetNetworkSmDeviceDeviceProfiles(params *GetNetworkSmDeviceDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceDeviceProfilesOK, error)

	GetNetworkSmDeviceNetworkAdapters(params *GetNetworkSmDeviceNetworkAdaptersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceNetworkAdaptersOK, error)

	GetNetworkSmDevicePerformanceHistory(params *GetNetworkSmDevicePerformanceHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDevicePerformanceHistoryOK, error)

	GetNetworkSmDeviceRestrictions(params *GetNetworkSmDeviceRestrictionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceRestrictionsOK, error)

	GetNetworkSmDeviceSecurityCenters(params *GetNetworkSmDeviceSecurityCentersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceSecurityCentersOK, error)

	GetNetworkSmDeviceSoftwares(params *GetNetworkSmDeviceSoftwaresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceSoftwaresOK, error)

	GetNetworkSmDeviceWlanLists(params *GetNetworkSmDeviceWlanListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceWlanListsOK, error)

	GetNetworkSmDevices(params *GetNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDevicesOK, error)

	GetNetworkSmProfiles(params *GetNetworkSmProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmProfilesOK, error)

	GetNetworkSmTargetGroup(params *GetNetworkSmTargetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmTargetGroupOK, error)

	GetNetworkSmTargetGroups(params *GetNetworkSmTargetGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmTargetGroupsOK, error)

	GetNetworkSmUserAccessDevices(params *GetNetworkSmUserAccessDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmUserAccessDevicesOK, error)

	GetNetworkSmUserDeviceProfiles(params *GetNetworkSmUserDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmUserDeviceProfilesOK, error)

	GetNetworkSmUserSoftwares(params *GetNetworkSmUserSoftwaresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmUserSoftwaresOK, error)

	GetNetworkSmUsers(params *GetNetworkSmUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmUsersOK, error)

	GetOrganizationSmApnsCert(params *GetOrganizationSmApnsCertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSmApnsCertOK, error)

	GetOrganizationSmVppAccount(params *GetOrganizationSmVppAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSmVppAccountOK, error)

	GetOrganizationSmVppAccounts(params *GetOrganizationSmVppAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSmVppAccountsOK, error)

	LockNetworkSmDevices(params *LockNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockNetworkSmDevicesOK, error)

	ModifyNetworkSmDevicesTags(params *ModifyNetworkSmDevicesTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyNetworkSmDevicesTagsOK, error)

	MoveNetworkSmDevices(params *MoveNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveNetworkSmDevicesOK, error)

	RefreshNetworkSmDeviceDetails(params *RefreshNetworkSmDeviceDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshNetworkSmDeviceDetailsOK, error)

	UnenrollNetworkSmDevice(params *UnenrollNetworkSmDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnenrollNetworkSmDeviceOK, error)

	UpdateNetworkSmDevicesFields(params *UpdateNetworkSmDevicesFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSmDevicesFieldsOK, error)

	UpdateNetworkSmTargetGroup(params *UpdateNetworkSmTargetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSmTargetGroupOK, error)

	WipeNetworkSmDevices(params *WipeNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WipeNetworkSmDevicesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CheckinNetworkSmDevices forces check in a set of devices

  Force check-in a set of devices
*/
func (a *Client) CheckinNetworkSmDevices(params *CheckinNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckinNetworkSmDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckinNetworkSmDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkinNetworkSmDevices",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/devices/checkin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CheckinNetworkSmDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckinNetworkSmDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkinNetworkSmDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkSmBypassActivationLockAttempt bypasses activation lock attempt

  Bypass activation lock attempt
*/
func (a *Client) CreateNetworkSmBypassActivationLockAttempt(params *CreateNetworkSmBypassActivationLockAttemptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkSmBypassActivationLockAttemptCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkSmBypassActivationLockAttemptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkSmBypassActivationLockAttempt",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/bypassActivationLockAttempts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkSmBypassActivationLockAttemptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkSmBypassActivationLockAttemptCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkSmBypassActivationLockAttempt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkSmTargetGroup adds a target group

  Add a target group
*/
func (a *Client) CreateNetworkSmTargetGroup(params *CreateNetworkSmTargetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkSmTargetGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkSmTargetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkSmTargetGroup",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/targetGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkSmTargetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkSmTargetGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkSmTargetGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkSmTargetGroup deletes a target group from a network

  Delete a target group from a network
*/
func (a *Client) DeleteNetworkSmTargetGroup(params *DeleteNetworkSmTargetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkSmTargetGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkSmTargetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkSmTargetGroup",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/sm/targetGroups/{targetGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkSmTargetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkSmTargetGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkSmTargetGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkSmUserAccessDevice deletes a user access device

  Delete a User Access Device
*/
func (a *Client) DeleteNetworkSmUserAccessDevice(params *DeleteNetworkSmUserAccessDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkSmUserAccessDeviceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkSmUserAccessDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkSmUserAccessDevice",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/sm/userAccessDevices/{userAccessDeviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkSmUserAccessDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkSmUserAccessDeviceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkSmUserAccessDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmBypassActivationLockAttempt bypasses activation lock attempt status

  Bypass activation lock attempt status
*/
func (a *Client) GetNetworkSmBypassActivationLockAttempt(params *GetNetworkSmBypassActivationLockAttemptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmBypassActivationLockAttemptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmBypassActivationLockAttemptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmBypassActivationLockAttempt",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/bypassActivationLockAttempts/{attemptId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmBypassActivationLockAttemptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmBypassActivationLockAttemptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmBypassActivationLockAttempt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceCellularUsageHistory returns the client s daily cellular data usage history

  Return the client's daily cellular data usage history. Usage data is in kilobytes.
*/
func (a *Client) GetNetworkSmDeviceCellularUsageHistory(params *GetNetworkSmDeviceCellularUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceCellularUsageHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceCellularUsageHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceCellularUsageHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/cellularUsageHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceCellularUsageHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceCellularUsageHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceCellularUsageHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceCerts lists the certs on a device

  List the certs on a device
*/
func (a *Client) GetNetworkSmDeviceCerts(params *GetNetworkSmDeviceCertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceCertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceCertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceCerts",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/certs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceCertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceCertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceCerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceConnectivity returns historical connectivity data whether a device is regularly checking in to dashboard

  Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
*/
func (a *Client) GetNetworkSmDeviceConnectivity(params *GetNetworkSmDeviceConnectivityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceConnectivityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceConnectivityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceConnectivity",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/connectivity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceConnectivityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceConnectivityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceConnectivity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceDesktopLogs returns historical records of various systems manager network connection details for desktop devices

  Return historical records of various Systems Manager network connection details for desktop devices.
*/
func (a *Client) GetNetworkSmDeviceDesktopLogs(params *GetNetworkSmDeviceDesktopLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceDesktopLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceDesktopLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceDesktopLogs",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/desktopLogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceDesktopLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceDesktopLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceDesktopLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceDeviceCommandLogs returns historical records of commands sent to systems manager devices

  Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
*/
func (a *Client) GetNetworkSmDeviceDeviceCommandLogs(params *GetNetworkSmDeviceDeviceCommandLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceDeviceCommandLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceDeviceCommandLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceDeviceCommandLogs",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/deviceCommandLogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceDeviceCommandLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceDeviceCommandLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceDeviceCommandLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceDeviceProfiles gets the installed profiles associated with a device

  Get the installed profiles associated with a device
*/
func (a *Client) GetNetworkSmDeviceDeviceProfiles(params *GetNetworkSmDeviceDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceDeviceProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceDeviceProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceDeviceProfiles",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/deviceProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceDeviceProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceDeviceProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceDeviceProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceNetworkAdapters lists the network adapters of a device

  List the network adapters of a device
*/
func (a *Client) GetNetworkSmDeviceNetworkAdapters(params *GetNetworkSmDeviceNetworkAdaptersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceNetworkAdaptersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceNetworkAdaptersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceNetworkAdapters",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/networkAdapters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceNetworkAdaptersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceNetworkAdaptersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceNetworkAdapters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDevicePerformanceHistory returns historical records of various systems manager client metrics for desktop devices

  Return historical records of various Systems Manager client metrics for desktop devices.
*/
func (a *Client) GetNetworkSmDevicePerformanceHistory(params *GetNetworkSmDevicePerformanceHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDevicePerformanceHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDevicePerformanceHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDevicePerformanceHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/performanceHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDevicePerformanceHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDevicePerformanceHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDevicePerformanceHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceRestrictions lists the restrictions on a device

  List the restrictions on a device
*/
func (a *Client) GetNetworkSmDeviceRestrictions(params *GetNetworkSmDeviceRestrictionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceRestrictionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceRestrictionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceRestrictions",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/restrictions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceRestrictionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceRestrictionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceRestrictions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceSecurityCenters lists the security centers on a device

  List the security centers on a device
*/
func (a *Client) GetNetworkSmDeviceSecurityCenters(params *GetNetworkSmDeviceSecurityCentersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceSecurityCentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceSecurityCentersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceSecurityCenters",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/securityCenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceSecurityCentersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceSecurityCentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceSecurityCenters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceSoftwares gets a list of softwares associated with a device

  Get a list of softwares associated with a device
*/
func (a *Client) GetNetworkSmDeviceSoftwares(params *GetNetworkSmDeviceSoftwaresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceSoftwaresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceSoftwaresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceSoftwares",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/softwares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceSoftwaresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceSoftwaresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceSoftwares: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDeviceWlanLists lists the saved s s ID names on a device

  List the saved SSID names on a device
*/
func (a *Client) GetNetworkSmDeviceWlanLists(params *GetNetworkSmDeviceWlanListsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDeviceWlanListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDeviceWlanListsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDeviceWlanLists",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/wlanLists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDeviceWlanListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDeviceWlanListsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDeviceWlanLists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmDevices lists the devices enrolled in an s m network with various specified fields and filters

  List the devices enrolled in an SM network with various specified fields and filters
*/
func (a *Client) GetNetworkSmDevices(params *GetNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmDevices",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmProfiles lists all profiles in a network

  List all profiles in a network
*/
func (a *Client) GetNetworkSmProfiles(params *GetNetworkSmProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmProfiles",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmTargetGroup returns a target group

  Return a target group
*/
func (a *Client) GetNetworkSmTargetGroup(params *GetNetworkSmTargetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmTargetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmTargetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmTargetGroup",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/targetGroups/{targetGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmTargetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmTargetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmTargetGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmTargetGroups lists the target groups in this network

  List the target groups in this network
*/
func (a *Client) GetNetworkSmTargetGroups(params *GetNetworkSmTargetGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmTargetGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmTargetGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmTargetGroups",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/targetGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmTargetGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmTargetGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmTargetGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmUserAccessDevices lists user access devices and its trusted access connections

  List User Access Devices and its Trusted Access Connections
*/
func (a *Client) GetNetworkSmUserAccessDevices(params *GetNetworkSmUserAccessDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmUserAccessDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmUserAccessDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmUserAccessDevices",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/userAccessDevices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmUserAccessDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmUserAccessDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmUserAccessDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmUserDeviceProfiles gets the profiles associated with a user

  Get the profiles associated with a user
*/
func (a *Client) GetNetworkSmUserDeviceProfiles(params *GetNetworkSmUserDeviceProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmUserDeviceProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmUserDeviceProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmUserDeviceProfiles",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/users/{userId}/deviceProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmUserDeviceProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmUserDeviceProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmUserDeviceProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmUserSoftwares gets a list of softwares associated with a user

  Get a list of softwares associated with a user
*/
func (a *Client) GetNetworkSmUserSoftwares(params *GetNetworkSmUserSoftwaresParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmUserSoftwaresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmUserSoftwaresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmUserSoftwares",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/users/{userId}/softwares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmUserSoftwaresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmUserSoftwaresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmUserSoftwares: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSmUsers lists the owners in an s m network with various specified fields and filters

  List the owners in an SM network with various specified fields and filters
*/
func (a *Client) GetNetworkSmUsers(params *GetNetworkSmUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSmUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSmUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSmUsers",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/sm/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSmUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSmUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSmUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSmApnsCert gets the organization s a p n s certificate

  Get the organization's APNS certificate
*/
func (a *Client) GetOrganizationSmApnsCert(params *GetOrganizationSmApnsCertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSmApnsCertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSmApnsCertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSmApnsCert",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/sm/apnsCert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSmApnsCertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSmApnsCertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSmApnsCert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSmVppAccount gets a hash containing the unparsed token of the v p p account with the given ID

  Get a hash containing the unparsed token of the VPP account with the given ID
*/
func (a *Client) GetOrganizationSmVppAccount(params *GetOrganizationSmVppAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSmVppAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSmVppAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSmVppAccount",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/sm/vppAccounts/{vppAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSmVppAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSmVppAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSmVppAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSmVppAccounts lists the v p p accounts in the organization

  List the VPP accounts in the organization
*/
func (a *Client) GetOrganizationSmVppAccounts(params *GetOrganizationSmVppAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSmVppAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSmVppAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSmVppAccounts",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/sm/vppAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSmVppAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSmVppAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSmVppAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LockNetworkSmDevices locks a set of devices

  Lock a set of devices
*/
func (a *Client) LockNetworkSmDevices(params *LockNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LockNetworkSmDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockNetworkSmDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lockNetworkSmDevices",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/devices/lock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LockNetworkSmDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockNetworkSmDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for lockNetworkSmDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ModifyNetworkSmDevicesTags adds delete or update the tags of a set of devices

  Add, delete, or update the tags of a set of devices
*/
func (a *Client) ModifyNetworkSmDevicesTags(params *ModifyNetworkSmDevicesTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyNetworkSmDevicesTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyNetworkSmDevicesTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyNetworkSmDevicesTags",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/devices/modifyTags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ModifyNetworkSmDevicesTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyNetworkSmDevicesTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyNetworkSmDevicesTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveNetworkSmDevices moves a set of devices to a new network

  Move a set of devices to a new network
*/
func (a *Client) MoveNetworkSmDevices(params *MoveNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveNetworkSmDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveNetworkSmDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "moveNetworkSmDevices",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/devices/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveNetworkSmDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveNetworkSmDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for moveNetworkSmDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RefreshNetworkSmDeviceDetails refreshes the details of a device

  Refresh the details of a device
*/
func (a *Client) RefreshNetworkSmDeviceDetails(params *RefreshNetworkSmDeviceDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshNetworkSmDeviceDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshNetworkSmDeviceDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refreshNetworkSmDeviceDetails",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/refreshDetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshNetworkSmDeviceDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshNetworkSmDeviceDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refreshNetworkSmDeviceDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnenrollNetworkSmDevice unenrolls a device

  Unenroll a device
*/
func (a *Client) UnenrollNetworkSmDevice(params *UnenrollNetworkSmDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnenrollNetworkSmDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnenrollNetworkSmDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unenrollNetworkSmDevice",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/devices/{deviceId}/unenroll",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnenrollNetworkSmDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnenrollNetworkSmDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unenrollNetworkSmDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSmDevicesFields modifies the fields of a device

  Modify the fields of a device
*/
func (a *Client) UpdateNetworkSmDevicesFields(params *UpdateNetworkSmDevicesFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSmDevicesFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSmDevicesFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkSmDevicesFields",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/sm/devices/fields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSmDevicesFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSmDevicesFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSmDevicesFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSmTargetGroup updates a target group

  Update a target group
*/
func (a *Client) UpdateNetworkSmTargetGroup(params *UpdateNetworkSmTargetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSmTargetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSmTargetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkSmTargetGroup",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/sm/targetGroups/{targetGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSmTargetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSmTargetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSmTargetGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WipeNetworkSmDevices wipes a device

  Wipe a device
*/
func (a *Client) WipeNetworkSmDevices(params *WipeNetworkSmDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WipeNetworkSmDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWipeNetworkSmDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "wipeNetworkSmDevices",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/sm/devices/wipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WipeNetworkSmDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WipeNetworkSmDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for wipeNetworkSmDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
