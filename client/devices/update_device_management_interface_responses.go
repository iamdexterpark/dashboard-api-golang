// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDeviceManagementInterfaceReader is a Reader for the UpdateDeviceManagementInterface structure.
type UpdateDeviceManagementInterfaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeviceManagementInterfaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDeviceManagementInterfaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDeviceManagementInterfaceOK creates a UpdateDeviceManagementInterfaceOK with default headers values
func NewUpdateDeviceManagementInterfaceOK() *UpdateDeviceManagementInterfaceOK {
	return &UpdateDeviceManagementInterfaceOK{}
}

/* UpdateDeviceManagementInterfaceOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateDeviceManagementInterfaceOK struct {
	Payload interface{}
}

func (o *UpdateDeviceManagementInterfaceOK) Error() string {
	return fmt.Sprintf("[PUT /devices/{serial}/managementInterface][%d] updateDeviceManagementInterfaceOK  %+v", 200, o.Payload)
}
func (o *UpdateDeviceManagementInterfaceOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateDeviceManagementInterfaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateDeviceManagementInterfaceBody update device management interface body
// Example: {"wan1":{"staticDns":["1.2.3.2","1.2.3.3"],"staticGatewayIp":"1.2.3.1","staticIp":"1.2.3.4","staticSubnetMask":"255.255.255.0","usingStaticIp":true,"vlan":7,"wanEnabled":"not configured"},"wan2":{"usingStaticIp":false,"vlan":2,"wanEnabled":"enabled"}}
swagger:model UpdateDeviceManagementInterfaceBody
*/
type UpdateDeviceManagementInterfaceBody struct {

	// wan1
	Wan1 *UpdateDeviceManagementInterfaceParamsBodyWan1 `json:"wan1,omitempty"`

	// wan2
	Wan2 *UpdateDeviceManagementInterfaceParamsBodyWan2 `json:"wan2,omitempty"`
}

// Validate validates this update device management interface body
func (o *UpdateDeviceManagementInterfaceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateWan1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWan2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceManagementInterfaceBody) validateWan1(formats strfmt.Registry) error {
	if swag.IsZero(o.Wan1) { // not required
		return nil
	}

	if o.Wan1 != nil {
		if err := o.Wan1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceManagementInterface" + "." + "wan1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceManagementInterface" + "." + "wan1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateDeviceManagementInterfaceBody) validateWan2(formats strfmt.Registry) error {
	if swag.IsZero(o.Wan2) { // not required
		return nil
	}

	if o.Wan2 != nil {
		if err := o.Wan2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceManagementInterface" + "." + "wan2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceManagementInterface" + "." + "wan2")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update device management interface body based on the context it is used
func (o *UpdateDeviceManagementInterfaceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateWan1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWan2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateDeviceManagementInterfaceBody) contextValidateWan1(ctx context.Context, formats strfmt.Registry) error {

	if o.Wan1 != nil {
		if err := o.Wan1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceManagementInterface" + "." + "wan1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceManagementInterface" + "." + "wan1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateDeviceManagementInterfaceBody) contextValidateWan2(ctx context.Context, formats strfmt.Registry) error {

	if o.Wan2 != nil {
		if err := o.Wan2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateDeviceManagementInterface" + "." + "wan2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateDeviceManagementInterface" + "." + "wan2")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceManagementInterfaceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceManagementInterfaceBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceManagementInterfaceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceManagementInterfaceParamsBodyWan1 WAN 1 settings
swagger:model UpdateDeviceManagementInterfaceParamsBodyWan1
*/
type UpdateDeviceManagementInterfaceParamsBodyWan1 struct {

	// Up to two DNS IPs.
	StaticDNS []string `json:"staticDns"`

	// The IP of the gateway on the WAN.
	StaticGatewayIP string `json:"staticGatewayIp,omitempty"`

	// The IP the device should use on the WAN.
	StaticIP string `json:"staticIp,omitempty"`

	// The subnet mask for the WAN.
	StaticSubnetMask string `json:"staticSubnetMask,omitempty"`

	// Configure the interface to have static IP settings or use DHCP.
	UsingStaticIP bool `json:"usingStaticIp,omitempty"`

	// The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
	Vlan int64 `json:"vlan,omitempty"`

	// Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
	// Enum: [enabled disabled not configured]
	WanEnabled string `json:"wanEnabled,omitempty"`
}

// Validate validates this update device management interface params body wan1
func (o *UpdateDeviceManagementInterfaceParamsBodyWan1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateWanEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceManagementInterfaceParamsBodyWan1TypeWanEnabledPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled","not configured"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceManagementInterfaceParamsBodyWan1TypeWanEnabledPropEnum = append(updateDeviceManagementInterfaceParamsBodyWan1TypeWanEnabledPropEnum, v)
	}
}

const (

	// UpdateDeviceManagementInterfaceParamsBodyWan1WanEnabledEnabled captures enum value "enabled"
	UpdateDeviceManagementInterfaceParamsBodyWan1WanEnabledEnabled string = "enabled"

	// UpdateDeviceManagementInterfaceParamsBodyWan1WanEnabledDisabled captures enum value "disabled"
	UpdateDeviceManagementInterfaceParamsBodyWan1WanEnabledDisabled string = "disabled"

	// UpdateDeviceManagementInterfaceParamsBodyWan1WanEnabledNotConfigured captures enum value "not configured"
	UpdateDeviceManagementInterfaceParamsBodyWan1WanEnabledNotConfigured string = "not configured"
)

// prop value enum
func (o *UpdateDeviceManagementInterfaceParamsBodyWan1) validateWanEnabledEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceManagementInterfaceParamsBodyWan1TypeWanEnabledPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceManagementInterfaceParamsBodyWan1) validateWanEnabled(formats strfmt.Registry) error {
	if swag.IsZero(o.WanEnabled) { // not required
		return nil
	}

	// value enum
	if err := o.validateWanEnabledEnum("updateDeviceManagementInterface"+"."+"wan1"+"."+"wanEnabled", "body", o.WanEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update device management interface params body wan1 based on context it is used
func (o *UpdateDeviceManagementInterfaceParamsBodyWan1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceManagementInterfaceParamsBodyWan1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceManagementInterfaceParamsBodyWan1) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceManagementInterfaceParamsBodyWan1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateDeviceManagementInterfaceParamsBodyWan2 WAN 2 settings (only for MX devices)
swagger:model UpdateDeviceManagementInterfaceParamsBodyWan2
*/
type UpdateDeviceManagementInterfaceParamsBodyWan2 struct {

	// Up to two DNS IPs.
	StaticDNS []string `json:"staticDns"`

	// The IP of the gateway on the WAN.
	StaticGatewayIP string `json:"staticGatewayIp,omitempty"`

	// The IP the device should use on the WAN.
	StaticIP string `json:"staticIp,omitempty"`

	// The subnet mask for the WAN.
	StaticSubnetMask string `json:"staticSubnetMask,omitempty"`

	// Configure the interface to have static IP settings or use DHCP.
	UsingStaticIP bool `json:"usingStaticIp,omitempty"`

	// The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
	Vlan int64 `json:"vlan,omitempty"`

	// Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
	// Enum: [enabled disabled not configured]
	WanEnabled string `json:"wanEnabled,omitempty"`
}

// Validate validates this update device management interface params body wan2
func (o *UpdateDeviceManagementInterfaceParamsBodyWan2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateWanEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceManagementInterfaceParamsBodyWan2TypeWanEnabledPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled","not configured"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceManagementInterfaceParamsBodyWan2TypeWanEnabledPropEnum = append(updateDeviceManagementInterfaceParamsBodyWan2TypeWanEnabledPropEnum, v)
	}
}

const (

	// UpdateDeviceManagementInterfaceParamsBodyWan2WanEnabledEnabled captures enum value "enabled"
	UpdateDeviceManagementInterfaceParamsBodyWan2WanEnabledEnabled string = "enabled"

	// UpdateDeviceManagementInterfaceParamsBodyWan2WanEnabledDisabled captures enum value "disabled"
	UpdateDeviceManagementInterfaceParamsBodyWan2WanEnabledDisabled string = "disabled"

	// UpdateDeviceManagementInterfaceParamsBodyWan2WanEnabledNotConfigured captures enum value "not configured"
	UpdateDeviceManagementInterfaceParamsBodyWan2WanEnabledNotConfigured string = "not configured"
)

// prop value enum
func (o *UpdateDeviceManagementInterfaceParamsBodyWan2) validateWanEnabledEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceManagementInterfaceParamsBodyWan2TypeWanEnabledPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceManagementInterfaceParamsBodyWan2) validateWanEnabled(formats strfmt.Registry) error {
	if swag.IsZero(o.WanEnabled) { // not required
		return nil
	}

	// value enum
	if err := o.validateWanEnabledEnum("updateDeviceManagementInterface"+"."+"wan2"+"."+"wanEnabled", "body", o.WanEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update device management interface params body wan2 based on context it is used
func (o *UpdateDeviceManagementInterfaceParamsBodyWan2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceManagementInterfaceParamsBodyWan2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceManagementInterfaceParamsBodyWan2) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceManagementInterfaceParamsBodyWan2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
