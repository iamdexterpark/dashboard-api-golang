// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new appliance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for appliance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkApplianceStaticRoute(params *CreateNetworkApplianceStaticRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkApplianceStaticRouteCreated, error)

	CreateNetworkApplianceTrafficShapingCustomPerformanceClass(params *CreateNetworkApplianceTrafficShapingCustomPerformanceClassParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkApplianceTrafficShapingCustomPerformanceClassCreated, error)

	CreateNetworkApplianceVlan(params *CreateNetworkApplianceVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkApplianceVlanCreated, error)

	DeleteNetworkApplianceStaticRoute(params *DeleteNetworkApplianceStaticRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkApplianceStaticRouteNoContent, error)

	DeleteNetworkApplianceTrafficShapingCustomPerformanceClass(params *DeleteNetworkApplianceTrafficShapingCustomPerformanceClassParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkApplianceTrafficShapingCustomPerformanceClassNoContent, error)

	DeleteNetworkApplianceVlan(params *DeleteNetworkApplianceVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkApplianceVlanNoContent, error)

	GetDeviceApplianceDhcpSubnets(params *GetDeviceApplianceDhcpSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceApplianceDhcpSubnetsOK, error)

	GetDeviceAppliancePerformance(params *GetDeviceAppliancePerformanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceAppliancePerformanceOK, error)

	GetNetworkApplianceClientSecurityEvents(params *GetNetworkApplianceClientSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceClientSecurityEventsOK, error)

	GetNetworkApplianceConnectivityMonitoringDestinations(params *GetNetworkApplianceConnectivityMonitoringDestinationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceConnectivityMonitoringDestinationsOK, error)

	GetNetworkApplianceContentFiltering(params *GetNetworkApplianceContentFilteringParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceContentFilteringOK, error)

	GetNetworkApplianceContentFilteringCategories(params *GetNetworkApplianceContentFilteringCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceContentFilteringCategoriesOK, error)

	GetNetworkApplianceFirewallCellularFirewallRules(params *GetNetworkApplianceFirewallCellularFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallCellularFirewallRulesOK, error)

	GetNetworkApplianceFirewallFirewalledService(params *GetNetworkApplianceFirewallFirewalledServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallFirewalledServiceOK, error)

	GetNetworkApplianceFirewallFirewalledServices(params *GetNetworkApplianceFirewallFirewalledServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallFirewalledServicesOK, error)

	GetNetworkApplianceFirewallInboundFirewallRules(params *GetNetworkApplianceFirewallInboundFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallInboundFirewallRulesOK, error)

	GetNetworkApplianceFirewallL3FirewallRules(params *GetNetworkApplianceFirewallL3FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallL3FirewallRulesOK, error)

	GetNetworkApplianceFirewallL7FirewallRules(params *GetNetworkApplianceFirewallL7FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallL7FirewallRulesOK, error)

	GetNetworkApplianceFirewallL7FirewallRulesApplicationCategories(params *GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesOK, error)

	GetNetworkApplianceFirewallOneToManyNatRules(params *GetNetworkApplianceFirewallOneToManyNatRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallOneToManyNatRulesOK, error)

	GetNetworkApplianceFirewallOneToOneNatRules(params *GetNetworkApplianceFirewallOneToOneNatRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallOneToOneNatRulesOK, error)

	GetNetworkApplianceFirewallPortForwardingRules(params *GetNetworkApplianceFirewallPortForwardingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallPortForwardingRulesOK, error)

	GetNetworkAppliancePort(params *GetNetworkAppliancePortParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkAppliancePortOK, error)

	GetNetworkAppliancePorts(params *GetNetworkAppliancePortsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkAppliancePortsOK, error)

	GetNetworkApplianceSecurityEvents(params *GetNetworkApplianceSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceSecurityEventsOK, error)

	GetNetworkApplianceSecurityIntrusion(params *GetNetworkApplianceSecurityIntrusionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceSecurityIntrusionOK, error)

	GetNetworkApplianceSecurityMalware(params *GetNetworkApplianceSecurityMalwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceSecurityMalwareOK, error)

	GetNetworkApplianceSettings(params *GetNetworkApplianceSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceSettingsOK, error)

	GetNetworkApplianceSingleLan(params *GetNetworkApplianceSingleLanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceSingleLanOK, error)

	GetNetworkApplianceStaticRoute(params *GetNetworkApplianceStaticRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceStaticRouteOK, error)

	GetNetworkApplianceStaticRoutes(params *GetNetworkApplianceStaticRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceStaticRoutesOK, error)

	GetNetworkApplianceTrafficShaping(params *GetNetworkApplianceTrafficShapingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingOK, error)

	GetNetworkApplianceTrafficShapingCustomPerformanceClass(params *GetNetworkApplianceTrafficShapingCustomPerformanceClassParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingCustomPerformanceClassOK, error)

	GetNetworkApplianceTrafficShapingCustomPerformanceClasses(params *GetNetworkApplianceTrafficShapingCustomPerformanceClassesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingCustomPerformanceClassesOK, error)

	GetNetworkApplianceTrafficShapingRules(params *GetNetworkApplianceTrafficShapingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingRulesOK, error)

	GetNetworkApplianceTrafficShapingUplinkBandwidth(params *GetNetworkApplianceTrafficShapingUplinkBandwidthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingUplinkBandwidthOK, error)

	GetNetworkApplianceTrafficShapingUplinkSelection(params *GetNetworkApplianceTrafficShapingUplinkSelectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingUplinkSelectionOK, error)

	GetNetworkApplianceUplinksUsageHistory(params *GetNetworkApplianceUplinksUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceUplinksUsageHistoryOK, error)

	GetNetworkApplianceVlan(params *GetNetworkApplianceVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceVlanOK, error)

	GetNetworkApplianceVlans(params *GetNetworkApplianceVlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceVlansOK, error)

	GetNetworkApplianceVlansSettings(params *GetNetworkApplianceVlansSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceVlansSettingsOK, error)

	GetNetworkApplianceVpnBgp(params *GetNetworkApplianceVpnBgpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceVpnBgpOK, error)

	GetNetworkApplianceVpnSiteToSiteVpn(params *GetNetworkApplianceVpnSiteToSiteVpnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceVpnSiteToSiteVpnOK, error)

	GetNetworkApplianceWarmSpare(params *GetNetworkApplianceWarmSpareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceWarmSpareOK, error)

	GetOrganizationApplianceSecurityEvents(params *GetOrganizationApplianceSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceSecurityEventsOK, error)

	GetOrganizationApplianceSecurityIntrusion(params *GetOrganizationApplianceSecurityIntrusionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceSecurityIntrusionOK, error)

	GetOrganizationApplianceUplinkStatuses(params *GetOrganizationApplianceUplinkStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceUplinkStatusesOK, error)

	GetOrganizationApplianceVpnStats(params *GetOrganizationApplianceVpnStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceVpnStatsOK, error)

	GetOrganizationApplianceVpnStatuses(params *GetOrganizationApplianceVpnStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceVpnStatusesOK, error)

	GetOrganizationApplianceVpnThirdPartyVPNPeers(params *GetOrganizationApplianceVpnThirdPartyVPNPeersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceVpnThirdPartyVPNPeersOK, error)

	GetOrganizationApplianceVpnVpnFirewallRules(params *GetOrganizationApplianceVpnVpnFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceVpnVpnFirewallRulesOK, error)

	SwapNetworkApplianceWarmSpare(params *SwapNetworkApplianceWarmSpareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SwapNetworkApplianceWarmSpareOK, error)

	UpdateNetworkApplianceConnectivityMonitoringDestinations(params *UpdateNetworkApplianceConnectivityMonitoringDestinationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceConnectivityMonitoringDestinationsOK, error)

	UpdateNetworkApplianceContentFiltering(params *UpdateNetworkApplianceContentFilteringParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceContentFilteringOK, error)

	UpdateNetworkApplianceFirewallCellularFirewallRules(params *UpdateNetworkApplianceFirewallCellularFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallCellularFirewallRulesOK, error)

	UpdateNetworkApplianceFirewallFirewalledService(params *UpdateNetworkApplianceFirewallFirewalledServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallFirewalledServiceOK, error)

	UpdateNetworkApplianceFirewallInboundFirewallRules(params *UpdateNetworkApplianceFirewallInboundFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallInboundFirewallRulesOK, error)

	UpdateNetworkApplianceFirewallL3FirewallRules(params *UpdateNetworkApplianceFirewallL3FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallL3FirewallRulesOK, error)

	UpdateNetworkApplianceFirewallL7FirewallRules(params *UpdateNetworkApplianceFirewallL7FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallL7FirewallRulesOK, error)

	UpdateNetworkApplianceFirewallOneToManyNatRules(params *UpdateNetworkApplianceFirewallOneToManyNatRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallOneToManyNatRulesOK, error)

	UpdateNetworkApplianceFirewallOneToOneNatRules(params *UpdateNetworkApplianceFirewallOneToOneNatRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallOneToOneNatRulesOK, error)

	UpdateNetworkApplianceFirewallPortForwardingRules(params *UpdateNetworkApplianceFirewallPortForwardingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallPortForwardingRulesOK, error)

	UpdateNetworkAppliancePort(params *UpdateNetworkAppliancePortParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkAppliancePortOK, error)

	UpdateNetworkApplianceSecurityIntrusion(params *UpdateNetworkApplianceSecurityIntrusionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceSecurityIntrusionOK, error)

	UpdateNetworkApplianceSecurityMalware(params *UpdateNetworkApplianceSecurityMalwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceSecurityMalwareOK, error)

	UpdateNetworkApplianceSingleLan(params *UpdateNetworkApplianceSingleLanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceSingleLanOK, error)

	UpdateNetworkApplianceStaticRoute(params *UpdateNetworkApplianceStaticRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceStaticRouteOK, error)

	UpdateNetworkApplianceTrafficShaping(params *UpdateNetworkApplianceTrafficShapingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceTrafficShapingOK, error)

	UpdateNetworkApplianceTrafficShapingCustomPerformanceClass(params *UpdateNetworkApplianceTrafficShapingCustomPerformanceClassParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceTrafficShapingCustomPerformanceClassOK, error)

	UpdateNetworkApplianceTrafficShapingRules(params *UpdateNetworkApplianceTrafficShapingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceTrafficShapingRulesOK, error)

	UpdateNetworkApplianceTrafficShapingUplinkBandwidth(params *UpdateNetworkApplianceTrafficShapingUplinkBandwidthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceTrafficShapingUplinkBandwidthOK, error)

	UpdateNetworkApplianceTrafficShapingUplinkSelection(params *UpdateNetworkApplianceTrafficShapingUplinkSelectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceTrafficShapingUplinkSelectionOK, error)

	UpdateNetworkApplianceVlan(params *UpdateNetworkApplianceVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceVlanOK, error)

	UpdateNetworkApplianceVlansSettings(params *UpdateNetworkApplianceVlansSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceVlansSettingsOK, error)

	UpdateNetworkApplianceVpnBgp(params *UpdateNetworkApplianceVpnBgpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceVpnBgpOK, error)

	UpdateNetworkApplianceVpnSiteToSiteVpn(params *UpdateNetworkApplianceVpnSiteToSiteVpnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceVpnSiteToSiteVpnOK, error)

	UpdateNetworkApplianceWarmSpare(params *UpdateNetworkApplianceWarmSpareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceWarmSpareOK, error)

	UpdateOrganizationApplianceSecurityIntrusion(params *UpdateOrganizationApplianceSecurityIntrusionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationApplianceSecurityIntrusionOK, error)

	UpdateOrganizationApplianceVpnThirdPartyVPNPeers(params *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationApplianceVpnThirdPartyVPNPeersOK, error)

	UpdateOrganizationApplianceVpnVpnFirewallRules(params *UpdateOrganizationApplianceVpnVpnFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationApplianceVpnVpnFirewallRulesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkApplianceStaticRoute adds a static route for an m x or teleworker network

  Add a static route for an MX or teleworker network
*/
func (a *Client) CreateNetworkApplianceStaticRoute(params *CreateNetworkApplianceStaticRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkApplianceStaticRouteCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkApplianceStaticRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkApplianceStaticRoute",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/appliance/staticRoutes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkApplianceStaticRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkApplianceStaticRouteCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkApplianceStaticRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkApplianceTrafficShapingCustomPerformanceClass adds a custom performance class for an m x network

  Add a custom performance class for an MX network
*/
func (a *Client) CreateNetworkApplianceTrafficShapingCustomPerformanceClass(params *CreateNetworkApplianceTrafficShapingCustomPerformanceClassParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkApplianceTrafficShapingCustomPerformanceClassCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkApplianceTrafficShapingCustomPerformanceClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkApplianceTrafficShapingCustomPerformanceClass",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkApplianceTrafficShapingCustomPerformanceClassReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkApplianceTrafficShapingCustomPerformanceClassCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkApplianceTrafficShapingCustomPerformanceClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkApplianceVlan adds a v l a n

  Add a VLAN
*/
func (a *Client) CreateNetworkApplianceVlan(params *CreateNetworkApplianceVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkApplianceVlanCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkApplianceVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkApplianceVlan",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/appliance/vlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkApplianceVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkApplianceVlanCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkApplianceVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkApplianceStaticRoute deletes a static route from an m x or teleworker network

  Delete a static route from an MX or teleworker network
*/
func (a *Client) DeleteNetworkApplianceStaticRoute(params *DeleteNetworkApplianceStaticRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkApplianceStaticRouteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkApplianceStaticRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkApplianceStaticRoute",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkApplianceStaticRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkApplianceStaticRouteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkApplianceStaticRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkApplianceTrafficShapingCustomPerformanceClass deletes a custom performance class from an m x network

  Delete a custom performance class from an MX network
*/
func (a *Client) DeleteNetworkApplianceTrafficShapingCustomPerformanceClass(params *DeleteNetworkApplianceTrafficShapingCustomPerformanceClassParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkApplianceTrafficShapingCustomPerformanceClassNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkApplianceTrafficShapingCustomPerformanceClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkApplianceTrafficShapingCustomPerformanceClass",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkApplianceTrafficShapingCustomPerformanceClassReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkApplianceTrafficShapingCustomPerformanceClassNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkApplianceTrafficShapingCustomPerformanceClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkApplianceVlan deletes a v l a n from a network

  Delete a VLAN from a network
*/
func (a *Client) DeleteNetworkApplianceVlan(params *DeleteNetworkApplianceVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkApplianceVlanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkApplianceVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkApplianceVlan",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/appliance/vlans/{vlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkApplianceVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkApplianceVlanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkApplianceVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceApplianceDhcpSubnets returns the d h c p subnet information for an appliance

  Return the DHCP subnet information for an appliance
*/
func (a *Client) GetDeviceApplianceDhcpSubnets(params *GetDeviceApplianceDhcpSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceApplianceDhcpSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceApplianceDhcpSubnetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceApplianceDhcpSubnets",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/appliance/dhcp/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceApplianceDhcpSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceApplianceDhcpSubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceApplianceDhcpSubnets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceAppliancePerformance returns the performance score for a single m x

  Return the performance score for a single MX. Only primary MX devices supported. If no data is available, a 204 error code is returned.
*/
func (a *Client) GetDeviceAppliancePerformance(params *GetDeviceAppliancePerformanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceAppliancePerformanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceAppliancePerformanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceAppliancePerformance",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/appliance/performance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceAppliancePerformanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceAppliancePerformanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceAppliancePerformance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceClientSecurityEvents lists the security events for a client

  List the security events for a client. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkApplianceClientSecurityEvents(params *GetNetworkApplianceClientSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceClientSecurityEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceClientSecurityEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceClientSecurityEvents",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/clients/{clientId}/security/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceClientSecurityEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceClientSecurityEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceClientSecurityEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceConnectivityMonitoringDestinations returns the connectivity testing destinations for an m x network

  Return the connectivity testing destinations for an MX network
*/
func (a *Client) GetNetworkApplianceConnectivityMonitoringDestinations(params *GetNetworkApplianceConnectivityMonitoringDestinationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceConnectivityMonitoringDestinationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceConnectivityMonitoringDestinationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceConnectivityMonitoringDestinations",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/connectivityMonitoringDestinations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceConnectivityMonitoringDestinationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceConnectivityMonitoringDestinationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceConnectivityMonitoringDestinations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceContentFiltering returns the content filtering settings for an m x network

  Return the content filtering settings for an MX network
*/
func (a *Client) GetNetworkApplianceContentFiltering(params *GetNetworkApplianceContentFilteringParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceContentFilteringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceContentFilteringParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceContentFiltering",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/contentFiltering",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceContentFilteringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceContentFilteringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceContentFiltering: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceContentFilteringCategories lists all available content filtering categories for an m x network

  List all available content filtering categories for an MX network
*/
func (a *Client) GetNetworkApplianceContentFilteringCategories(params *GetNetworkApplianceContentFilteringCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceContentFilteringCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceContentFilteringCategoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceContentFilteringCategories",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/contentFiltering/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceContentFilteringCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceContentFilteringCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceContentFilteringCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceFirewallCellularFirewallRules returns the cellular firewall rules for an m x network

  Return the cellular firewall rules for an MX network
*/
func (a *Client) GetNetworkApplianceFirewallCellularFirewallRules(params *GetNetworkApplianceFirewallCellularFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallCellularFirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceFirewallCellularFirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceFirewallCellularFirewallRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/firewall/cellularFirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceFirewallCellularFirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceFirewallCellularFirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceFirewallCellularFirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceFirewallFirewalledService returns the accessibility settings of the given service i c m p web or s n m p

  Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
*/
func (a *Client) GetNetworkApplianceFirewallFirewalledService(params *GetNetworkApplianceFirewallFirewalledServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallFirewalledServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceFirewallFirewalledServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceFirewallFirewalledService",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/firewall/firewalledServices/{service}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceFirewallFirewalledServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceFirewallFirewalledServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceFirewallFirewalledService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceFirewallFirewalledServices lists the appliance services and their accessibility rules

  List the appliance services and their accessibility rules
*/
func (a *Client) GetNetworkApplianceFirewallFirewalledServices(params *GetNetworkApplianceFirewallFirewalledServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallFirewalledServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceFirewallFirewalledServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceFirewallFirewalledServices",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/firewall/firewalledServices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceFirewallFirewalledServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceFirewallFirewalledServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceFirewallFirewalledServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceFirewallInboundFirewallRules returns the inbound firewall rules for an m x network

  Return the inbound firewall rules for an MX network
*/
func (a *Client) GetNetworkApplianceFirewallInboundFirewallRules(params *GetNetworkApplianceFirewallInboundFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallInboundFirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceFirewallInboundFirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceFirewallInboundFirewallRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/firewall/inboundFirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceFirewallInboundFirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceFirewallInboundFirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceFirewallInboundFirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceFirewallL3FirewallRules returns the l3 firewall rules for an m x network

  Return the L3 firewall rules for an MX network
*/
func (a *Client) GetNetworkApplianceFirewallL3FirewallRules(params *GetNetworkApplianceFirewallL3FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallL3FirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceFirewallL3FirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceFirewallL3FirewallRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/firewall/l3FirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceFirewallL3FirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceFirewallL3FirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceFirewallL3FirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceFirewallL7FirewallRules lists the m x l7 firewall rules for an m x network

  List the MX L7 firewall rules for an MX network
*/
func (a *Client) GetNetworkApplianceFirewallL7FirewallRules(params *GetNetworkApplianceFirewallL7FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallL7FirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceFirewallL7FirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceFirewallL7FirewallRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/firewall/l7FirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceFirewallL7FirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceFirewallL7FirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceFirewallL7FirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceFirewallL7FirewallRulesApplicationCategories returns the l7 firewall application categories and their associated applications for an m x network

  Return the L7 firewall application categories and their associated applications for an MX network
*/
func (a *Client) GetNetworkApplianceFirewallL7FirewallRulesApplicationCategories(params *GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceFirewallL7FirewallRulesApplicationCategories",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/firewall/l7FirewallRules/applicationCategories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceFirewallL7FirewallRulesApplicationCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceFirewallOneToManyNatRules returns the 1 many n a t mapping rules for an m x network

  Return the 1:Many NAT mapping rules for an MX network
*/
func (a *Client) GetNetworkApplianceFirewallOneToManyNatRules(params *GetNetworkApplianceFirewallOneToManyNatRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallOneToManyNatRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceFirewallOneToManyNatRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceFirewallOneToManyNatRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/firewall/oneToManyNatRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceFirewallOneToManyNatRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceFirewallOneToManyNatRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceFirewallOneToManyNatRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceFirewallOneToOneNatRules returns the 1 1 n a t mapping rules for an m x network

  Return the 1:1 NAT mapping rules for an MX network
*/
func (a *Client) GetNetworkApplianceFirewallOneToOneNatRules(params *GetNetworkApplianceFirewallOneToOneNatRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallOneToOneNatRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceFirewallOneToOneNatRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceFirewallOneToOneNatRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/firewall/oneToOneNatRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceFirewallOneToOneNatRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceFirewallOneToOneNatRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceFirewallOneToOneNatRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceFirewallPortForwardingRules returns the port forwarding rules for an m x network

  Return the port forwarding rules for an MX network
*/
func (a *Client) GetNetworkApplianceFirewallPortForwardingRules(params *GetNetworkApplianceFirewallPortForwardingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceFirewallPortForwardingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceFirewallPortForwardingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceFirewallPortForwardingRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/firewall/portForwardingRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceFirewallPortForwardingRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceFirewallPortForwardingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceFirewallPortForwardingRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkAppliancePort returns per port v l a n settings for a single m x port

  Return per-port VLAN settings for a single MX port.
*/
func (a *Client) GetNetworkAppliancePort(params *GetNetworkAppliancePortParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkAppliancePortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkAppliancePortParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkAppliancePort",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/ports/{portId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkAppliancePortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkAppliancePortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkAppliancePort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkAppliancePorts lists per port v l a n settings for all ports of a m x

  List per-port VLAN settings for all ports of a MX.
*/
func (a *Client) GetNetworkAppliancePorts(params *GetNetworkAppliancePortsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkAppliancePortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkAppliancePortsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkAppliancePorts",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/ports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkAppliancePortsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkAppliancePortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkAppliancePorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceSecurityEvents lists the security events for a network

  List the security events for a network
*/
func (a *Client) GetNetworkApplianceSecurityEvents(params *GetNetworkApplianceSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceSecurityEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceSecurityEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceSecurityEvents",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/security/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceSecurityEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceSecurityEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceSecurityEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceSecurityIntrusion returns all supported intrusion settings for an m x network

  Returns all supported intrusion settings for an MX network
*/
func (a *Client) GetNetworkApplianceSecurityIntrusion(params *GetNetworkApplianceSecurityIntrusionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceSecurityIntrusionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceSecurityIntrusionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceSecurityIntrusion",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/security/intrusion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceSecurityIntrusionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceSecurityIntrusionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceSecurityIntrusion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceSecurityMalware returns all supported malware settings for an m x network

  Returns all supported malware settings for an MX network
*/
func (a *Client) GetNetworkApplianceSecurityMalware(params *GetNetworkApplianceSecurityMalwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceSecurityMalwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceSecurityMalwareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceSecurityMalware",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/security/malware",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceSecurityMalwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceSecurityMalwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceSecurityMalware: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceSettings returns the appliance settings for a network

  Return the appliance settings for a network
*/
func (a *Client) GetNetworkApplianceSettings(params *GetNetworkApplianceSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceSingleLan returns single l a n configuration

  Return single LAN configuration
*/
func (a *Client) GetNetworkApplianceSingleLan(params *GetNetworkApplianceSingleLanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceSingleLanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceSingleLanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceSingleLan",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/singleLan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceSingleLanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceSingleLanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceSingleLan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceStaticRoute returns a static route for an m x or teleworker network

  Return a static route for an MX or teleworker network
*/
func (a *Client) GetNetworkApplianceStaticRoute(params *GetNetworkApplianceStaticRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceStaticRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceStaticRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceStaticRoute",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceStaticRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceStaticRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceStaticRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceStaticRoutes lists the static routes for an m x or teleworker network

  List the static routes for an MX or teleworker network
*/
func (a *Client) GetNetworkApplianceStaticRoutes(params *GetNetworkApplianceStaticRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceStaticRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceStaticRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceStaticRoutes",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/staticRoutes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceStaticRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceStaticRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceStaticRoutes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceTrafficShaping displays the traffic shaping settings for an m x network

  Display the traffic shaping settings for an MX network
*/
func (a *Client) GetNetworkApplianceTrafficShaping(params *GetNetworkApplianceTrafficShapingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceTrafficShapingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceTrafficShaping",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceTrafficShapingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceTrafficShapingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceTrafficShaping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceTrafficShapingCustomPerformanceClass returns a custom performance class for an m x network

  Return a custom performance class for an MX network
*/
func (a *Client) GetNetworkApplianceTrafficShapingCustomPerformanceClass(params *GetNetworkApplianceTrafficShapingCustomPerformanceClassParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingCustomPerformanceClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceTrafficShapingCustomPerformanceClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceTrafficShapingCustomPerformanceClass",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceTrafficShapingCustomPerformanceClassReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceTrafficShapingCustomPerformanceClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceTrafficShapingCustomPerformanceClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceTrafficShapingCustomPerformanceClasses lists all custom performance classes for an m x network

  List all custom performance classes for an MX network
*/
func (a *Client) GetNetworkApplianceTrafficShapingCustomPerformanceClasses(params *GetNetworkApplianceTrafficShapingCustomPerformanceClassesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingCustomPerformanceClassesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceTrafficShapingCustomPerformanceClassesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceTrafficShapingCustomPerformanceClasses",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceTrafficShapingCustomPerformanceClassesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceTrafficShapingCustomPerformanceClassesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceTrafficShapingCustomPerformanceClasses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceTrafficShapingRules displays the traffic shaping settings rules for an m x network

  Display the traffic shaping settings rules for an MX network
*/
func (a *Client) GetNetworkApplianceTrafficShapingRules(params *GetNetworkApplianceTrafficShapingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceTrafficShapingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceTrafficShapingRules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceTrafficShapingRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceTrafficShapingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceTrafficShapingRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceTrafficShapingUplinkBandwidth returns the uplink bandwidth settings for your m x network

  Returns the uplink bandwidth settings for your MX network.
*/
func (a *Client) GetNetworkApplianceTrafficShapingUplinkBandwidth(params *GetNetworkApplianceTrafficShapingUplinkBandwidthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingUplinkBandwidthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceTrafficShapingUplinkBandwidthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceTrafficShapingUplinkBandwidth",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceTrafficShapingUplinkBandwidthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceTrafficShapingUplinkBandwidthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceTrafficShapingUplinkBandwidth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceTrafficShapingUplinkSelection shows uplink selection settings for an m x network

  Show uplink selection settings for an MX network
*/
func (a *Client) GetNetworkApplianceTrafficShapingUplinkSelection(params *GetNetworkApplianceTrafficShapingUplinkSelectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceTrafficShapingUplinkSelectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceTrafficShapingUplinkSelectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceTrafficShapingUplinkSelection",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping/uplinkSelection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceTrafficShapingUplinkSelectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceTrafficShapingUplinkSelectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceTrafficShapingUplinkSelection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceUplinksUsageHistory gets the sent and received bytes for each uplink of a network

  Get the sent and received bytes for each uplink of a network.
*/
func (a *Client) GetNetworkApplianceUplinksUsageHistory(params *GetNetworkApplianceUplinksUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceUplinksUsageHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceUplinksUsageHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceUplinksUsageHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/uplinks/usageHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceUplinksUsageHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceUplinksUsageHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceUplinksUsageHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceVlan returns a v l a n

  Return a VLAN
*/
func (a *Client) GetNetworkApplianceVlan(params *GetNetworkApplianceVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceVlan",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/vlans/{vlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceVlans lists the v l a ns for an m x network

  List the VLANs for an MX network
*/
func (a *Client) GetNetworkApplianceVlans(params *GetNetworkApplianceVlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceVlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceVlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceVlans",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/vlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceVlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceVlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceVlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceVlansSettings returns the enabled status of v l a ns for the network

  Returns the enabled status of VLANs for the network
*/
func (a *Client) GetNetworkApplianceVlansSettings(params *GetNetworkApplianceVlansSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceVlansSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceVlansSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceVlansSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/vlans/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceVlansSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceVlansSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceVlansSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceVpnBgp returns a hub b g p configuration

  Return a Hub BGP Configuration
*/
func (a *Client) GetNetworkApplianceVpnBgp(params *GetNetworkApplianceVpnBgpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceVpnBgpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceVpnBgpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceVpnBgp",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/vpn/bgp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceVpnBgpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceVpnBgpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceVpnBgp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceVpnSiteToSiteVpn returns the site to site v p n settings of a network

  Return the site-to-site VPN settings of a network. Only valid for MX networks.
*/
func (a *Client) GetNetworkApplianceVpnSiteToSiteVpn(params *GetNetworkApplianceVpnSiteToSiteVpnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceVpnSiteToSiteVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceVpnSiteToSiteVpnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceVpnSiteToSiteVpn",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/vpn/siteToSiteVpn",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceVpnSiteToSiteVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceVpnSiteToSiteVpnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceVpnSiteToSiteVpn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkApplianceWarmSpare returns m x warm spare settings

  Return MX warm spare settings
*/
func (a *Client) GetNetworkApplianceWarmSpare(params *GetNetworkApplianceWarmSpareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkApplianceWarmSpareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkApplianceWarmSpareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkApplianceWarmSpare",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/appliance/warmSpare",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkApplianceWarmSpareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkApplianceWarmSpareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkApplianceWarmSpare: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationApplianceSecurityEvents lists the security events for an organization

  List the security events for an organization
*/
func (a *Client) GetOrganizationApplianceSecurityEvents(params *GetOrganizationApplianceSecurityEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceSecurityEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationApplianceSecurityEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationApplianceSecurityEvents",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/appliance/security/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationApplianceSecurityEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationApplianceSecurityEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationApplianceSecurityEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationApplianceSecurityIntrusion returns all supported intrusion settings for an organization

  Returns all supported intrusion settings for an organization
*/
func (a *Client) GetOrganizationApplianceSecurityIntrusion(params *GetOrganizationApplianceSecurityIntrusionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceSecurityIntrusionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationApplianceSecurityIntrusionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationApplianceSecurityIntrusion",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/appliance/security/intrusion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationApplianceSecurityIntrusionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationApplianceSecurityIntrusionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationApplianceSecurityIntrusion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationApplianceUplinkStatuses lists the uplink status of every meraki m x and z series appliances in the organization

  List the uplink status of every Meraki MX and Z series appliances in the organization
*/
func (a *Client) GetOrganizationApplianceUplinkStatuses(params *GetOrganizationApplianceUplinkStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceUplinkStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationApplianceUplinkStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationApplianceUplinkStatuses",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/appliance/uplink/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationApplianceUplinkStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationApplianceUplinkStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationApplianceUplinkStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationApplianceVpnStats shows v p n history stat for networks in an organization

  Show VPN history stat for networks in an organization
*/
func (a *Client) GetOrganizationApplianceVpnStats(params *GetOrganizationApplianceVpnStatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceVpnStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationApplianceVpnStatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationApplianceVpnStats",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/appliance/vpn/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationApplianceVpnStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationApplianceVpnStatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationApplianceVpnStats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationApplianceVpnStatuses shows v p n status for networks in an organization

  Show VPN status for networks in an organization
*/
func (a *Client) GetOrganizationApplianceVpnStatuses(params *GetOrganizationApplianceVpnStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceVpnStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationApplianceVpnStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationApplianceVpnStatuses",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/appliance/vpn/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationApplianceVpnStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationApplianceVpnStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationApplianceVpnStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationApplianceVpnThirdPartyVPNPeers returns the third party v p n peers for an organization

  Return the third party VPN peers for an organization
*/
func (a *Client) GetOrganizationApplianceVpnThirdPartyVPNPeers(params *GetOrganizationApplianceVpnThirdPartyVPNPeersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceVpnThirdPartyVPNPeersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationApplianceVpnThirdPartyVPNPeersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationApplianceVpnThirdPartyVPNPeers",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationApplianceVpnThirdPartyVPNPeersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationApplianceVpnThirdPartyVPNPeersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationApplianceVpnThirdPartyVPNPeers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationApplianceVpnVpnFirewallRules returns the firewall rules for an organization s site to site v p n

  Return the firewall rules for an organization's site-to-site VPN
*/
func (a *Client) GetOrganizationApplianceVpnVpnFirewallRules(params *GetOrganizationApplianceVpnVpnFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationApplianceVpnVpnFirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationApplianceVpnVpnFirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationApplianceVpnVpnFirewallRules",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/appliance/vpn/vpnFirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationApplianceVpnVpnFirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationApplianceVpnVpnFirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationApplianceVpnVpnFirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SwapNetworkApplianceWarmSpare swaps m x primary and warm spare appliances

  Swap MX primary and warm spare appliances
*/
func (a *Client) SwapNetworkApplianceWarmSpare(params *SwapNetworkApplianceWarmSpareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SwapNetworkApplianceWarmSpareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSwapNetworkApplianceWarmSpareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "swapNetworkApplianceWarmSpare",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/appliance/warmSpare/swap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SwapNetworkApplianceWarmSpareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SwapNetworkApplianceWarmSpareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for swapNetworkApplianceWarmSpare: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceConnectivityMonitoringDestinations updates the connectivity testing destinations for an m x network

  Update the connectivity testing destinations for an MX network
*/
func (a *Client) UpdateNetworkApplianceConnectivityMonitoringDestinations(params *UpdateNetworkApplianceConnectivityMonitoringDestinationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceConnectivityMonitoringDestinationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceConnectivityMonitoringDestinationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceConnectivityMonitoringDestinations",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/connectivityMonitoringDestinations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceConnectivityMonitoringDestinationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceConnectivityMonitoringDestinationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceConnectivityMonitoringDestinations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceContentFiltering updates the content filtering settings for an m x network

  Update the content filtering settings for an MX network
*/
func (a *Client) UpdateNetworkApplianceContentFiltering(params *UpdateNetworkApplianceContentFilteringParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceContentFilteringOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceContentFilteringParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceContentFiltering",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/contentFiltering",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceContentFilteringReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceContentFilteringOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceContentFiltering: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceFirewallCellularFirewallRules updates the cellular firewall rules of an m x network

  Update the cellular firewall rules of an MX network
*/
func (a *Client) UpdateNetworkApplianceFirewallCellularFirewallRules(params *UpdateNetworkApplianceFirewallCellularFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallCellularFirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceFirewallCellularFirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceFirewallCellularFirewallRules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/firewall/cellularFirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceFirewallCellularFirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceFirewallCellularFirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceFirewallCellularFirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceFirewallFirewalledService updates the accessibility settings for the given service i c m p web or s n m p

  Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
*/
func (a *Client) UpdateNetworkApplianceFirewallFirewalledService(params *UpdateNetworkApplianceFirewallFirewalledServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallFirewalledServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceFirewallFirewalledServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceFirewallFirewalledService",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/firewall/firewalledServices/{service}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceFirewallFirewalledServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceFirewallFirewalledServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceFirewallFirewalledService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceFirewallInboundFirewallRules updates the inbound firewall rules of an m x network

  Update the inbound firewall rules of an MX network
*/
func (a *Client) UpdateNetworkApplianceFirewallInboundFirewallRules(params *UpdateNetworkApplianceFirewallInboundFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallInboundFirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceFirewallInboundFirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceFirewallInboundFirewallRules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/firewall/inboundFirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceFirewallInboundFirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceFirewallInboundFirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceFirewallInboundFirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceFirewallL3FirewallRules updates the l3 firewall rules of an m x network

  Update the L3 firewall rules of an MX network
*/
func (a *Client) UpdateNetworkApplianceFirewallL3FirewallRules(params *UpdateNetworkApplianceFirewallL3FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallL3FirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceFirewallL3FirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceFirewallL3FirewallRules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/firewall/l3FirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceFirewallL3FirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceFirewallL3FirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceFirewallL3FirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceFirewallL7FirewallRules updates the m x l7 firewall rules for an m x network

  Update the MX L7 firewall rules for an MX network
*/
func (a *Client) UpdateNetworkApplianceFirewallL7FirewallRules(params *UpdateNetworkApplianceFirewallL7FirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallL7FirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceFirewallL7FirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceFirewallL7FirewallRules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/firewall/l7FirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceFirewallL7FirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceFirewallL7FirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceFirewallL7FirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceFirewallOneToManyNatRules sets the 1 many n a t mapping rules for an m x network

  Set the 1:Many NAT mapping rules for an MX network
*/
func (a *Client) UpdateNetworkApplianceFirewallOneToManyNatRules(params *UpdateNetworkApplianceFirewallOneToManyNatRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallOneToManyNatRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceFirewallOneToManyNatRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceFirewallOneToManyNatRules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/firewall/oneToManyNatRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceFirewallOneToManyNatRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceFirewallOneToManyNatRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceFirewallOneToManyNatRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceFirewallOneToOneNatRules sets the 1 1 n a t mapping rules for an m x network

  Set the 1:1 NAT mapping rules for an MX network
*/
func (a *Client) UpdateNetworkApplianceFirewallOneToOneNatRules(params *UpdateNetworkApplianceFirewallOneToOneNatRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallOneToOneNatRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceFirewallOneToOneNatRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceFirewallOneToOneNatRules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/firewall/oneToOneNatRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceFirewallOneToOneNatRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceFirewallOneToOneNatRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceFirewallOneToOneNatRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceFirewallPortForwardingRules updates the port forwarding rules for an m x network

  Update the port forwarding rules for an MX network
*/
func (a *Client) UpdateNetworkApplianceFirewallPortForwardingRules(params *UpdateNetworkApplianceFirewallPortForwardingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceFirewallPortForwardingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceFirewallPortForwardingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceFirewallPortForwardingRules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/firewall/portForwardingRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceFirewallPortForwardingRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceFirewallPortForwardingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceFirewallPortForwardingRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkAppliancePort updates the per port v l a n settings for a single m x port

  Update the per-port VLAN settings for a single MX port.
*/
func (a *Client) UpdateNetworkAppliancePort(params *UpdateNetworkAppliancePortParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkAppliancePortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkAppliancePortParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkAppliancePort",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/ports/{portId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkAppliancePortReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkAppliancePortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkAppliancePort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceSecurityIntrusion sets the supported intrusion settings for an m x network

  Set the supported intrusion settings for an MX network
*/
func (a *Client) UpdateNetworkApplianceSecurityIntrusion(params *UpdateNetworkApplianceSecurityIntrusionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceSecurityIntrusionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceSecurityIntrusionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceSecurityIntrusion",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/security/intrusion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceSecurityIntrusionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceSecurityIntrusionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceSecurityIntrusion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceSecurityMalware sets the supported malware settings for an m x network

  Set the supported malware settings for an MX network
*/
func (a *Client) UpdateNetworkApplianceSecurityMalware(params *UpdateNetworkApplianceSecurityMalwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceSecurityMalwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceSecurityMalwareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceSecurityMalware",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/security/malware",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceSecurityMalwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceSecurityMalwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceSecurityMalware: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceSingleLan updates single l a n configuration

  Update single LAN configuration
*/
func (a *Client) UpdateNetworkApplianceSingleLan(params *UpdateNetworkApplianceSingleLanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceSingleLanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceSingleLanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceSingleLan",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/singleLan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceSingleLanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceSingleLanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceSingleLan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceStaticRoute updates a static route for an m x or teleworker network

  Update a static route for an MX or teleworker network
*/
func (a *Client) UpdateNetworkApplianceStaticRoute(params *UpdateNetworkApplianceStaticRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceStaticRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceStaticRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceStaticRoute",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/staticRoutes/{staticRouteId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceStaticRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceStaticRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceStaticRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceTrafficShaping updates the traffic shaping settings for an m x network

  Update the traffic shaping settings for an MX network
*/
func (a *Client) UpdateNetworkApplianceTrafficShaping(params *UpdateNetworkApplianceTrafficShapingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceTrafficShapingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceTrafficShapingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceTrafficShaping",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceTrafficShapingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceTrafficShapingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceTrafficShaping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceTrafficShapingCustomPerformanceClass updates a custom performance class for an m x network

  Update a custom performance class for an MX network
*/
func (a *Client) UpdateNetworkApplianceTrafficShapingCustomPerformanceClass(params *UpdateNetworkApplianceTrafficShapingCustomPerformanceClassParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceTrafficShapingCustomPerformanceClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceTrafficShapingCustomPerformanceClassParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceTrafficShapingCustomPerformanceClass",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping/customPerformanceClasses/{customPerformanceClassId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceTrafficShapingCustomPerformanceClassReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceTrafficShapingCustomPerformanceClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceTrafficShapingCustomPerformanceClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceTrafficShapingRules updates the traffic shaping settings rules for an m x network

  Update the traffic shaping settings rules for an MX network
*/
func (a *Client) UpdateNetworkApplianceTrafficShapingRules(params *UpdateNetworkApplianceTrafficShapingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceTrafficShapingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceTrafficShapingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceTrafficShapingRules",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceTrafficShapingRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceTrafficShapingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceTrafficShapingRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceTrafficShapingUplinkBandwidth updates the uplink bandwidth settings for your m x network

  Updates the uplink bandwidth settings for your MX network.
*/
func (a *Client) UpdateNetworkApplianceTrafficShapingUplinkBandwidth(params *UpdateNetworkApplianceTrafficShapingUplinkBandwidthParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceTrafficShapingUplinkBandwidthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceTrafficShapingUplinkBandwidthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceTrafficShapingUplinkBandwidth",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping/uplinkBandwidth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceTrafficShapingUplinkBandwidthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceTrafficShapingUplinkBandwidthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceTrafficShapingUplinkBandwidth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceTrafficShapingUplinkSelection updates uplink selection settings for an m x network

  Update uplink selection settings for an MX network
*/
func (a *Client) UpdateNetworkApplianceTrafficShapingUplinkSelection(params *UpdateNetworkApplianceTrafficShapingUplinkSelectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceTrafficShapingUplinkSelectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceTrafficShapingUplinkSelectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceTrafficShapingUplinkSelection",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/trafficShaping/uplinkSelection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceTrafficShapingUplinkSelectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceTrafficShapingUplinkSelectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceTrafficShapingUplinkSelection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceVlan updates a v l a n

  Update a VLAN
*/
func (a *Client) UpdateNetworkApplianceVlan(params *UpdateNetworkApplianceVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceVlan",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/vlans/{vlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceVlansSettings enables disable v l a ns for the given network

  Enable/Disable VLANs for the given network
*/
func (a *Client) UpdateNetworkApplianceVlansSettings(params *UpdateNetworkApplianceVlansSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceVlansSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceVlansSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceVlansSettings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/vlans/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceVlansSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceVlansSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceVlansSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceVpnBgp updates a hub b g p configuration

  Update a Hub BGP Configuration
*/
func (a *Client) UpdateNetworkApplianceVpnBgp(params *UpdateNetworkApplianceVpnBgpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceVpnBgpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceVpnBgpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceVpnBgp",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/vpn/bgp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceVpnBgpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceVpnBgpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceVpnBgp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceVpnSiteToSiteVpn updates the site to site v p n settings of a network

  Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
*/
func (a *Client) UpdateNetworkApplianceVpnSiteToSiteVpn(params *UpdateNetworkApplianceVpnSiteToSiteVpnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceVpnSiteToSiteVpnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceVpnSiteToSiteVpnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceVpnSiteToSiteVpn",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/vpn/siteToSiteVpn",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceVpnSiteToSiteVpnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceVpnSiteToSiteVpnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceVpnSiteToSiteVpn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkApplianceWarmSpare updates m x warm spare settings

  Update MX warm spare settings
*/
func (a *Client) UpdateNetworkApplianceWarmSpare(params *UpdateNetworkApplianceWarmSpareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkApplianceWarmSpareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkApplianceWarmSpareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkApplianceWarmSpare",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/appliance/warmSpare",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkApplianceWarmSpareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkApplianceWarmSpareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkApplianceWarmSpare: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationApplianceSecurityIntrusion sets supported intrusion settings for an organization

  Sets supported intrusion settings for an organization
*/
func (a *Client) UpdateOrganizationApplianceSecurityIntrusion(params *UpdateOrganizationApplianceSecurityIntrusionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationApplianceSecurityIntrusionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationApplianceSecurityIntrusionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationApplianceSecurityIntrusion",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/appliance/security/intrusion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationApplianceSecurityIntrusionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationApplianceSecurityIntrusionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationApplianceSecurityIntrusion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationApplianceVpnThirdPartyVPNPeers updates the third party v p n peers for an organization

  Update the third party VPN peers for an organization
*/
func (a *Client) UpdateOrganizationApplianceVpnThirdPartyVPNPeers(params *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationApplianceVpnThirdPartyVPNPeersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationApplianceVpnThirdPartyVPNPeersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationApplianceVpnThirdPartyVPNPeers",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationApplianceVpnThirdPartyVPNPeersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationApplianceVpnThirdPartyVPNPeersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationApplianceVpnThirdPartyVPNPeers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationApplianceVpnVpnFirewallRules updates the firewall rules of an organization s site to site v p n

  Update the firewall rules of an organization's site-to-site VPN
*/
func (a *Client) UpdateOrganizationApplianceVpnVpnFirewallRules(params *UpdateOrganizationApplianceVpnVpnFirewallRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationApplianceVpnVpnFirewallRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationApplianceVpnVpnFirewallRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationApplianceVpnVpnFirewallRules",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/appliance/vpn/vpnFirewallRules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationApplianceVpnVpnFirewallRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationApplianceVpnVpnFirewallRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationApplianceVpnVpnFirewallRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
