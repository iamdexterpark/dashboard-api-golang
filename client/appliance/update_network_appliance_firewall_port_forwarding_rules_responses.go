// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkApplianceFirewallPortForwardingRulesReader is a Reader for the UpdateNetworkApplianceFirewallPortForwardingRules structure.
type UpdateNetworkApplianceFirewallPortForwardingRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkApplianceFirewallPortForwardingRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkApplianceFirewallPortForwardingRulesOK creates a UpdateNetworkApplianceFirewallPortForwardingRulesOK with default headers values
func NewUpdateNetworkApplianceFirewallPortForwardingRulesOK() *UpdateNetworkApplianceFirewallPortForwardingRulesOK {
	return &UpdateNetworkApplianceFirewallPortForwardingRulesOK{}
}

/* UpdateNetworkApplianceFirewallPortForwardingRulesOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkApplianceFirewallPortForwardingRulesOK struct {
	Payload interface{}
}

func (o *UpdateNetworkApplianceFirewallPortForwardingRulesOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/firewall/portForwardingRules][%d] updateNetworkApplianceFirewallPortForwardingRulesOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkApplianceFirewallPortForwardingRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkApplianceFirewallPortForwardingRulesBody update network appliance firewall port forwarding rules body
// Example: {"rules":[{"allowedIps":["any"],"lanIp":"192.168.128.1","localPort":"442-443","name":"Description of Port Forwarding Rule","protocol":"tcp","publicPort":"8100-8101","uplink":"both"}]}
swagger:model UpdateNetworkApplianceFirewallPortForwardingRulesBody
*/
type UpdateNetworkApplianceFirewallPortForwardingRulesBody struct {

	// An array of port forwarding params
	// Required: true
	Rules []*UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0 `json:"rules"`
}

// Validate validates this update network appliance firewall port forwarding rules body
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceFirewallPortForwardingRulesBody) validateRules(formats strfmt.Registry) error {

	if err := validate.Required("updateNetworkApplianceFirewallPortForwardingRules"+"."+"rules", "body", o.Rules); err != nil {
		return err
	}

	for i := 0; i < len(o.Rules); i++ {
		if swag.IsZero(o.Rules[i]) { // not required
			continue
		}

		if o.Rules[i] != nil {
			if err := o.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceFirewallPortForwardingRules" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceFirewallPortForwardingRules" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network appliance firewall port forwarding rules body based on the context it is used
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceFirewallPortForwardingRulesBody) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Rules); i++ {

		if o.Rules[i] != nil {
			if err := o.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceFirewallPortForwardingRules" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceFirewallPortForwardingRules" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceFirewallPortForwardingRulesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0 update network appliance firewall port forwarding rules params body rules items0
swagger:model UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0
*/
type UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0 struct {

	// An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges (or any)
	// Required: true
	AllowedIps []string `json:"allowedIps"`

	// The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
	// Required: true
	LanIP *string `json:"lanIp"`

	// A port or port ranges that will receive the forwarded traffic from the WAN
	// Required: true
	LocalPort *string `json:"localPort"`

	// A descriptive name for the rule
	Name string `json:"name,omitempty"`

	// TCP or UDP
	// Required: true
	// Enum: [tcp udp]
	Protocol *string `json:"protocol"`

	// A port or port ranges that will be forwarded to the host on the LAN
	// Required: true
	PublicPort *string `json:"publicPort"`

	// The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2' or 'both')
	// Enum: [internet1 internet2 both]
	Uplink string `json:"uplink,omitempty"`
}

// Validate validates this update network appliance firewall port forwarding rules params body rules items0
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAllowedIps(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLanIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocalPort(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicPort(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUplink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) validateAllowedIps(formats strfmt.Registry) error {

	if err := validate.Required("allowedIps", "body", o.AllowedIps); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) validateLanIP(formats strfmt.Registry) error {

	if err := validate.Required("lanIp", "body", o.LanIP); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) validateLocalPort(formats strfmt.Registry) error {

	if err := validate.Required("localPort", "body", o.LocalPort); err != nil {
		return err
	}

	return nil
}

var updateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0TypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tcp","udp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0TypeProtocolPropEnum = append(updateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0TypeProtocolPropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0ProtocolTCP captures enum value "tcp"
	UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0ProtocolTCP string = "tcp"

	// UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0ProtocolUDP captures enum value "udp"
	UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0ProtocolUDP string = "udp"
)

// prop value enum
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0TypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", o.Protocol); err != nil {
		return err
	}

	// value enum
	if err := o.validateProtocolEnum("protocol", "body", *o.Protocol); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) validatePublicPort(formats strfmt.Registry) error {

	if err := validate.Required("publicPort", "body", o.PublicPort); err != nil {
		return err
	}

	return nil
}

var updateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0TypeUplinkPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["internet1","internet2","both"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0TypeUplinkPropEnum = append(updateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0TypeUplinkPropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0UplinkInternet1 captures enum value "internet1"
	UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0UplinkInternet1 string = "internet1"

	// UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0UplinkInternet2 captures enum value "internet2"
	UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0UplinkInternet2 string = "internet2"

	// UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0UplinkBoth captures enum value "both"
	UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0UplinkBoth string = "both"
)

// prop value enum
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) validateUplinkEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0TypeUplinkPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) validateUplink(formats strfmt.Registry) error {
	if swag.IsZero(o.Uplink) { // not required
		return nil
	}

	// value enum
	if err := o.validateUplinkEnum("uplink", "body", o.Uplink); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network appliance firewall port forwarding rules params body rules items0 based on context it is used
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceFirewallPortForwardingRulesParamsBodyRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
