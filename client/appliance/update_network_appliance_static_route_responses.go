// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkApplianceStaticRouteReader is a Reader for the UpdateNetworkApplianceStaticRoute structure.
type UpdateNetworkApplianceStaticRouteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkApplianceStaticRouteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkApplianceStaticRouteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkApplianceStaticRouteOK creates a UpdateNetworkApplianceStaticRouteOK with default headers values
func NewUpdateNetworkApplianceStaticRouteOK() *UpdateNetworkApplianceStaticRouteOK {
	return &UpdateNetworkApplianceStaticRouteOK{}
}

/* UpdateNetworkApplianceStaticRouteOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkApplianceStaticRouteOK struct {
	Payload interface{}
}

func (o *UpdateNetworkApplianceStaticRouteOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/staticRoutes/{staticRouteId}][%d] updateNetworkApplianceStaticRouteOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkApplianceStaticRouteOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkApplianceStaticRouteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkApplianceStaticRouteBody update network appliance static route body
// Example: {"fixedIpAssignments":{"22:33:44:55:66:77":{"ip":"1.2.3.4","name":"Some client name"}},"name":"My route","reservedIpRanges":[{"comment":"A reserved IP range","end":"192.168.1.1","start":"192.168.1.0"}],"subnet":"192.168.1.0/24"}
swagger:model UpdateNetworkApplianceStaticRouteBody
*/
type UpdateNetworkApplianceStaticRouteBody struct {

	// The enabled state of the static route
	Enabled bool `json:"enabled,omitempty"`

	// The DHCP fixed IP assignments on the static route. This should be an object that contains mappings from MAC addresses to objects that themselves each contain "ip" and "name" string fields. See the sample request/response for more details.
	FixedIPAssignments interface{} `json:"fixedIpAssignments,omitempty"`

	// The gateway IP (next hop) of the static route
	GatewayIP string `json:"gatewayIp,omitempty"`

	// The gateway IP (next hop) VLAN ID of the static route
	GatewayVlanID string `json:"gatewayVlanId,omitempty"`

	// The name of the static route
	Name string `json:"name,omitempty"`

	// The DHCP reserved IP ranges on the static route
	ReservedIPRanges []*UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0 `json:"reservedIpRanges"`

	// The subnet of the static route
	Subnet string `json:"subnet,omitempty"`
}

// Validate validates this update network appliance static route body
func (o *UpdateNetworkApplianceStaticRouteBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReservedIPRanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceStaticRouteBody) validateReservedIPRanges(formats strfmt.Registry) error {
	if swag.IsZero(o.ReservedIPRanges) { // not required
		return nil
	}

	for i := 0; i < len(o.ReservedIPRanges); i++ {
		if swag.IsZero(o.ReservedIPRanges[i]) { // not required
			continue
		}

		if o.ReservedIPRanges[i] != nil {
			if err := o.ReservedIPRanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceStaticRoute" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceStaticRoute" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network appliance static route body based on the context it is used
func (o *UpdateNetworkApplianceStaticRouteBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateReservedIPRanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceStaticRouteBody) contextValidateReservedIPRanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ReservedIPRanges); i++ {

		if o.ReservedIPRanges[i] != nil {
			if err := o.ReservedIPRanges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceStaticRoute" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceStaticRoute" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceStaticRouteBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceStaticRouteBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceStaticRouteBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0 update network appliance static route params body reserved IP ranges items0
swagger:model UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0
*/
type UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0 struct {

	// A text comment for the reserved range
	// Required: true
	Comment *string `json:"comment"`

	// The last IP in the reserved range
	// Required: true
	End *string `json:"end"`

	// The first IP in the reserved range
	// Required: true
	Start *string `json:"start"`
}

// Validate validates this update network appliance static route params body reserved IP ranges items0
func (o *UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", o.Comment); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", o.End); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", o.Start); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network appliance static route params body reserved IP ranges items0 based on context it is used
func (o *UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceStaticRouteParamsBodyReservedIPRangesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
