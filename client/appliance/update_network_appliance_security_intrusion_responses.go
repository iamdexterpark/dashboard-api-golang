// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkApplianceSecurityIntrusionReader is a Reader for the UpdateNetworkApplianceSecurityIntrusion structure.
type UpdateNetworkApplianceSecurityIntrusionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkApplianceSecurityIntrusionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkApplianceSecurityIntrusionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkApplianceSecurityIntrusionOK creates a UpdateNetworkApplianceSecurityIntrusionOK with default headers values
func NewUpdateNetworkApplianceSecurityIntrusionOK() *UpdateNetworkApplianceSecurityIntrusionOK {
	return &UpdateNetworkApplianceSecurityIntrusionOK{}
}

/* UpdateNetworkApplianceSecurityIntrusionOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkApplianceSecurityIntrusionOK struct {
	Payload interface{}
}

func (o *UpdateNetworkApplianceSecurityIntrusionOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/security/intrusion][%d] updateNetworkApplianceSecurityIntrusionOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkApplianceSecurityIntrusionOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkApplianceSecurityIntrusionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkApplianceSecurityIntrusionBody update network appliance security intrusion body
// Example: {"idsRulesets":"balanced","mode":"prevention","protectedNetworks":{"excludedCidr":["10.0.0.0/8","127.0.0.0/8"],"includedCidr":["10.0.0.0/8","127.0.0.0/8","169.254.0.0/16","172.16.0.0/12"],"useDefault":false}}
swagger:model UpdateNetworkApplianceSecurityIntrusionBody
*/
type UpdateNetworkApplianceSecurityIntrusionBody struct {

	// Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved
	// Enum: [connectivity balanced security]
	IdsRulesets string `json:"idsRulesets,omitempty"`

	// Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)
	// Enum: [prevention detection disabled]
	Mode string `json:"mode,omitempty"`

	// protected networks
	ProtectedNetworks *UpdateNetworkApplianceSecurityIntrusionParamsBodyProtectedNetworks `json:"protectedNetworks,omitempty"`
}

// Validate validates this update network appliance security intrusion body
func (o *UpdateNetworkApplianceSecurityIntrusionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIdsRulesets(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProtectedNetworks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkApplianceSecurityIntrusionBodyTypeIdsRulesetsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["connectivity","balanced","security"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceSecurityIntrusionBodyTypeIdsRulesetsPropEnum = append(updateNetworkApplianceSecurityIntrusionBodyTypeIdsRulesetsPropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceSecurityIntrusionBodyIdsRulesetsConnectivity captures enum value "connectivity"
	UpdateNetworkApplianceSecurityIntrusionBodyIdsRulesetsConnectivity string = "connectivity"

	// UpdateNetworkApplianceSecurityIntrusionBodyIdsRulesetsBalanced captures enum value "balanced"
	UpdateNetworkApplianceSecurityIntrusionBodyIdsRulesetsBalanced string = "balanced"

	// UpdateNetworkApplianceSecurityIntrusionBodyIdsRulesetsSecurity captures enum value "security"
	UpdateNetworkApplianceSecurityIntrusionBodyIdsRulesetsSecurity string = "security"
)

// prop value enum
func (o *UpdateNetworkApplianceSecurityIntrusionBody) validateIdsRulesetsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceSecurityIntrusionBodyTypeIdsRulesetsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceSecurityIntrusionBody) validateIdsRulesets(formats strfmt.Registry) error {
	if swag.IsZero(o.IdsRulesets) { // not required
		return nil
	}

	// value enum
	if err := o.validateIdsRulesetsEnum("updateNetworkApplianceSecurityIntrusion"+"."+"idsRulesets", "body", o.IdsRulesets); err != nil {
		return err
	}

	return nil
}

var updateNetworkApplianceSecurityIntrusionBodyTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["prevention","detection","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceSecurityIntrusionBodyTypeModePropEnum = append(updateNetworkApplianceSecurityIntrusionBodyTypeModePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceSecurityIntrusionBodyModePrevention captures enum value "prevention"
	UpdateNetworkApplianceSecurityIntrusionBodyModePrevention string = "prevention"

	// UpdateNetworkApplianceSecurityIntrusionBodyModeDetection captures enum value "detection"
	UpdateNetworkApplianceSecurityIntrusionBodyModeDetection string = "detection"

	// UpdateNetworkApplianceSecurityIntrusionBodyModeDisabled captures enum value "disabled"
	UpdateNetworkApplianceSecurityIntrusionBodyModeDisabled string = "disabled"
)

// prop value enum
func (o *UpdateNetworkApplianceSecurityIntrusionBody) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceSecurityIntrusionBodyTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceSecurityIntrusionBody) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(o.Mode) { // not required
		return nil
	}

	// value enum
	if err := o.validateModeEnum("updateNetworkApplianceSecurityIntrusion"+"."+"mode", "body", o.Mode); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceSecurityIntrusionBody) validateProtectedNetworks(formats strfmt.Registry) error {
	if swag.IsZero(o.ProtectedNetworks) { // not required
		return nil
	}

	if o.ProtectedNetworks != nil {
		if err := o.ProtectedNetworks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceSecurityIntrusion" + "." + "protectedNetworks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceSecurityIntrusion" + "." + "protectedNetworks")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network appliance security intrusion body based on the context it is used
func (o *UpdateNetworkApplianceSecurityIntrusionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProtectedNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceSecurityIntrusionBody) contextValidateProtectedNetworks(ctx context.Context, formats strfmt.Registry) error {

	if o.ProtectedNetworks != nil {
		if err := o.ProtectedNetworks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkApplianceSecurityIntrusion" + "." + "protectedNetworks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkApplianceSecurityIntrusion" + "." + "protectedNetworks")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceSecurityIntrusionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceSecurityIntrusionBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceSecurityIntrusionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkApplianceSecurityIntrusionParamsBodyProtectedNetworks Set the included/excluded networks from the intrusion engine (optional - omitting will leave current config unchanged). This is available only in 'passthrough' mode
swagger:model UpdateNetworkApplianceSecurityIntrusionParamsBodyProtectedNetworks
*/
type UpdateNetworkApplianceSecurityIntrusionParamsBodyProtectedNetworks struct {

	// list of IP addresses or subnets being excluded from protection (required if 'useDefault' is false)
	ExcludedCidr []string `json:"excludedCidr"`

	// list of IP addresses or subnets being protected (required if 'useDefault' is false)
	IncludedCidr []string `json:"includedCidr"`

	// true/false whether to use special IPv4 addresses: https://tools.ietf.org/html/rfc5735 (required). Default value is true if none currently saved
	UseDefault bool `json:"useDefault,omitempty"`
}

// Validate validates this update network appliance security intrusion params body protected networks
func (o *UpdateNetworkApplianceSecurityIntrusionParamsBodyProtectedNetworks) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network appliance security intrusion params body protected networks based on context it is used
func (o *UpdateNetworkApplianceSecurityIntrusionParamsBodyProtectedNetworks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceSecurityIntrusionParamsBodyProtectedNetworks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceSecurityIntrusionParamsBodyProtectedNetworks) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceSecurityIntrusionParamsBodyProtectedNetworks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
