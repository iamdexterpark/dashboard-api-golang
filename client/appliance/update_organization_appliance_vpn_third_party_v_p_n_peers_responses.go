// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateOrganizationApplianceVpnThirdPartyVPNPeersReader is a Reader for the UpdateOrganizationApplianceVpnThirdPartyVPNPeers structure.
type UpdateOrganizationApplianceVpnThirdPartyVPNPeersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOrganizationApplianceVpnThirdPartyVPNPeersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateOrganizationApplianceVpnThirdPartyVPNPeersOK creates a UpdateOrganizationApplianceVpnThirdPartyVPNPeersOK with default headers values
func NewUpdateOrganizationApplianceVpnThirdPartyVPNPeersOK() *UpdateOrganizationApplianceVpnThirdPartyVPNPeersOK {
	return &UpdateOrganizationApplianceVpnThirdPartyVPNPeersOK{}
}

/* UpdateOrganizationApplianceVpnThirdPartyVPNPeersOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateOrganizationApplianceVpnThirdPartyVPNPeersOK struct {
	Payload interface{}
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersOK) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organizationId}/appliance/vpn/thirdPartyVPNPeers][%d] updateOrganizationApplianceVpnThirdPartyVPNPeersOK  %+v", 200, o.Payload)
}
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateOrganizationApplianceVpnThirdPartyVPNPeersBody update organization appliance vpn third party v p n peers body
// Example: {"peers":[{"ikeVersion":"2","ipsecPolicies":{"childAuthAlgo":["sha1"],"childCipherAlgo":["aes128"],"childLifetime":28800,"childPfsGroup":["disabled"],"ikeAuthAlgo":["sha1"],"ikeCipherAlgo":["tripledes"],"ikeDiffieHellmanGroup":["group2"],"ikeLifetime":28800,"ikePrfAlgo":["prfsha1"]},"name":"My peer 1","networkTags":["all"],"privateSubnets":["192.168.1.0/24","192.168.128.0/24"],"publicIp":"123.123.123.1","secret":"asdf1234"},{"ikeVersion":"1","ipsecPoliciesPreset":"default","name":"My peer 2","networkTags":["none"],"privateSubnets":["192.168.2.0/24","192.168.129.0/24"],"publicIp":"123.123.123.2","remoteId":"miles@meraki.com","secret":"asdf56785678567856785678"}]}
swagger:model UpdateOrganizationApplianceVpnThirdPartyVPNPeersBody
*/
type UpdateOrganizationApplianceVpnThirdPartyVPNPeersBody struct {

	// The list of VPN peers
	// Required: true
	Peers []*UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0 `json:"peers"`
}

// Validate validates this update organization appliance vpn third party v p n peers body
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePeers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersBody) validatePeers(formats strfmt.Registry) error {

	if err := validate.Required("updateOrganizationApplianceVpnThirdPartyVPNPeers"+"."+"peers", "body", o.Peers); err != nil {
		return err
	}

	for i := 0; i < len(o.Peers); i++ {
		if swag.IsZero(o.Peers[i]) { // not required
			continue
		}

		if o.Peers[i] != nil {
			if err := o.Peers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationApplianceVpnThirdPartyVPNPeers" + "." + "peers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationApplianceVpnThirdPartyVPNPeers" + "." + "peers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update organization appliance vpn third party v p n peers body based on the context it is used
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePeers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersBody) contextValidatePeers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Peers); i++ {

		if o.Peers[i] != nil {
			if err := o.Peers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationApplianceVpnThirdPartyVPNPeers" + "." + "peers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationApplianceVpnThirdPartyVPNPeers" + "." + "peers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersBody) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationApplianceVpnThirdPartyVPNPeersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0 update organization appliance vpn third party v p n peers params body peers items0
swagger:model UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0
*/
type UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0 struct {

	// [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
	// Enum: [1 2]
	IkeVersion *string `json:"ikeVersion,omitempty"`

	// ipsec policies
	IpsecPolicies *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPolicies `json:"ipsecPolicies,omitempty"`

	// One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
	IpsecPoliciesPreset string `json:"ipsecPoliciesPreset,omitempty"`

	// The name of the VPN peer
	// Required: true
	Name *string `json:"name"`

	// A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
	NetworkTags []string `json:"networkTags"`

	// The list of the private subnets of the VPN peer
	// Required: true
	PrivateSubnets []string `json:"privateSubnets"`

	// The public IP of the VPN peer
	// Required: true
	PublicIP *string `json:"publicIp"`

	// [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
	RemoteID string `json:"remoteId,omitempty"`

	// The shared secret with the VPN peer
	// Required: true
	Secret *string `json:"secret"`
}

// Validate validates this update organization appliance vpn third party v p n peers params body peers items0
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIkeVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIpsecPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrivateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0TypeIkeVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1","2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0TypeIkeVersionPropEnum = append(updateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0TypeIkeVersionPropEnum, v)
	}
}

const (

	// UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IkeVersionNr1 captures enum value "1"
	UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IkeVersionNr1 string = "1"

	// UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IkeVersionNr2 captures enum value "2"
	UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IkeVersionNr2 string = "2"
)

// prop value enum
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) validateIkeVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0TypeIkeVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) validateIkeVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.IkeVersion) { // not required
		return nil
	}

	// value enum
	if err := o.validateIkeVersionEnum("ikeVersion", "body", *o.IkeVersion); err != nil {
		return err
	}

	return nil
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) validateIpsecPolicies(formats strfmt.Registry) error {
	if swag.IsZero(o.IpsecPolicies) { // not required
		return nil
	}

	if o.IpsecPolicies != nil {
		if err := o.IpsecPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsecPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipsecPolicies")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) validatePrivateSubnets(formats strfmt.Registry) error {

	if err := validate.Required("privateSubnets", "body", o.PrivateSubnets); err != nil {
		return err
	}

	return nil
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) validatePublicIP(formats strfmt.Registry) error {

	if err := validate.Required("publicIp", "body", o.PublicIP); err != nil {
		return err
	}

	return nil
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) validateSecret(formats strfmt.Registry) error {

	if err := validate.Required("secret", "body", o.Secret); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update organization appliance vpn third party v p n peers params body peers items0 based on the context it is used
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIpsecPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) contextValidateIpsecPolicies(ctx context.Context, formats strfmt.Registry) error {

	if o.IpsecPolicies != nil {
		if err := o.IpsecPolicies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipsecPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipsecPolicies")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPolicies Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
swagger:model UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPolicies
*/
type UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPolicies struct {

	// This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	ChildAuthAlgo []string `json:"childAuthAlgo"`

	// This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
	ChildCipherAlgo []string `json:"childCipherAlgo"`

	// The lifetime of the Phase 2 SA in seconds.
	ChildLifetime int64 `json:"childLifetime,omitempty"`

	// This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
	ChildPfsGroup []string `json:"childPfsGroup"`

	// This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	IkeAuthAlgo []string `json:"ikeAuthAlgo"`

	// This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
	IkeCipherAlgo []string `json:"ikeCipherAlgo"`

	// This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
	IkeDiffieHellmanGroup []string `json:"ikeDiffieHellmanGroup"`

	// The lifetime of the Phase 1 SA in seconds.
	IkeLifetime int64 `json:"ikeLifetime,omitempty"`

	// [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
	IkePrfAlgo []string `json:"ikePrfAlgo"`
}

// Validate validates this update organization appliance vpn third party v p n peers params body peers items0 ipsec policies
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPolicies) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIkePrfAlgo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPoliciesIkePrfAlgoItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["prfsha256","prfsha1","prfmd5","default"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPoliciesIkePrfAlgoItemsEnum = append(updateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPoliciesIkePrfAlgoItemsEnum, v)
	}
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPolicies) validateIkePrfAlgoItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPoliciesIkePrfAlgoItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPolicies) validateIkePrfAlgo(formats strfmt.Registry) error {
	if swag.IsZero(o.IkePrfAlgo) { // not required
		return nil
	}

	for i := 0; i < len(o.IkePrfAlgo); i++ {

		// value enum
		if err := o.validateIkePrfAlgoItemsEnum("ipsecPolicies"+"."+"ikePrfAlgo"+"."+strconv.Itoa(i), "body", o.IkePrfAlgo[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this update organization appliance vpn third party v p n peers params body peers items0 ipsec policies based on context it is used
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPolicies) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPolicies) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPolicies) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationApplianceVpnThirdPartyVPNPeersParamsBodyPeersItems0IpsecPolicies
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
