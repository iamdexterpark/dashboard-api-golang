// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkApplianceUplinksUsageHistoryParams creates a new GetNetworkApplianceUplinksUsageHistoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNetworkApplianceUplinksUsageHistoryParams() *GetNetworkApplianceUplinksUsageHistoryParams {
	return &GetNetworkApplianceUplinksUsageHistoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkApplianceUplinksUsageHistoryParamsWithTimeout creates a new GetNetworkApplianceUplinksUsageHistoryParams object
// with the ability to set a timeout on a request.
func NewGetNetworkApplianceUplinksUsageHistoryParamsWithTimeout(timeout time.Duration) *GetNetworkApplianceUplinksUsageHistoryParams {
	return &GetNetworkApplianceUplinksUsageHistoryParams{
		timeout: timeout,
	}
}

// NewGetNetworkApplianceUplinksUsageHistoryParamsWithContext creates a new GetNetworkApplianceUplinksUsageHistoryParams object
// with the ability to set a context for a request.
func NewGetNetworkApplianceUplinksUsageHistoryParamsWithContext(ctx context.Context) *GetNetworkApplianceUplinksUsageHistoryParams {
	return &GetNetworkApplianceUplinksUsageHistoryParams{
		Context: ctx,
	}
}

// NewGetNetworkApplianceUplinksUsageHistoryParamsWithHTTPClient creates a new GetNetworkApplianceUplinksUsageHistoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNetworkApplianceUplinksUsageHistoryParamsWithHTTPClient(client *http.Client) *GetNetworkApplianceUplinksUsageHistoryParams {
	return &GetNetworkApplianceUplinksUsageHistoryParams{
		HTTPClient: client,
	}
}

/* GetNetworkApplianceUplinksUsageHistoryParams contains all the parameters to send to the API endpoint
   for the get network appliance uplinks usage history operation.

   Typically these are written to a http.Request.
*/
type GetNetworkApplianceUplinksUsageHistoryParams struct {

	// NetworkID.
	NetworkID string

	/* Resolution.

	   The time resolution in seconds for returned data. The valid resolutions are: 60, 300, 600, 1800, 3600, 86400. The default is 60.
	*/
	Resolution *int64

	/* T0.

	   The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
	*/
	T0 *string

	/* T1.

	   The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
	*/
	T1 *string

	/* Timespan.

	   The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 10 minutes.

	   Format: float
	*/
	Timespan *float32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get network appliance uplinks usage history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkApplianceUplinksUsageHistoryParams) WithDefaults() *GetNetworkApplianceUplinksUsageHistoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get network appliance uplinks usage history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkApplianceUplinksUsageHistoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) WithTimeout(timeout time.Duration) *GetNetworkApplianceUplinksUsageHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) WithContext(ctx context.Context) *GetNetworkApplianceUplinksUsageHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) WithHTTPClient(client *http.Client) *GetNetworkApplianceUplinksUsageHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetworkID adds the networkID to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) WithNetworkID(networkID string) *GetNetworkApplianceUplinksUsageHistoryParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithResolution adds the resolution to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) WithResolution(resolution *int64) *GetNetworkApplianceUplinksUsageHistoryParams {
	o.SetResolution(resolution)
	return o
}

// SetResolution adds the resolution to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) SetResolution(resolution *int64) {
	o.Resolution = resolution
}

// WithT0 adds the t0 to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) WithT0(t0 *string) *GetNetworkApplianceUplinksUsageHistoryParams {
	o.SetT0(t0)
	return o
}

// SetT0 adds the t0 to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) SetT0(t0 *string) {
	o.T0 = t0
}

// WithT1 adds the t1 to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) WithT1(t1 *string) *GetNetworkApplianceUplinksUsageHistoryParams {
	o.SetT1(t1)
	return o
}

// SetT1 adds the t1 to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) SetT1(t1 *string) {
	o.T1 = t1
}

// WithTimespan adds the timespan to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) WithTimespan(timespan *float32) *GetNetworkApplianceUplinksUsageHistoryParams {
	o.SetTimespan(timespan)
	return o
}

// SetTimespan adds the timespan to the get network appliance uplinks usage history params
func (o *GetNetworkApplianceUplinksUsageHistoryParams) SetTimespan(timespan *float32) {
	o.Timespan = timespan
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkApplianceUplinksUsageHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.Resolution != nil {

		// query param resolution
		var qrResolution int64

		if o.Resolution != nil {
			qrResolution = *o.Resolution
		}
		qResolution := swag.FormatInt64(qrResolution)
		if qResolution != "" {

			if err := r.SetQueryParam("resolution", qResolution); err != nil {
				return err
			}
		}
	}

	if o.T0 != nil {

		// query param t0
		var qrT0 string

		if o.T0 != nil {
			qrT0 = *o.T0
		}
		qT0 := qrT0
		if qT0 != "" {

			if err := r.SetQueryParam("t0", qT0); err != nil {
				return err
			}
		}
	}

	if o.T1 != nil {

		// query param t1
		var qrT1 string

		if o.T1 != nil {
			qrT1 = *o.T1
		}
		qT1 := qrT1
		if qT1 != "" {

			if err := r.SetQueryParam("t1", qT1); err != nil {
				return err
			}
		}
	}

	if o.Timespan != nil {

		// query param timespan
		var qrTimespan float32

		if o.Timespan != nil {
			qrTimespan = *o.Timespan
		}
		qTimespan := swag.FormatFloat32(qrTimespan)
		if qTimespan != "" {

			if err := r.SetQueryParam("timespan", qTimespan); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
