// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkApplianceVpnBgpReader is a Reader for the UpdateNetworkApplianceVpnBgp structure.
type UpdateNetworkApplianceVpnBgpReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkApplianceVpnBgpReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkApplianceVpnBgpOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkApplianceVpnBgpOK creates a UpdateNetworkApplianceVpnBgpOK with default headers values
func NewUpdateNetworkApplianceVpnBgpOK() *UpdateNetworkApplianceVpnBgpOK {
	return &UpdateNetworkApplianceVpnBgpOK{}
}

/* UpdateNetworkApplianceVpnBgpOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkApplianceVpnBgpOK struct {
	Payload interface{}
}

func (o *UpdateNetworkApplianceVpnBgpOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/vpn/bgp][%d] updateNetworkApplianceVpnBgpOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkApplianceVpnBgpOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkApplianceVpnBgpOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkApplianceVpnBgpBody update network appliance vpn bgp body
// Example: {"asNumber":64515,"enabled":true,"ibgpHoldTimer":120,"neighbors":[{"allowTransit":true,"ebgpHoldTimer":180,"ebgpMultihop":2,"ip":"10.10.10.22","receiveLimit":120,"remoteAsNumber":64343}]}
swagger:model UpdateNetworkApplianceVpnBgpBody
*/
type UpdateNetworkApplianceVpnBgpBody struct {

	// An Autonomous System Number (ASN) is required if you are to run BGP and peer with another BGP Speaker outside of the Auto VPN domain. This ASN will be applied to the entire Auto VPN domain. The entire 4-byte ASN range is supported. So, the ASN must be an integer between 1 and 4294967295. When absent, this field is not updated. If no value exists then it defaults to 64512.
	AsNumber int64 `json:"asNumber,omitempty"`

	// Boolean value to enable or disable the BGP configuration. When BGP is enabled, the asNumber (ASN) will be autopopulated with the preconfigured ASN at other Hubs or a default value if there is no ASN configured.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The IBGP holdtimer in seconds. The IBGP holdtimer must be an integer between 12 and 240. When absent, this field is not updated. If no value exists then it defaults to 240.
	IbgpHoldTimer int64 `json:"ibgpHoldTimer,omitempty"`

	// List of BGP neighbors. This list replaces the existing set of neighbors. When absent, this field is not updated.
	Neighbors []*UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0 `json:"neighbors"`
}

// Validate validates this update network appliance vpn bgp body
func (o *UpdateNetworkApplianceVpnBgpBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNeighbors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceVpnBgpBody) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("updateNetworkApplianceVpnBgp"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceVpnBgpBody) validateNeighbors(formats strfmt.Registry) error {
	if swag.IsZero(o.Neighbors) { // not required
		return nil
	}

	for i := 0; i < len(o.Neighbors); i++ {
		if swag.IsZero(o.Neighbors[i]) { // not required
			continue
		}

		if o.Neighbors[i] != nil {
			if err := o.Neighbors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceVpnBgp" + "." + "neighbors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceVpnBgp" + "." + "neighbors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network appliance vpn bgp body based on the context it is used
func (o *UpdateNetworkApplianceVpnBgpBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNeighbors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceVpnBgpBody) contextValidateNeighbors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Neighbors); i++ {

		if o.Neighbors[i] != nil {
			if err := o.Neighbors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceVpnBgp" + "." + "neighbors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceVpnBgp" + "." + "neighbors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceVpnBgpBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceVpnBgpBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceVpnBgpBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0 update network appliance vpn bgp params body neighbors items0
swagger:model UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0
*/
type UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0 struct {

	// When this feature is on, the Meraki device will advertise routes learned from other Autonomous Systems, thereby allowing traffic between Autonomous Systems to transit this AS. When absent, it defaults to false.
	AllowTransit bool `json:"allowTransit,omitempty"`

	// The EBGP hold timer in seconds for each neighbor. The EBGP hold timer must be an integer between 12 and 240.
	// Required: true
	EbgpHoldTimer *int64 `json:"ebgpHoldTimer"`

	// Configure this if the neighbor is not adjacent. The EBGP multi-hop must be an integer between 1 and 255.
	// Required: true
	EbgpMultihop *int64 `json:"ebgpMultihop"`

	// IP address of the neighbor.
	// Required: true
	IP *string `json:"ip"`

	// The receive limit is the maximum number of routes that can be received from any BGP peer. The receive limit must be an integer between 0 and 4294967295. When absent, it defaults to 0.
	ReceiveLimit int64 `json:"receiveLimit,omitempty"`

	// Remote ASN of the neighbor. The remote ASN must be an integer between 1 and 4294967295.
	// Required: true
	RemoteAsNumber *int64 `json:"remoteAsNumber"`
}

// Validate validates this update network appliance vpn bgp params body neighbors items0
func (o *UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEbgpHoldTimer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEbgpMultihop(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRemoteAsNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0) validateEbgpHoldTimer(formats strfmt.Registry) error {

	if err := validate.Required("ebgpHoldTimer", "body", o.EbgpHoldTimer); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0) validateEbgpMultihop(formats strfmt.Registry) error {

	if err := validate.Required("ebgpMultihop", "body", o.EbgpMultihop); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", o.IP); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0) validateRemoteAsNumber(formats strfmt.Registry) error {

	if err := validate.Required("remoteAsNumber", "body", o.RemoteAsNumber); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network appliance vpn bgp params body neighbors items0 based on context it is used
func (o *UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceVpnBgpParamsBodyNeighborsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
