// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateOrganizationApplianceSecurityIntrusionReader is a Reader for the UpdateOrganizationApplianceSecurityIntrusion structure.
type UpdateOrganizationApplianceSecurityIntrusionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOrganizationApplianceSecurityIntrusionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOrganizationApplianceSecurityIntrusionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateOrganizationApplianceSecurityIntrusionOK creates a UpdateOrganizationApplianceSecurityIntrusionOK with default headers values
func NewUpdateOrganizationApplianceSecurityIntrusionOK() *UpdateOrganizationApplianceSecurityIntrusionOK {
	return &UpdateOrganizationApplianceSecurityIntrusionOK{}
}

/* UpdateOrganizationApplianceSecurityIntrusionOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateOrganizationApplianceSecurityIntrusionOK struct {
	Payload interface{}
}

func (o *UpdateOrganizationApplianceSecurityIntrusionOK) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organizationId}/appliance/security/intrusion][%d] updateOrganizationApplianceSecurityIntrusionOK  %+v", 200, o.Payload)
}
func (o *UpdateOrganizationApplianceSecurityIntrusionOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateOrganizationApplianceSecurityIntrusionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateOrganizationApplianceSecurityIntrusionBody update organization appliance security intrusion body
// Example: {"allowedRules":[{"message":"SQL sa login failed","ruleId":"meraki:intrusion/snort/GID/01/SID/688"},{"message":"MALWARE-OTHER Trackware myway speedbar runtime detection - switch engines","ruleId":"meraki:intrusion/snort/GID/01/SID/5805"}]}
swagger:model UpdateOrganizationApplianceSecurityIntrusionBody
*/
type UpdateOrganizationApplianceSecurityIntrusionBody struct {

	// Sets a list of specific SNORT signatures to allow
	// Required: true
	AllowedRules []*UpdateOrganizationApplianceSecurityIntrusionParamsBodyAllowedRulesItems0 `json:"allowedRules"`
}

// Validate validates this update organization appliance security intrusion body
func (o *UpdateOrganizationApplianceSecurityIntrusionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAllowedRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrganizationApplianceSecurityIntrusionBody) validateAllowedRules(formats strfmt.Registry) error {

	if err := validate.Required("updateOrganizationApplianceSecurityIntrusion"+"."+"allowedRules", "body", o.AllowedRules); err != nil {
		return err
	}

	for i := 0; i < len(o.AllowedRules); i++ {
		if swag.IsZero(o.AllowedRules[i]) { // not required
			continue
		}

		if o.AllowedRules[i] != nil {
			if err := o.AllowedRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationApplianceSecurityIntrusion" + "." + "allowedRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationApplianceSecurityIntrusion" + "." + "allowedRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update organization appliance security intrusion body based on the context it is used
func (o *UpdateOrganizationApplianceSecurityIntrusionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAllowedRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrganizationApplianceSecurityIntrusionBody) contextValidateAllowedRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AllowedRules); i++ {

		if o.AllowedRules[i] != nil {
			if err := o.AllowedRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationApplianceSecurityIntrusion" + "." + "allowedRules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationApplianceSecurityIntrusion" + "." + "allowedRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationApplianceSecurityIntrusionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationApplianceSecurityIntrusionBody) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationApplianceSecurityIntrusionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateOrganizationApplianceSecurityIntrusionParamsBodyAllowedRulesItems0 update organization appliance security intrusion params body allowed rules items0
swagger:model UpdateOrganizationApplianceSecurityIntrusionParamsBodyAllowedRulesItems0
*/
type UpdateOrganizationApplianceSecurityIntrusionParamsBodyAllowedRulesItems0 struct {

	// Message is optional and is ignored on a PUT call. It is allowed in order for PUT to be compatible with GET
	Message string `json:"message,omitempty"`

	// A rule identifier of the format meraki:intrusion/snort/GID/<gid>/SID/<sid>. gid and sid can be obtained from either https://www.snort.org/rule-docs or as ruleIds from the security events in /organization/[orgId]/securityEvents
	// Required: true
	RuleID *string `json:"ruleId"`
}

// Validate validates this update organization appliance security intrusion params body allowed rules items0
func (o *UpdateOrganizationApplianceSecurityIntrusionParamsBodyAllowedRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrganizationApplianceSecurityIntrusionParamsBodyAllowedRulesItems0) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("ruleId", "body", o.RuleID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update organization appliance security intrusion params body allowed rules items0 based on context it is used
func (o *UpdateOrganizationApplianceSecurityIntrusionParamsBodyAllowedRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationApplianceSecurityIntrusionParamsBodyAllowedRulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationApplianceSecurityIntrusionParamsBodyAllowedRulesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationApplianceSecurityIntrusionParamsBodyAllowedRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
