// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNetworkApplianceStaticRouteReader is a Reader for the CreateNetworkApplianceStaticRoute structure.
type CreateNetworkApplianceStaticRouteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNetworkApplianceStaticRouteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateNetworkApplianceStaticRouteCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateNetworkApplianceStaticRouteCreated creates a CreateNetworkApplianceStaticRouteCreated with default headers values
func NewCreateNetworkApplianceStaticRouteCreated() *CreateNetworkApplianceStaticRouteCreated {
	return &CreateNetworkApplianceStaticRouteCreated{}
}

/* CreateNetworkApplianceStaticRouteCreated describes a response with status code 201, with default header values.

Successful operation
*/
type CreateNetworkApplianceStaticRouteCreated struct {
	Payload interface{}
}

func (o *CreateNetworkApplianceStaticRouteCreated) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/appliance/staticRoutes][%d] createNetworkApplianceStaticRouteCreated  %+v", 201, o.Payload)
}
func (o *CreateNetworkApplianceStaticRouteCreated) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateNetworkApplianceStaticRouteCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateNetworkApplianceStaticRouteBody create network appliance static route body
// Example: {"gatewayIp":"1.2.3.5","name":"My route","subnet":"192.168.1.0/24"}
swagger:model CreateNetworkApplianceStaticRouteBody
*/
type CreateNetworkApplianceStaticRouteBody struct {

	// The gateway IP (next hop) of the static route
	// Required: true
	GatewayIP *string `json:"gatewayIp"`

	// The gateway IP (next hop) VLAN ID of the static route
	GatewayVlanID string `json:"gatewayVlanId,omitempty"`

	// The name of the new static route
	// Required: true
	Name *string `json:"name"`

	// The subnet of the static route
	// Required: true
	Subnet *string `json:"subnet"`
}

// Validate validates this create network appliance static route body
func (o *CreateNetworkApplianceStaticRouteBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGatewayIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkApplianceStaticRouteBody) validateGatewayIP(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkApplianceStaticRoute"+"."+"gatewayIp", "body", o.GatewayIP); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkApplianceStaticRouteBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkApplianceStaticRoute"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkApplianceStaticRouteBody) validateSubnet(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkApplianceStaticRoute"+"."+"subnet", "body", o.Subnet); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network appliance static route body based on context it is used
func (o *CreateNetworkApplianceStaticRouteBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkApplianceStaticRouteBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkApplianceStaticRouteBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkApplianceStaticRouteBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
