// Code generated by go-swagger; DO NOT EDIT.

package appliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkApplianceVlanReader is a Reader for the UpdateNetworkApplianceVlan structure.
type UpdateNetworkApplianceVlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkApplianceVlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkApplianceVlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkApplianceVlanOK creates a UpdateNetworkApplianceVlanOK with default headers values
func NewUpdateNetworkApplianceVlanOK() *UpdateNetworkApplianceVlanOK {
	return &UpdateNetworkApplianceVlanOK{}
}

/* UpdateNetworkApplianceVlanOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkApplianceVlanOK struct {
	Payload interface{}
}

func (o *UpdateNetworkApplianceVlanOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/appliance/vlans/{vlanId}][%d] updateNetworkApplianceVlanOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkApplianceVlanOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkApplianceVlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkApplianceVlanBody update network appliance vlan body
// Example: {"applianceIp":"192.168.1.2","dhcpBootFilename":"sample.file","dhcpBootNextServer":"1.2.3.4","dhcpBootOptionsEnabled":false,"dhcpHandling":"Run a DHCP server","dhcpLeaseTime":"1 day","dhcpOptions":[{"code":"5","type":"text","value":"five"}],"dnsNameservers":"google_dns","fixedIpAssignments":{"22:33:44:55:66:77":{"ip":"1.2.3.4","name":"Some client name"}},"groupPolicyId":"101","name":"My VLAN","reservedIpRanges":[{"comment":"A reserved IP range","end":"192.168.1.1","start":"192.168.1.0"}],"subnet":"192.168.1.0/24"}
swagger:model UpdateNetworkApplianceVlanBody
*/
type UpdateNetworkApplianceVlanBody struct {

	// The local IP of the appliance on the VLAN
	ApplianceIP string `json:"applianceIp,omitempty"`

	// DHCP boot option for boot filename
	DhcpBootFilename string `json:"dhcpBootFilename,omitempty"`

	// DHCP boot option to direct boot clients to the server to load the boot file from
	DhcpBootNextServer string `json:"dhcpBootNextServer,omitempty"`

	// Use DHCP boot options specified in other properties
	DhcpBootOptionsEnabled bool `json:"dhcpBootOptionsEnabled,omitempty"`

	// The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
	// Enum: [Run a DHCP server Relay DHCP to another server Do not respond to DHCP requests]
	DhcpHandling string `json:"dhcpHandling,omitempty"`

	// The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
	// Enum: [30 minutes 1 hour 4 hours 12 hours 1 day 1 week]
	DhcpLeaseTime string `json:"dhcpLeaseTime,omitempty"`

	// The list of DHCP options that will be included in DHCP responses. Each object in the list should have "code", "type", and "value" properties.
	DhcpOptions []*UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0 `json:"dhcpOptions"`

	// The IPs of the DHCP servers that DHCP requests should be relayed to
	DhcpRelayServerIps []string `json:"dhcpRelayServerIps"`

	// The DNS nameservers used for DHCP responses, either "upstream_dns", "google_dns", "opendns", or a newline seperated string of IP addresses or domain names
	DNSNameservers string `json:"dnsNameservers,omitempty"`

	// The DHCP fixed IP assignments on the VLAN. This should be an object that contains mappings from MAC addresses to objects that themselves each contain "ip" and "name" string fields. See the sample request/response for more details.
	FixedIPAssignments interface{} `json:"fixedIpAssignments,omitempty"`

	// The id of the desired group policy to apply to the VLAN
	GroupPolicyID string `json:"groupPolicyId,omitempty"`

	// The name of the VLAN
	Name string `json:"name,omitempty"`

	// The DHCP reserved IP ranges on the VLAN
	ReservedIPRanges []*UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0 `json:"reservedIpRanges"`

	// The subnet of the VLAN
	Subnet string `json:"subnet,omitempty"`

	// The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN
	VpnNatSubnet string `json:"vpnNatSubnet,omitempty"`
}

// Validate validates this update network appliance vlan body
func (o *UpdateNetworkApplianceVlanBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDhcpHandling(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDhcpLeaseTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDhcpOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReservedIPRanges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkApplianceVlanBodyTypeDhcpHandlingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Run a DHCP server","Relay DHCP to another server","Do not respond to DHCP requests"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceVlanBodyTypeDhcpHandlingPropEnum = append(updateNetworkApplianceVlanBodyTypeDhcpHandlingPropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceVlanBodyDhcpHandlingRunaDHCPServer captures enum value "Run a DHCP server"
	UpdateNetworkApplianceVlanBodyDhcpHandlingRunaDHCPServer string = "Run a DHCP server"

	// UpdateNetworkApplianceVlanBodyDhcpHandlingRelayDHCPToAnotherServer captures enum value "Relay DHCP to another server"
	UpdateNetworkApplianceVlanBodyDhcpHandlingRelayDHCPToAnotherServer string = "Relay DHCP to another server"

	// UpdateNetworkApplianceVlanBodyDhcpHandlingDoNotRespondToDHCPRequests captures enum value "Do not respond to DHCP requests"
	UpdateNetworkApplianceVlanBodyDhcpHandlingDoNotRespondToDHCPRequests string = "Do not respond to DHCP requests"
)

// prop value enum
func (o *UpdateNetworkApplianceVlanBody) validateDhcpHandlingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceVlanBodyTypeDhcpHandlingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceVlanBody) validateDhcpHandling(formats strfmt.Registry) error {
	if swag.IsZero(o.DhcpHandling) { // not required
		return nil
	}

	// value enum
	if err := o.validateDhcpHandlingEnum("updateNetworkApplianceVlan"+"."+"dhcpHandling", "body", o.DhcpHandling); err != nil {
		return err
	}

	return nil
}

var updateNetworkApplianceVlanBodyTypeDhcpLeaseTimePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["30 minutes","1 hour","4 hours","12 hours","1 day","1 week"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceVlanBodyTypeDhcpLeaseTimePropEnum = append(updateNetworkApplianceVlanBodyTypeDhcpLeaseTimePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr30Minutes captures enum value "30 minutes"
	UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr30Minutes string = "30 minutes"

	// UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr1Hour captures enum value "1 hour"
	UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr1Hour string = "1 hour"

	// UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr4Hours captures enum value "4 hours"
	UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr4Hours string = "4 hours"

	// UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr12Hours captures enum value "12 hours"
	UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr12Hours string = "12 hours"

	// UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr1Day captures enum value "1 day"
	UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr1Day string = "1 day"

	// UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr1Week captures enum value "1 week"
	UpdateNetworkApplianceVlanBodyDhcpLeaseTimeNr1Week string = "1 week"
)

// prop value enum
func (o *UpdateNetworkApplianceVlanBody) validateDhcpLeaseTimeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceVlanBodyTypeDhcpLeaseTimePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceVlanBody) validateDhcpLeaseTime(formats strfmt.Registry) error {
	if swag.IsZero(o.DhcpLeaseTime) { // not required
		return nil
	}

	// value enum
	if err := o.validateDhcpLeaseTimeEnum("updateNetworkApplianceVlan"+"."+"dhcpLeaseTime", "body", o.DhcpLeaseTime); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceVlanBody) validateDhcpOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.DhcpOptions) { // not required
		return nil
	}

	for i := 0; i < len(o.DhcpOptions); i++ {
		if swag.IsZero(o.DhcpOptions[i]) { // not required
			continue
		}

		if o.DhcpOptions[i] != nil {
			if err := o.DhcpOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceVlan" + "." + "dhcpOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceVlan" + "." + "dhcpOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkApplianceVlanBody) validateReservedIPRanges(formats strfmt.Registry) error {
	if swag.IsZero(o.ReservedIPRanges) { // not required
		return nil
	}

	for i := 0; i < len(o.ReservedIPRanges); i++ {
		if swag.IsZero(o.ReservedIPRanges[i]) { // not required
			continue
		}

		if o.ReservedIPRanges[i] != nil {
			if err := o.ReservedIPRanges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceVlan" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceVlan" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network appliance vlan body based on the context it is used
func (o *UpdateNetworkApplianceVlanBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDhcpOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateReservedIPRanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceVlanBody) contextValidateDhcpOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DhcpOptions); i++ {

		if o.DhcpOptions[i] != nil {
			if err := o.DhcpOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceVlan" + "." + "dhcpOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceVlan" + "." + "dhcpOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateNetworkApplianceVlanBody) contextValidateReservedIPRanges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ReservedIPRanges); i++ {

		if o.ReservedIPRanges[i] != nil {
			if err := o.ReservedIPRanges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkApplianceVlan" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkApplianceVlan" + "." + "reservedIpRanges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceVlanBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceVlanBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceVlanBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0 update network appliance vlan params body dhcp options items0
swagger:model UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0
*/
type UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0 struct {

	// The code for the DHCP option. This should be an integer between 2 and 254.
	// Required: true
	Code *string `json:"code"`

	// The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
	// Required: true
	// Enum: [text ip hex integer]
	Type *string `json:"type"`

	// The value for the DHCP option
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this update network appliance vlan params body dhcp options items0
func (o *UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

var updateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","ip","hex","integer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeTypePropEnum = append(updateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeTypePropEnum, v)
	}
}

const (

	// UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeText captures enum value "text"
	UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeText string = "text"

	// UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeIP captures enum value "ip"
	UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeIP string = "ip"

	// UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeHex captures enum value "hex"
	UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeHex string = "hex"

	// UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeInteger captures enum value "integer"
	UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeInteger string = "integer"
)

// prop value enum
func (o *UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkApplianceVlanParamsBodyDhcpOptionsItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", *o.Type); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", o.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network appliance vlan params body dhcp options items0 based on context it is used
func (o *UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceVlanParamsBodyDhcpOptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0 update network appliance vlan params body reserved IP ranges items0
swagger:model UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0
*/
type UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0 struct {

	// A text comment for the reserved range
	// Required: true
	Comment *string `json:"comment"`

	// The last IP in the reserved range
	// Required: true
	End *string `json:"end"`

	// The first IP in the reserved range
	// Required: true
	Start *string `json:"start"`
}

// Validate validates this update network appliance vlan params body reserved IP ranges items0
func (o *UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", o.Comment); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", o.End); err != nil {
		return err
	}

	return nil
}

func (o *UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", o.Start); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network appliance vlan params body reserved IP ranges items0 based on context it is used
func (o *UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkApplianceVlanParamsBodyReservedIPRangesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
