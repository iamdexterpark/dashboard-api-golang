// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkMerakiAuthUserReader is a Reader for the UpdateNetworkMerakiAuthUser structure.
type UpdateNetworkMerakiAuthUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkMerakiAuthUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkMerakiAuthUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkMerakiAuthUserOK creates a UpdateNetworkMerakiAuthUserOK with default headers values
func NewUpdateNetworkMerakiAuthUserOK() *UpdateNetworkMerakiAuthUserOK {
	return &UpdateNetworkMerakiAuthUserOK{}
}

/* UpdateNetworkMerakiAuthUserOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkMerakiAuthUserOK struct {
	Payload interface{}
}

func (o *UpdateNetworkMerakiAuthUserOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}][%d] updateNetworkMerakiAuthUserOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkMerakiAuthUserOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkMerakiAuthUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkMerakiAuthUserBody update network meraki auth user body
// Example: {}
swagger:model UpdateNetworkMerakiAuthUserBody
*/
type UpdateNetworkMerakiAuthUserBody struct {

	// Authorization zones and expiration dates for the user.
	Authorizations []*UpdateNetworkMerakiAuthUserParamsBodyAuthorizationsItems0 `json:"authorizations"`

	// Whether or not Meraki should email the password to user. Default is false.
	EmailPasswordToUser bool `json:"emailPasswordToUser,omitempty"`

	// Name of the user
	Name string `json:"name,omitempty"`

	// The password for this user account
	Password string `json:"password,omitempty"`
}

// Validate validates this update network meraki auth user body
func (o *UpdateNetworkMerakiAuthUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkMerakiAuthUserBody) validateAuthorizations(formats strfmt.Registry) error {
	if swag.IsZero(o.Authorizations) { // not required
		return nil
	}

	for i := 0; i < len(o.Authorizations); i++ {
		if swag.IsZero(o.Authorizations[i]) { // not required
			continue
		}

		if o.Authorizations[i] != nil {
			if err := o.Authorizations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkMerakiAuthUser" + "." + "authorizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkMerakiAuthUser" + "." + "authorizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update network meraki auth user body based on the context it is used
func (o *UpdateNetworkMerakiAuthUserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthorizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkMerakiAuthUserBody) contextValidateAuthorizations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Authorizations); i++ {

		if o.Authorizations[i] != nil {
			if err := o.Authorizations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateNetworkMerakiAuthUser" + "." + "authorizations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateNetworkMerakiAuthUser" + "." + "authorizations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkMerakiAuthUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkMerakiAuthUserBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkMerakiAuthUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkMerakiAuthUserParamsBodyAuthorizationsItems0 update network meraki auth user params body authorizations items0
swagger:model UpdateNetworkMerakiAuthUserParamsBodyAuthorizationsItems0
*/
type UpdateNetworkMerakiAuthUserParamsBodyAuthorizationsItems0 struct {

	// Date for authorization to expire. Default is for authorization to not expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`

	// SSID for which the user is being authorized
	// Required: true
	SsidNumber *int64 `json:"ssidNumber"`
}

// Validate validates this update network meraki auth user params body authorizations items0
func (o *UpdateNetworkMerakiAuthUserParamsBodyAuthorizationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSsidNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkMerakiAuthUserParamsBodyAuthorizationsItems0) validateSsidNumber(formats strfmt.Registry) error {

	if err := validate.Required("ssidNumber", "body", o.SsidNumber); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network meraki auth user params body authorizations items0 based on context it is used
func (o *UpdateNetworkMerakiAuthUserParamsBodyAuthorizationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkMerakiAuthUserParamsBodyAuthorizationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkMerakiAuthUserParamsBodyAuthorizationsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkMerakiAuthUserParamsBodyAuthorizationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
