// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkBluetoothClientParams creates a new GetNetworkBluetoothClientParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNetworkBluetoothClientParams() *GetNetworkBluetoothClientParams {
	return &GetNetworkBluetoothClientParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkBluetoothClientParamsWithTimeout creates a new GetNetworkBluetoothClientParams object
// with the ability to set a timeout on a request.
func NewGetNetworkBluetoothClientParamsWithTimeout(timeout time.Duration) *GetNetworkBluetoothClientParams {
	return &GetNetworkBluetoothClientParams{
		timeout: timeout,
	}
}

// NewGetNetworkBluetoothClientParamsWithContext creates a new GetNetworkBluetoothClientParams object
// with the ability to set a context for a request.
func NewGetNetworkBluetoothClientParamsWithContext(ctx context.Context) *GetNetworkBluetoothClientParams {
	return &GetNetworkBluetoothClientParams{
		Context: ctx,
	}
}

// NewGetNetworkBluetoothClientParamsWithHTTPClient creates a new GetNetworkBluetoothClientParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNetworkBluetoothClientParamsWithHTTPClient(client *http.Client) *GetNetworkBluetoothClientParams {
	return &GetNetworkBluetoothClientParams{
		HTTPClient: client,
	}
}

/* GetNetworkBluetoothClientParams contains all the parameters to send to the API endpoint
   for the get network bluetooth client operation.

   Typically these are written to a http.Request.
*/
type GetNetworkBluetoothClientParams struct {

	// BluetoothClientID.
	BluetoothClientID string

	/* ConnectivityHistoryTimespan.

	   The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used.
	*/
	ConnectivityHistoryTimespan *int64

	/* IncludeConnectivityHistory.

	   Include the connectivity history for this client
	*/
	IncludeConnectivityHistory *bool

	// NetworkID.
	NetworkID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get network bluetooth client params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkBluetoothClientParams) WithDefaults() *GetNetworkBluetoothClientParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get network bluetooth client params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkBluetoothClientParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) WithTimeout(timeout time.Duration) *GetNetworkBluetoothClientParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) WithContext(ctx context.Context) *GetNetworkBluetoothClientParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) WithHTTPClient(client *http.Client) *GetNetworkBluetoothClientParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBluetoothClientID adds the bluetoothClientID to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) WithBluetoothClientID(bluetoothClientID string) *GetNetworkBluetoothClientParams {
	o.SetBluetoothClientID(bluetoothClientID)
	return o
}

// SetBluetoothClientID adds the bluetoothClientId to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) SetBluetoothClientID(bluetoothClientID string) {
	o.BluetoothClientID = bluetoothClientID
}

// WithConnectivityHistoryTimespan adds the connectivityHistoryTimespan to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) WithConnectivityHistoryTimespan(connectivityHistoryTimespan *int64) *GetNetworkBluetoothClientParams {
	o.SetConnectivityHistoryTimespan(connectivityHistoryTimespan)
	return o
}

// SetConnectivityHistoryTimespan adds the connectivityHistoryTimespan to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) SetConnectivityHistoryTimespan(connectivityHistoryTimespan *int64) {
	o.ConnectivityHistoryTimespan = connectivityHistoryTimespan
}

// WithIncludeConnectivityHistory adds the includeConnectivityHistory to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) WithIncludeConnectivityHistory(includeConnectivityHistory *bool) *GetNetworkBluetoothClientParams {
	o.SetIncludeConnectivityHistory(includeConnectivityHistory)
	return o
}

// SetIncludeConnectivityHistory adds the includeConnectivityHistory to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) SetIncludeConnectivityHistory(includeConnectivityHistory *bool) {
	o.IncludeConnectivityHistory = includeConnectivityHistory
}

// WithNetworkID adds the networkID to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) WithNetworkID(networkID string) *GetNetworkBluetoothClientParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network bluetooth client params
func (o *GetNetworkBluetoothClientParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkBluetoothClientParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param bluetoothClientId
	if err := r.SetPathParam("bluetoothClientId", o.BluetoothClientID); err != nil {
		return err
	}

	if o.ConnectivityHistoryTimespan != nil {

		// query param connectivityHistoryTimespan
		var qrConnectivityHistoryTimespan int64

		if o.ConnectivityHistoryTimespan != nil {
			qrConnectivityHistoryTimespan = *o.ConnectivityHistoryTimespan
		}
		qConnectivityHistoryTimespan := swag.FormatInt64(qrConnectivityHistoryTimespan)
		if qConnectivityHistoryTimespan != "" {

			if err := r.SetQueryParam("connectivityHistoryTimespan", qConnectivityHistoryTimespan); err != nil {
				return err
			}
		}
	}

	if o.IncludeConnectivityHistory != nil {

		// query param includeConnectivityHistory
		var qrIncludeConnectivityHistory bool

		if o.IncludeConnectivityHistory != nil {
			qrIncludeConnectivityHistory = *o.IncludeConnectivityHistory
		}
		qIncludeConnectivityHistory := swag.FormatBool(qrIncludeConnectivityHistory)
		if qIncludeConnectivityHistory != "" {

			if err := r.SetQueryParam("includeConnectivityHistory", qIncludeConnectivityHistory); err != nil {
				return err
			}
		}
	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
