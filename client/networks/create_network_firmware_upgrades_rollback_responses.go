// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNetworkFirmwareUpgradesRollbackReader is a Reader for the CreateNetworkFirmwareUpgradesRollback structure.
type CreateNetworkFirmwareUpgradesRollbackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNetworkFirmwareUpgradesRollbackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateNetworkFirmwareUpgradesRollbackOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateNetworkFirmwareUpgradesRollbackOK creates a CreateNetworkFirmwareUpgradesRollbackOK with default headers values
func NewCreateNetworkFirmwareUpgradesRollbackOK() *CreateNetworkFirmwareUpgradesRollbackOK {
	return &CreateNetworkFirmwareUpgradesRollbackOK{}
}

/* CreateNetworkFirmwareUpgradesRollbackOK describes a response with status code 200, with default header values.

Successful operation
*/
type CreateNetworkFirmwareUpgradesRollbackOK struct {
	Payload interface{}
}

func (o *CreateNetworkFirmwareUpgradesRollbackOK) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/firmwareUpgrades/rollbacks][%d] createNetworkFirmwareUpgradesRollbackOK  %+v", 200, o.Payload)
}
func (o *CreateNetworkFirmwareUpgradesRollbackOK) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateNetworkFirmwareUpgradesRollbackOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateNetworkFirmwareUpgradesRollbackBody create network firmware upgrades rollback body
// Example: {"product":"switch","reasons":[{"category":"performance","comment":"Network was slower with the upgrade"},{"category":"stability","comment":"We saw some errors in the logs we didn't expect"}],"time":"2020-10-21T02:00:00Z","toVersion":{"id":"7857"}}
swagger:model CreateNetworkFirmwareUpgradesRollbackBody
*/
type CreateNetworkFirmwareUpgradesRollbackBody struct {

	// Product type to rollback (if the network is a combined network)
	// Enum: [wireless switch appliance camera vmxHost cellularGateway]
	Product string `json:"product,omitempty"`

	// Reasons for the rollback
	// Required: true
	Reasons []*CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0 `json:"reasons"`

	// Scheduled time for the rollback
	// Format: date-time
	Time strfmt.DateTime `json:"time,omitempty"`

	// to version
	ToVersion *CreateNetworkFirmwareUpgradesRollbackParamsBodyToVersion `json:"toVersion,omitempty"`
}

// Validate validates this create network firmware upgrades rollback body
func (o *CreateNetworkFirmwareUpgradesRollbackBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkFirmwareUpgradesRollbackBodyTypeProductPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wireless","switch","appliance","camera","vmxHost","cellularGateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkFirmwareUpgradesRollbackBodyTypeProductPropEnum = append(createNetworkFirmwareUpgradesRollbackBodyTypeProductPropEnum, v)
	}
}

const (

	// CreateNetworkFirmwareUpgradesRollbackBodyProductWireless captures enum value "wireless"
	CreateNetworkFirmwareUpgradesRollbackBodyProductWireless string = "wireless"

	// CreateNetworkFirmwareUpgradesRollbackBodyProductSwitch captures enum value "switch"
	CreateNetworkFirmwareUpgradesRollbackBodyProductSwitch string = "switch"

	// CreateNetworkFirmwareUpgradesRollbackBodyProductAppliance captures enum value "appliance"
	CreateNetworkFirmwareUpgradesRollbackBodyProductAppliance string = "appliance"

	// CreateNetworkFirmwareUpgradesRollbackBodyProductCamera captures enum value "camera"
	CreateNetworkFirmwareUpgradesRollbackBodyProductCamera string = "camera"

	// CreateNetworkFirmwareUpgradesRollbackBodyProductVmxHost captures enum value "vmxHost"
	CreateNetworkFirmwareUpgradesRollbackBodyProductVmxHost string = "vmxHost"

	// CreateNetworkFirmwareUpgradesRollbackBodyProductCellularGateway captures enum value "cellularGateway"
	CreateNetworkFirmwareUpgradesRollbackBodyProductCellularGateway string = "cellularGateway"
)

// prop value enum
func (o *CreateNetworkFirmwareUpgradesRollbackBody) validateProductEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkFirmwareUpgradesRollbackBodyTypeProductPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkFirmwareUpgradesRollbackBody) validateProduct(formats strfmt.Registry) error {
	if swag.IsZero(o.Product) { // not required
		return nil
	}

	// value enum
	if err := o.validateProductEnum("createNetworkFirmwareUpgradesRollback"+"."+"product", "body", o.Product); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkFirmwareUpgradesRollbackBody) validateReasons(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkFirmwareUpgradesRollback"+"."+"reasons", "body", o.Reasons); err != nil {
		return err
	}

	for i := 0; i < len(o.Reasons); i++ {
		if swag.IsZero(o.Reasons[i]) { // not required
			continue
		}

		if o.Reasons[i] != nil {
			if err := o.Reasons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createNetworkFirmwareUpgradesRollback" + "." + "reasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createNetworkFirmwareUpgradesRollback" + "." + "reasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateNetworkFirmwareUpgradesRollbackBody) validateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.Time) { // not required
		return nil
	}

	if err := validate.FormatOf("createNetworkFirmwareUpgradesRollback"+"."+"time", "body", "date-time", o.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkFirmwareUpgradesRollbackBody) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkFirmwareUpgradesRollback" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkFirmwareUpgradesRollback" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network firmware upgrades rollback body based on the context it is used
func (o *CreateNetworkFirmwareUpgradesRollbackBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateReasons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkFirmwareUpgradesRollbackBody) contextValidateReasons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Reasons); i++ {

		if o.Reasons[i] != nil {
			if err := o.Reasons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createNetworkFirmwareUpgradesRollback" + "." + "reasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createNetworkFirmwareUpgradesRollback" + "." + "reasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateNetworkFirmwareUpgradesRollbackBody) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkFirmwareUpgradesRollback" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkFirmwareUpgradesRollback" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkFirmwareUpgradesRollbackBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkFirmwareUpgradesRollbackBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkFirmwareUpgradesRollbackBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0 create network firmware upgrades rollback params body reasons items0
swagger:model CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0
*/
type CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0 struct {

	// Reason for the rollback
	// Required: true
	// Enum: [performance stability broke old features unifying networks versions testing other]
	Category *string `json:"category"`

	// Additional comment about the rollback
	// Required: true
	Comment *string `json:"comment"`
}

// Validate validates this create network firmware upgrades rollback params body reasons items0
func (o *CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0TypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["performance","stability","broke old features","unifying networks versions","testing","other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0TypeCategoryPropEnum = append(createNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0TypeCategoryPropEnum, v)
	}
}

const (

	// CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryPerformance captures enum value "performance"
	CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryPerformance string = "performance"

	// CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryStability captures enum value "stability"
	CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryStability string = "stability"

	// CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryBrokeOldFeatures captures enum value "broke old features"
	CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryBrokeOldFeatures string = "broke old features"

	// CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryUnifyingNetworksVersions captures enum value "unifying networks versions"
	CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryUnifyingNetworksVersions string = "unifying networks versions"

	// CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryTesting captures enum value "testing"
	CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryTesting string = "testing"

	// CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryOther captures enum value "other"
	CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0CategoryOther string = "other"
)

// prop value enum
func (o *CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0TypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", o.Category); err != nil {
		return err
	}

	// value enum
	if err := o.validateCategoryEnum("category", "body", *o.Category); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0) validateComment(formats strfmt.Registry) error {

	if err := validate.Required("comment", "body", o.Comment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create network firmware upgrades rollback params body reasons items0 based on context it is used
func (o *CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0) UnmarshalBinary(b []byte) error {
	var res CreateNetworkFirmwareUpgradesRollbackParamsBodyReasonsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateNetworkFirmwareUpgradesRollbackParamsBodyToVersion Version to downgrade to (if the network has firmware flexibility)
swagger:model CreateNetworkFirmwareUpgradesRollbackParamsBodyToVersion
*/
type CreateNetworkFirmwareUpgradesRollbackParamsBodyToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this create network firmware upgrades rollback params body to version
func (o *CreateNetworkFirmwareUpgradesRollbackParamsBodyToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network firmware upgrades rollback params body to version based on context it is used
func (o *CreateNetworkFirmwareUpgradesRollbackParamsBodyToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkFirmwareUpgradesRollbackParamsBodyToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkFirmwareUpgradesRollbackParamsBodyToVersion) UnmarshalBinary(b []byte) error {
	var res CreateNetworkFirmwareUpgradesRollbackParamsBodyToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
