// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkMqttBrokerReader is a Reader for the UpdateNetworkMqttBroker structure.
type UpdateNetworkMqttBrokerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkMqttBrokerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkMqttBrokerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkMqttBrokerOK creates a UpdateNetworkMqttBrokerOK with default headers values
func NewUpdateNetworkMqttBrokerOK() *UpdateNetworkMqttBrokerOK {
	return &UpdateNetworkMqttBrokerOK{}
}

/* UpdateNetworkMqttBrokerOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkMqttBrokerOK struct {
	Payload interface{}
}

func (o *UpdateNetworkMqttBrokerOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/mqttBrokers/{mqttBrokerId}][%d] updateNetworkMqttBrokerOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkMqttBrokerOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkMqttBrokerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkMqttBrokerBody update network mqtt broker body
// Example: {"authentication":{"username":"Username"},"host":"1.1.1.1","id":"1234","name":"MQTT_Broker_1","port":1234,"security":{"mode":"tls","tls":{"hasCaCertificate":true,"verifyHostnames":true}}}
swagger:model UpdateNetworkMqttBrokerBody
*/
type UpdateNetworkMqttBrokerBody struct {

	// Authentication settings of the MQTT broker
	Authentication interface{} `json:"authentication,omitempty"`

	// Host name/IP address where the MQTT broker runs.
	Host string `json:"host,omitempty"`

	// Name of the MQTT broker.
	Name string `json:"name,omitempty"`

	// Host port though which the MQTT broker can be reached.
	Port int64 `json:"port,omitempty"`

	// security
	Security *UpdateNetworkMqttBrokerParamsBodySecurity `json:"security,omitempty"`
}

// Validate validates this update network mqtt broker body
func (o *UpdateNetworkMqttBrokerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkMqttBrokerBody) validateSecurity(formats strfmt.Registry) error {
	if swag.IsZero(o.Security) { // not required
		return nil
	}

	if o.Security != nil {
		if err := o.Security.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkMqttBroker" + "." + "security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkMqttBroker" + "." + "security")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network mqtt broker body based on the context it is used
func (o *UpdateNetworkMqttBrokerBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkMqttBrokerBody) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if o.Security != nil {
		if err := o.Security.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkMqttBroker" + "." + "security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkMqttBroker" + "." + "security")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkMqttBrokerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkMqttBrokerBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkMqttBrokerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkMqttBrokerParamsBodySecurity Security settings of the MQTT broker.
swagger:model UpdateNetworkMqttBrokerParamsBodySecurity
*/
type UpdateNetworkMqttBrokerParamsBodySecurity struct {

	// Security protocol of the MQTT broker.
	Mode string `json:"mode,omitempty"`

	// security
	Security *UpdateNetworkMqttBrokerParamsBodySecuritySecurity `json:"security,omitempty"`
}

// Validate validates this update network mqtt broker params body security
func (o *UpdateNetworkMqttBrokerParamsBodySecurity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkMqttBrokerParamsBodySecurity) validateSecurity(formats strfmt.Registry) error {
	if swag.IsZero(o.Security) { // not required
		return nil
	}

	if o.Security != nil {
		if err := o.Security.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkMqttBroker" + "." + "security" + "." + "security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkMqttBroker" + "." + "security" + "." + "security")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network mqtt broker params body security based on the context it is used
func (o *UpdateNetworkMqttBrokerParamsBodySecurity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkMqttBrokerParamsBodySecurity) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if o.Security != nil {
		if err := o.Security.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkMqttBroker" + "." + "security" + "." + "security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkMqttBroker" + "." + "security" + "." + "security")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkMqttBrokerParamsBodySecurity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkMqttBrokerParamsBodySecurity) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkMqttBrokerParamsBodySecurity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkMqttBrokerParamsBodySecuritySecurity TLS settings of the MQTT broker.
swagger:model UpdateNetworkMqttBrokerParamsBodySecuritySecurity
*/
type UpdateNetworkMqttBrokerParamsBodySecuritySecurity struct {

	// CA Certificate of the MQTT broker.
	CaCertificate string `json:"caCertificate,omitempty"`

	// Whether the TLS hostname verification is enabled for the MQTT broker.
	VerifyHostnames bool `json:"verifyHostnames,omitempty"`
}

// Validate validates this update network mqtt broker params body security security
func (o *UpdateNetworkMqttBrokerParamsBodySecuritySecurity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network mqtt broker params body security security based on context it is used
func (o *UpdateNetworkMqttBrokerParamsBodySecuritySecurity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkMqttBrokerParamsBodySecuritySecurity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkMqttBrokerParamsBodySecuritySecurity) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkMqttBrokerParamsBodySecuritySecurity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
