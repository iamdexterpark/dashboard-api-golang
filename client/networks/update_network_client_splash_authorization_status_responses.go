// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkClientSplashAuthorizationStatusReader is a Reader for the UpdateNetworkClientSplashAuthorizationStatus structure.
type UpdateNetworkClientSplashAuthorizationStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkClientSplashAuthorizationStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkClientSplashAuthorizationStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkClientSplashAuthorizationStatusOK creates a UpdateNetworkClientSplashAuthorizationStatusOK with default headers values
func NewUpdateNetworkClientSplashAuthorizationStatusOK() *UpdateNetworkClientSplashAuthorizationStatusOK {
	return &UpdateNetworkClientSplashAuthorizationStatusOK{}
}

/* UpdateNetworkClientSplashAuthorizationStatusOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkClientSplashAuthorizationStatusOK struct {
	Payload interface{}
}

func (o *UpdateNetworkClientSplashAuthorizationStatusOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/clients/{clientId}/splashAuthorizationStatus][%d] updateNetworkClientSplashAuthorizationStatusOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkClientSplashAuthorizationStatusOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkClientSplashAuthorizationStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusBody update network client splash authorization status body
// Example: {"ssids":{"0":{"isAuthorized":true},"2":{"isAuthorized":false}}}
swagger:model UpdateNetworkClientSplashAuthorizationStatusBody
*/
type UpdateNetworkClientSplashAuthorizationStatusBody struct {

	// ssids
	// Required: true
	Ssids *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids `json:"ssids"`
}

// Validate validates this update network client splash authorization status body
func (o *UpdateNetworkClientSplashAuthorizationStatusBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSsids(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusBody) validateSsids(formats strfmt.Registry) error {

	if err := validate.Required("updateNetworkClientSplashAuthorizationStatus"+"."+"ssids", "body", o.Ssids); err != nil {
		return err
	}

	if o.Ssids != nil {
		if err := o.Ssids.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network client splash authorization status body based on the context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSsids(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusBody) contextValidateSsids(ctx context.Context, formats strfmt.Registry) error {

	if o.Ssids != nil {
		if err := o.Ssids.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids The target SSIDs. Each SSID must be enabled and must have Click-through splash enabled. For each SSID where isAuthorized is true, the expiration time will automatically be set according to the SSID's splash frequency. Not all networks support configuring all SSIDs
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids struct {

	// 0
	Nr0 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr0 `json:"0,omitempty"`

	// 1
	Nr1 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr1 `json:"1,omitempty"`

	// 10
	Nr10 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr10 `json:"10,omitempty"`

	// 11
	Nr11 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr11 `json:"11,omitempty"`

	// 12
	Nr12 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr12 `json:"12,omitempty"`

	// 13
	Nr13 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr13 `json:"13,omitempty"`

	// 14
	Nr14 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr14 `json:"14,omitempty"`

	// 2
	Nr2 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr2 `json:"2,omitempty"`

	// 3
	Nr3 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr3 `json:"3,omitempty"`

	// 4
	Nr4 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr4 `json:"4,omitempty"`

	// 5
	Nr5 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr5 `json:"5,omitempty"`

	// 6
	Nr6 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr6 `json:"6,omitempty"`

	// 7
	Nr7 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr7 `json:"7,omitempty"`

	// 8
	Nr8 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr8 `json:"8,omitempty"`

	// 9
	Nr9 *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr9 `json:"9,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr0(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr10(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr11(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr12(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr13(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr14(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr5(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr6(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr7(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr8(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr9(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr0(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr0) { // not required
		return nil
	}

	if o.Nr0 != nil {
		if err := o.Nr0.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr10(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr10) { // not required
		return nil
	}

	if o.Nr10 != nil {
		if err := o.Nr10.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr11(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr11) { // not required
		return nil
	}

	if o.Nr11 != nil {
		if err := o.Nr11.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr12(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr12) { // not required
		return nil
	}

	if o.Nr12 != nil {
		if err := o.Nr12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr13(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr13) { // not required
		return nil
	}

	if o.Nr13 != nil {
		if err := o.Nr13.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr14(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr14) { // not required
		return nil
	}

	if o.Nr14 != nil {
		if err := o.Nr14.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr5(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr5) { // not required
		return nil
	}

	if o.Nr5 != nil {
		if err := o.Nr5.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr6(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr6) { // not required
		return nil
	}

	if o.Nr6 != nil {
		if err := o.Nr6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr7(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr7) { // not required
		return nil
	}

	if o.Nr7 != nil {
		if err := o.Nr7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr8(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr8) { // not required
		return nil
	}

	if o.Nr8 != nil {
		if err := o.Nr8.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) validateNr9(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr9) { // not required
		return nil
	}

	if o.Nr9 != nil {
		if err := o.Nr9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network client splash authorization status params body ssids based on the context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr0(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr10(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr11(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr12(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr13(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr14(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr5(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr7(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr8(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr9(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr0(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr0 != nil {
		if err := o.Nr0.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {
		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr10(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr10 != nil {
		if err := o.Nr10.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr11(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr11 != nil {
		if err := o.Nr11.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr12(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr12 != nil {
		if err := o.Nr12.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr13(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr13 != nil {
		if err := o.Nr13.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr14(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr14 != nil {
		if err := o.Nr14.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {
		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {
		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {
		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr5(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr5 != nil {
		if err := o.Nr5.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr6(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr6 != nil {
		if err := o.Nr6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr7(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr7 != nil {
		if err := o.Nr7.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr8(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr8 != nil {
		if err := o.Nr8.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) contextValidateNr9(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr9 != nil {
		if err := o.Nr9.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkClientSplashAuthorizationStatus" + "." + "ssids" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsids
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr0 Splash authorization for SSID 0
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr0
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr0 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr0
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr0 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr0) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr1 Splash authorization for SSID 1
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr1
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr1 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr1
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr1) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr1 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr1) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr10 Splash authorization for SSID 10
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr10
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr10 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr10
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr10) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr10 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr10) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr10) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr10) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr10
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr11 Splash authorization for SSID 11
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr11
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr11 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr11
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr11) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr11 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr11) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr11) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr11) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr11
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr12 Splash authorization for SSID 12
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr12
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr12 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr12
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr12) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr12 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr12) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr12) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr12) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr13 Splash authorization for SSID 13
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr13
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr13 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr13
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr13) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr13 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr13) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr13) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr13) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr13
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr14 Splash authorization for SSID 14
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr14
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr14 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr14
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr14) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr14 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr14) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr14) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr14) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr14
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr2 Splash authorization for SSID 2
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr2
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr2 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr2
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr2) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr2 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr2) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr3 Splash authorization for SSID 3
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr3
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr3 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr3
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr3) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr3 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr3) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr4 Splash authorization for SSID 4
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr4
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr4 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr4
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr4) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr4 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr4) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr5 Splash authorization for SSID 5
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr5
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr5 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr5
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr5) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr5 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr5) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr5) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr6 Splash authorization for SSID 6
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr6
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr6 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr6
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr6) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr6 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr6) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr6) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr7 Splash authorization for SSID 7
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr7
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr7 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr7
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr7) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr7 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr7) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr7) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr7) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr8 Splash authorization for SSID 8
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr8
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr8 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr8
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr8) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr8 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr8) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr8) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr8) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr8
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr9 Splash authorization for SSID 9
swagger:model UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr9
*/
type UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr9 struct {

	// New authorization status for the SSID (true, false).
	IsAuthorized bool `json:"isAuthorized,omitempty"`
}

// Validate validates this update network client splash authorization status params body ssids nr9
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr9) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network client splash authorization status params body ssids nr9 based on context it is used
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr9) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr9) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr9) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkClientSplashAuthorizationStatusParamsBodySsidsNr9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
