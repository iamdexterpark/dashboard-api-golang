// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BindNetwork(params *BindNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BindNetworkOK, error)

	ClaimNetworkDevices(params *ClaimNetworkDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClaimNetworkDevicesOK, error)

	CreateNetworkFirmwareUpgradesRollback(params *CreateNetworkFirmwareUpgradesRollbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkFirmwareUpgradesRollbackOK, error)

	CreateNetworkFloorPlan(params *CreateNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkFloorPlanCreated, error)

	CreateNetworkGroupPolicy(params *CreateNetworkGroupPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkGroupPolicyCreated, error)

	CreateNetworkMerakiAuthUser(params *CreateNetworkMerakiAuthUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkMerakiAuthUserCreated, error)

	CreateNetworkMqttBroker(params *CreateNetworkMqttBrokerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkMqttBrokerCreated, error)

	CreateNetworkPiiRequest(params *CreateNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkPiiRequestCreated, error)

	CreateNetworkWebhooksHTTPServer(params *CreateNetworkWebhooksHTTPServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkWebhooksHTTPServerCreated, error)

	CreateNetworkWebhooksPayloadTemplate(params *CreateNetworkWebhooksPayloadTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkWebhooksPayloadTemplateCreated, error)

	CreateNetworkWebhooksWebhookTest(params *CreateNetworkWebhooksWebhookTestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkWebhooksWebhookTestCreated, error)

	DeleteNetwork(params *DeleteNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkNoContent, error)

	DeleteNetworkFloorPlan(params *DeleteNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkFloorPlanNoContent, error)

	DeleteNetworkGroupPolicy(params *DeleteNetworkGroupPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkGroupPolicyNoContent, error)

	DeleteNetworkMerakiAuthUser(params *DeleteNetworkMerakiAuthUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkMerakiAuthUserNoContent, error)

	DeleteNetworkMqttBroker(params *DeleteNetworkMqttBrokerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkMqttBrokerNoContent, error)

	DeleteNetworkPiiRequest(params *DeleteNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkPiiRequestNoContent, error)

	DeleteNetworkWebhooksHTTPServer(params *DeleteNetworkWebhooksHTTPServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkWebhooksHTTPServerNoContent, error)

	DeleteNetworkWebhooksPayloadTemplate(params *DeleteNetworkWebhooksPayloadTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkWebhooksPayloadTemplateNoContent, error)

	GetNetwork(params *GetNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkOK, error)

	GetNetworkAlertsSettings(params *GetNetworkAlertsSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkAlertsSettingsOK, error)

	GetNetworkBluetoothClient(params *GetNetworkBluetoothClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkBluetoothClientOK, error)

	GetNetworkBluetoothClients(params *GetNetworkBluetoothClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkBluetoothClientsOK, error)

	GetNetworkClient(params *GetNetworkClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientOK, error)

	GetNetworkClientPolicy(params *GetNetworkClientPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientPolicyOK, error)

	GetNetworkClientSplashAuthorizationStatus(params *GetNetworkClientSplashAuthorizationStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientSplashAuthorizationStatusOK, error)

	GetNetworkClientTrafficHistory(params *GetNetworkClientTrafficHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientTrafficHistoryOK, error)

	GetNetworkClientUsageHistory(params *GetNetworkClientUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientUsageHistoryOK, error)

	GetNetworkClients(params *GetNetworkClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientsOK, error)

	GetNetworkClientsApplicationUsage(params *GetNetworkClientsApplicationUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientsApplicationUsageOK, error)

	GetNetworkClientsBandwidthUsageHistory(params *GetNetworkClientsBandwidthUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientsBandwidthUsageHistoryOK, error)

	GetNetworkClientsOverview(params *GetNetworkClientsOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientsOverviewOK, error)

	GetNetworkClientsUsageHistories(params *GetNetworkClientsUsageHistoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientsUsageHistoriesOK, error)

	GetNetworkDevices(params *GetNetworkDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkDevicesOK, error)

	GetNetworkEvents(params *GetNetworkEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkEventsOK, error)

	GetNetworkEventsEventTypes(params *GetNetworkEventsEventTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkEventsEventTypesOK, error)

	GetNetworkFirmwareUpgrades(params *GetNetworkFirmwareUpgradesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkFirmwareUpgradesOK, error)

	GetNetworkFloorPlan(params *GetNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkFloorPlanOK, error)

	GetNetworkFloorPlans(params *GetNetworkFloorPlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkFloorPlansOK, error)

	GetNetworkGroupPolicies(params *GetNetworkGroupPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkGroupPoliciesOK, error)

	GetNetworkGroupPolicy(params *GetNetworkGroupPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkGroupPolicyOK, error)

	GetNetworkHealthAlerts(params *GetNetworkHealthAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkHealthAlertsOK, error)

	GetNetworkMerakiAuthUser(params *GetNetworkMerakiAuthUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkMerakiAuthUserOK, error)

	GetNetworkMerakiAuthUsers(params *GetNetworkMerakiAuthUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkMerakiAuthUsersOK, error)

	GetNetworkMqttBroker(params *GetNetworkMqttBrokerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkMqttBrokerOK, error)

	GetNetworkMqttBrokers(params *GetNetworkMqttBrokersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkMqttBrokersOK, error)

	GetNetworkNetflow(params *GetNetworkNetflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkNetflowOK, error)

	GetNetworkNetworkHealthChannelUtilization(params *GetNetworkNetworkHealthChannelUtilizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkNetworkHealthChannelUtilizationOK, error)

	GetNetworkPiiPiiKeys(params *GetNetworkPiiPiiKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkPiiPiiKeysOK, error)

	GetNetworkPiiRequest(params *GetNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkPiiRequestOK, error)

	GetNetworkPiiRequests(params *GetNetworkPiiRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkPiiRequestsOK, error)

	GetNetworkPiiSmDevicesForKey(params *GetNetworkPiiSmDevicesForKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkPiiSmDevicesForKeyOK, error)

	GetNetworkPiiSmOwnersForKey(params *GetNetworkPiiSmOwnersForKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkPiiSmOwnersForKeyOK, error)

	GetNetworkSettings(params *GetNetworkSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSettingsOK, error)

	GetNetworkSnmp(params *GetNetworkSnmpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSnmpOK, error)

	GetNetworkSplashLoginAttempts(params *GetNetworkSplashLoginAttemptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSplashLoginAttemptsOK, error)

	GetNetworkSyslogServers(params *GetNetworkSyslogServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSyslogServersOK, error)

	GetNetworkTopologyLinkLayer(params *GetNetworkTopologyLinkLayerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkTopologyLinkLayerOK, error)

	GetNetworkTraffic(params *GetNetworkTrafficParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkTrafficOK, error)

	GetNetworkTrafficAnalysis(params *GetNetworkTrafficAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkTrafficAnalysisOK, error)

	GetNetworkTrafficShapingApplicationCategories(params *GetNetworkTrafficShapingApplicationCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkTrafficShapingApplicationCategoriesOK, error)

	GetNetworkTrafficShapingDscpTaggingOptions(params *GetNetworkTrafficShapingDscpTaggingOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkTrafficShapingDscpTaggingOptionsOK, error)

	GetNetworkWebhooksHTTPServer(params *GetNetworkWebhooksHTTPServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWebhooksHTTPServerOK, error)

	GetNetworkWebhooksHTTPServers(params *GetNetworkWebhooksHTTPServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWebhooksHTTPServersOK, error)

	GetNetworkWebhooksPayloadTemplate(params *GetNetworkWebhooksPayloadTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWebhooksPayloadTemplateOK, error)

	GetNetworkWebhooksPayloadTemplates(params *GetNetworkWebhooksPayloadTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWebhooksPayloadTemplatesOK, error)

	GetNetworkWebhooksWebhookTest(params *GetNetworkWebhooksWebhookTestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWebhooksWebhookTestOK, error)

	ProvisionNetworkClients(params *ProvisionNetworkClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProvisionNetworkClientsCreated, error)

	RemoveNetworkDevices(params *RemoveNetworkDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveNetworkDevicesNoContent, error)

	SplitNetwork(params *SplitNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SplitNetworkOK, error)

	UnbindNetwork(params *UnbindNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnbindNetworkOK, error)

	UpdateNetwork(params *UpdateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkOK, error)

	UpdateNetworkAlertsSettings(params *UpdateNetworkAlertsSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkAlertsSettingsOK, error)

	UpdateNetworkClientPolicy(params *UpdateNetworkClientPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkClientPolicyOK, error)

	UpdateNetworkClientSplashAuthorizationStatus(params *UpdateNetworkClientSplashAuthorizationStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkClientSplashAuthorizationStatusOK, error)

	UpdateNetworkFirmwareUpgrades(params *UpdateNetworkFirmwareUpgradesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkFirmwareUpgradesOK, error)

	UpdateNetworkFloorPlan(params *UpdateNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkFloorPlanOK, error)

	UpdateNetworkGroupPolicy(params *UpdateNetworkGroupPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkGroupPolicyOK, error)

	UpdateNetworkMerakiAuthUser(params *UpdateNetworkMerakiAuthUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkMerakiAuthUserOK, error)

	UpdateNetworkMqttBroker(params *UpdateNetworkMqttBrokerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkMqttBrokerOK, error)

	UpdateNetworkNetflow(params *UpdateNetworkNetflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkNetflowOK, error)

	UpdateNetworkSettings(params *UpdateNetworkSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSettingsOK, error)

	UpdateNetworkSnmp(params *UpdateNetworkSnmpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSnmpOK, error)

	UpdateNetworkSyslogServers(params *UpdateNetworkSyslogServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSyslogServersOK, error)

	UpdateNetworkTrafficAnalysis(params *UpdateNetworkTrafficAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkTrafficAnalysisOK, error)

	UpdateNetworkWebhooksHTTPServer(params *UpdateNetworkWebhooksHTTPServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWebhooksHTTPServerOK, error)

	UpdateNetworkWebhooksPayloadTemplate(params *UpdateNetworkWebhooksPayloadTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWebhooksPayloadTemplateOK, error)

	VmxNetworkDevicesClaim(params *VmxNetworkDevicesClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VmxNetworkDevicesClaimOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BindNetwork binds a network to a template

  Bind a network to a template.
*/
func (a *Client) BindNetwork(params *BindNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BindNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBindNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bindNetwork",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/bind",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BindNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BindNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bindNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ClaimNetworkDevices claims devices into a network note for recently claimed devices it may take a few minutes for API requsts against that device to succeed

  Claim devices into a network. (Note: for recently claimed devices, it may take a few minutes for API requsts against that device to succeed)
*/
func (a *Client) ClaimNetworkDevices(params *ClaimNetworkDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClaimNetworkDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClaimNetworkDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "claimNetworkDevices",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/devices/claim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClaimNetworkDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClaimNetworkDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for claimNetworkDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkFirmwareUpgradesRollback rollbacks a firmware upgrade for a network

  Rollback a Firmware Upgrade For A Network
*/
func (a *Client) CreateNetworkFirmwareUpgradesRollback(params *CreateNetworkFirmwareUpgradesRollbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkFirmwareUpgradesRollbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkFirmwareUpgradesRollbackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkFirmwareUpgradesRollback",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/firmwareUpgrades/rollbacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkFirmwareUpgradesRollbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkFirmwareUpgradesRollbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkFirmwareUpgradesRollback: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkFloorPlan uploads a floor plan

  Upload a floor plan
*/
func (a *Client) CreateNetworkFloorPlan(params *CreateNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkFloorPlanCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkFloorPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkFloorPlan",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/floorPlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkFloorPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkFloorPlanCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkFloorPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkGroupPolicy creates a group policy

  Create a group policy
*/
func (a *Client) CreateNetworkGroupPolicy(params *CreateNetworkGroupPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkGroupPolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkGroupPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkGroupPolicy",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/groupPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkGroupPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkGroupPolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkGroupPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkMerakiAuthUser authorizes a user configured with meraki authentication for a network currently supports 802 1 x splash guest and client v p n users and currently organizations have a 50 000 user cap

  Authorize a user configured with Meraki Authentication for a network (currently supports 802.1X, splash guest, and client VPN users, and currently, organizations have a 50,000 user cap)
*/
func (a *Client) CreateNetworkMerakiAuthUser(params *CreateNetworkMerakiAuthUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkMerakiAuthUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkMerakiAuthUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkMerakiAuthUser",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/merakiAuthUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkMerakiAuthUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkMerakiAuthUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkMerakiAuthUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkMqttBroker adds an m q t t broker

  Add an MQTT broker
*/
func (a *Client) CreateNetworkMqttBroker(params *CreateNetworkMqttBrokerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkMqttBrokerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkMqttBrokerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkMqttBroker",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/mqttBrokers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkMqttBrokerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkMqttBrokerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkMqttBroker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkPiiRequest submits a new delete or restrict processing p i i request

  Submit a new delete or restrict processing PII request

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests
```
*/
func (a *Client) CreateNetworkPiiRequest(params *CreateNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkPiiRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkPiiRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkPiiRequest",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/pii/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkPiiRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkPiiRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkPiiRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkWebhooksHTTPServer adds an HTTP server to a network

  Add an HTTP server to a network
*/
func (a *Client) CreateNetworkWebhooksHTTPServer(params *CreateNetworkWebhooksHTTPServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkWebhooksHTTPServerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkWebhooksHTTPServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkWebhooksHttpServer",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/webhooks/httpServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkWebhooksHTTPServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkWebhooksHTTPServerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkWebhooksHttpServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkWebhooksPayloadTemplate creates a webhook payload template for a network

  Create a webhook payload template for a network
*/
func (a *Client) CreateNetworkWebhooksPayloadTemplate(params *CreateNetworkWebhooksPayloadTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkWebhooksPayloadTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkWebhooksPayloadTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkWebhooksPayloadTemplate",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/webhooks/payloadTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkWebhooksPayloadTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkWebhooksPayloadTemplateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkWebhooksPayloadTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkWebhooksWebhookTest sends a test webhook for a network

  Send a test webhook for a network
*/
func (a *Client) CreateNetworkWebhooksWebhookTest(params *CreateNetworkWebhooksWebhookTestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkWebhooksWebhookTestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkWebhooksWebhookTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkWebhooksWebhookTest",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/webhooks/webhookTests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkWebhooksWebhookTestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkWebhooksWebhookTestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkWebhooksWebhookTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetwork deletes a network

  Delete a network
*/
func (a *Client) DeleteNetwork(params *DeleteNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetwork",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkFloorPlan destroys a floor plan

  Destroy a floor plan
*/
func (a *Client) DeleteNetworkFloorPlan(params *DeleteNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkFloorPlanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkFloorPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkFloorPlan",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/floorPlans/{floorPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkFloorPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkFloorPlanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkFloorPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkGroupPolicy deletes a group policy

  Delete a group policy
*/
func (a *Client) DeleteNetworkGroupPolicy(params *DeleteNetworkGroupPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkGroupPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkGroupPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkGroupPolicy",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/groupPolicies/{groupPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkGroupPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkGroupPolicyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkGroupPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkMerakiAuthUser deauthorizes a user

  Deauthorize a user. To reauthorize a user after deauthorizing them, POST to this endpoint. (Currently, 802.1X RADIUS, splash guest, and client VPN users can be deauthorized.)
*/
func (a *Client) DeleteNetworkMerakiAuthUser(params *DeleteNetworkMerakiAuthUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkMerakiAuthUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkMerakiAuthUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkMerakiAuthUser",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkMerakiAuthUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkMerakiAuthUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkMerakiAuthUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkMqttBroker deletes an m q t t broker

  Delete an MQTT broker
*/
func (a *Client) DeleteNetworkMqttBroker(params *DeleteNetworkMqttBrokerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkMqttBrokerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkMqttBrokerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkMqttBroker",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/mqttBrokers/{mqttBrokerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkMqttBrokerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkMqttBrokerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkMqttBroker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkPiiRequest deletes a restrict processing p i i request

  Delete a restrict processing PII request

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests/{requestId}
```
*/
func (a *Client) DeleteNetworkPiiRequest(params *DeleteNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkPiiRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkPiiRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkPiiRequest",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/pii/requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkPiiRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkPiiRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkPiiRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkWebhooksHTTPServer deletes an HTTP server from a network

  Delete an HTTP server from a network
*/
func (a *Client) DeleteNetworkWebhooksHTTPServer(params *DeleteNetworkWebhooksHTTPServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkWebhooksHTTPServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkWebhooksHTTPServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkWebhooksHttpServer",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/webhooks/httpServers/{httpServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkWebhooksHTTPServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkWebhooksHTTPServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkWebhooksHttpServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkWebhooksPayloadTemplate destroys a webhook payload template for a network

  Destroy a webhook payload template for a network. Does not work for included templates ('wpt_00001', 'wpt_00002', 'wpt_00003' or 'wpt_00004')
*/
func (a *Client) DeleteNetworkWebhooksPayloadTemplate(params *DeleteNetworkWebhooksPayloadTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkWebhooksPayloadTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkWebhooksPayloadTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkWebhooksPayloadTemplate",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkWebhooksPayloadTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkWebhooksPayloadTemplateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkWebhooksPayloadTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetwork returns a network

  Return a network
*/
func (a *Client) GetNetwork(params *GetNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetwork",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkAlertsSettings returns the alert configuration for this network

  Return the alert configuration for this network
*/
func (a *Client) GetNetworkAlertsSettings(params *GetNetworkAlertsSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkAlertsSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkAlertsSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkAlertsSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/alerts/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkAlertsSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkAlertsSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkAlertsSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkBluetoothClient returns a bluetooth client

  Return a Bluetooth client. Bluetooth clients can be identified by their ID or their MAC.
*/
func (a *Client) GetNetworkBluetoothClient(params *GetNetworkBluetoothClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkBluetoothClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkBluetoothClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkBluetoothClient",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/bluetoothClients/{bluetoothClientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkBluetoothClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkBluetoothClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkBluetoothClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkBluetoothClients lists the bluetooth clients seen by a ps in this network

  List the Bluetooth clients seen by APs in this network
*/
func (a *Client) GetNetworkBluetoothClients(params *GetNetworkBluetoothClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkBluetoothClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkBluetoothClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkBluetoothClients",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/bluetoothClients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkBluetoothClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkBluetoothClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkBluetoothClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClient returns the client associated with the given identifier

  Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClient(params *GetNetworkClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkClient",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientPolicy returns the policy assigned to a client on the network

  Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientPolicy(params *GetNetworkClientPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkClientPolicy",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientSplashAuthorizationStatus returns the splash authorization for a client for each s s ID they ve associated with through splash

  Return the splash authorization for a client, for each SSID they've associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientSplashAuthorizationStatus(params *GetNetworkClientSplashAuthorizationStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientSplashAuthorizationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientSplashAuthorizationStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkClientSplashAuthorizationStatus",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientSplashAuthorizationStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientSplashAuthorizationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientSplashAuthorizationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientTrafficHistory returns the client s network traffic data over time

  Return the client's network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide > General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientTrafficHistory(params *GetNetworkClientTrafficHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientTrafficHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientTrafficHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkClientTrafficHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/trafficHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientTrafficHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientTrafficHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientTrafficHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientUsageHistory returns the client s daily usage history

  Return the client's daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientUsageHistory(params *GetNetworkClientUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientUsageHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientUsageHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkClientUsageHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/usageHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientUsageHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientUsageHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientUsageHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClients lists the clients that have used this network in the timespan

  List the clients that have used this network in the timespan
*/
func (a *Client) GetNetworkClients(params *GetNetworkClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkClients",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientsApplicationUsage returns the application usage data for clients

  Return the application usage data for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientsApplicationUsage(params *GetNetworkClientsApplicationUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientsApplicationUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientsApplicationUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkClientsApplicationUsage",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/applicationUsage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientsApplicationUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientsApplicationUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientsApplicationUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientsBandwidthUsageHistory returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan in megabits per second

  Returns a timeseries of total traffic consumption rates for all clients on a network within a given timespan, in megabits per second.
*/
func (a *Client) GetNetworkClientsBandwidthUsageHistory(params *GetNetworkClientsBandwidthUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientsBandwidthUsageHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientsBandwidthUsageHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkClientsBandwidthUsageHistory",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/bandwidthUsageHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientsBandwidthUsageHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientsBandwidthUsageHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientsBandwidthUsageHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientsOverview returns overview statistics for network clients

  Return overview statistics for network clients
*/
func (a *Client) GetNetworkClientsOverview(params *GetNetworkClientsOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientsOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientsOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkClientsOverview",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientsOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientsOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientsOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkClientsUsageHistories returns the usage histories for clients

  Return the usage histories for clients. Usage data is in kilobytes. Clients can be identified by client keys or either the MACs or IPs depending on whether the network uses Track-by-IP.
*/
func (a *Client) GetNetworkClientsUsageHistories(params *GetNetworkClientsUsageHistoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkClientsUsageHistoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkClientsUsageHistoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkClientsUsageHistories",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/clients/usageHistories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkClientsUsageHistoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkClientsUsageHistoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkClientsUsageHistories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkDevices lists the devices in a network

  List the devices in a network
*/
func (a *Client) GetNetworkDevices(params *GetNetworkDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkDevices",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkEvents lists the events for the network

  List the events for the network
*/
func (a *Client) GetNetworkEvents(params *GetNetworkEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkEvents",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkEventsEventTypes lists the event type to human readable description

  List the event type to human-readable description
*/
func (a *Client) GetNetworkEventsEventTypes(params *GetNetworkEventsEventTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkEventsEventTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkEventsEventTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkEventsEventTypes",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/events/eventTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkEventsEventTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkEventsEventTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkEventsEventTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkFirmwareUpgrades gets firmware upgrade information for a network

  Get firmware upgrade information for a network
*/
func (a *Client) GetNetworkFirmwareUpgrades(params *GetNetworkFirmwareUpgradesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkFirmwareUpgradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkFirmwareUpgradesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkFirmwareUpgrades",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/firmwareUpgrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkFirmwareUpgradesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkFirmwareUpgradesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkFirmwareUpgrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkFloorPlan finds a floor plan by ID

  Find a floor plan by ID
*/
func (a *Client) GetNetworkFloorPlan(params *GetNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkFloorPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkFloorPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkFloorPlan",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/floorPlans/{floorPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkFloorPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkFloorPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkFloorPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkFloorPlans lists the floor plans that belong to your network

  List the floor plans that belong to your network
*/
func (a *Client) GetNetworkFloorPlans(params *GetNetworkFloorPlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkFloorPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkFloorPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkFloorPlans",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/floorPlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkFloorPlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkFloorPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkFloorPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkGroupPolicies lists the group policies in a network

  List the group policies in a network
*/
func (a *Client) GetNetworkGroupPolicies(params *GetNetworkGroupPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkGroupPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkGroupPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkGroupPolicies",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/groupPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkGroupPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkGroupPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkGroupPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkGroupPolicy displays a group policy

  Display a group policy
*/
func (a *Client) GetNetworkGroupPolicy(params *GetNetworkGroupPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkGroupPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkGroupPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkGroupPolicy",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/groupPolicies/{groupPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkGroupPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkGroupPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkGroupPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkHealthAlerts returns all global alerts on this network

  Return all global alerts on this network
*/
func (a *Client) GetNetworkHealthAlerts(params *GetNetworkHealthAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkHealthAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkHealthAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkHealthAlerts",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/health/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkHealthAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkHealthAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkHealthAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkMerakiAuthUser returns the meraki auth splash guest r a d i u s or client v p n user

  Return the Meraki Auth splash guest, RADIUS, or client VPN user
*/
func (a *Client) GetNetworkMerakiAuthUser(params *GetNetworkMerakiAuthUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkMerakiAuthUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkMerakiAuthUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkMerakiAuthUser",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkMerakiAuthUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkMerakiAuthUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkMerakiAuthUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkMerakiAuthUsers lists the users configured under meraki authentication for a network splash guest or r a d i u s users for a wireless network or client v p n users for a wired network

  List the users configured under Meraki Authentication for a network (splash guest or RADIUS users for a wireless network, or client VPN users for a wired network)
*/
func (a *Client) GetNetworkMerakiAuthUsers(params *GetNetworkMerakiAuthUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkMerakiAuthUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkMerakiAuthUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkMerakiAuthUsers",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/merakiAuthUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkMerakiAuthUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkMerakiAuthUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkMerakiAuthUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkMqttBroker returns an m q t t broker

  Return an MQTT broker
*/
func (a *Client) GetNetworkMqttBroker(params *GetNetworkMqttBrokerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkMqttBrokerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkMqttBrokerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkMqttBroker",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/mqttBrokers/{mqttBrokerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkMqttBrokerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkMqttBrokerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkMqttBroker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkMqttBrokers lists the m q t t brokers for this network

  List the MQTT brokers for this network
*/
func (a *Client) GetNetworkMqttBrokers(params *GetNetworkMqttBrokersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkMqttBrokersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkMqttBrokersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkMqttBrokers",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/mqttBrokers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkMqttBrokersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkMqttBrokersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkMqttBrokers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkNetflow returns the net flow traffic reporting settings for a network

  Return the NetFlow traffic reporting settings for a network
*/
func (a *Client) GetNetworkNetflow(params *GetNetworkNetflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkNetflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkNetflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkNetflow",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/netflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkNetflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkNetflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkNetflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkNetworkHealthChannelUtilization gets the channel utilization over each radio for all a ps in a network

  Get the channel utilization over each radio for all APs in a network.
*/
func (a *Client) GetNetworkNetworkHealthChannelUtilization(params *GetNetworkNetworkHealthChannelUtilizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkNetworkHealthChannelUtilizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkNetworkHealthChannelUtilizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkNetworkHealthChannelUtilization",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/networkHealth/channelUtilization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkNetworkHealthChannelUtilizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkNetworkHealthChannelUtilizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkNetworkHealthChannelUtilization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkPiiPiiKeys lists the keys required to access personally identifiable information p i i for a given identifier

  List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key "0" containing the applicable keys.

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/piiKeys
```
*/
func (a *Client) GetNetworkPiiPiiKeys(params *GetNetworkPiiPiiKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkPiiPiiKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPiiPiiKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkPiiPiiKeys",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/pii/piiKeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPiiPiiKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPiiPiiKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPiiPiiKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkPiiRequest returns a p i i request

  Return a PII request

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests/{requestId}
```
*/
func (a *Client) GetNetworkPiiRequest(params *GetNetworkPiiRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkPiiRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPiiRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkPiiRequest",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/pii/requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPiiRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPiiRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPiiRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkPiiRequests lists the p i i requests for this network or organization

  List the PII requests for this network or organization

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/requests
```
*/
func (a *Client) GetNetworkPiiRequests(params *GetNetworkPiiRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkPiiRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPiiRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkPiiRequests",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/pii/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPiiRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPiiRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPiiRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkPiiSmDevicesForKey givens a piece of personally identifiable information p i i return the systems manager device ID s associated with that identifier

  Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/smDevicesForKey
```
*/
func (a *Client) GetNetworkPiiSmDevicesForKey(params *GetNetworkPiiSmDevicesForKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkPiiSmDevicesForKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPiiSmDevicesForKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkPiiSmDevicesForKey",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/pii/smDevicesForKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPiiSmDevicesForKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPiiSmDevicesForKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPiiSmDevicesForKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkPiiSmOwnersForKey givens a piece of personally identifiable information p i i return the systems manager owner ID s associated with that identifier

  Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.

## ALTERNATE PATH

```
/organizations/{organizationId}/pii/smOwnersForKey
```
*/
func (a *Client) GetNetworkPiiSmOwnersForKey(params *GetNetworkPiiSmOwnersForKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkPiiSmOwnersForKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPiiSmOwnersForKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkPiiSmOwnersForKey",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/pii/smOwnersForKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPiiSmOwnersForKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkPiiSmOwnersForKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkPiiSmOwnersForKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSettings returns the settings for a network

  Return the settings for a network
*/
func (a *Client) GetNetworkSettings(params *GetNetworkSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSettings",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSnmp returns the s n m p settings for a network

  Return the SNMP settings for a network
*/
func (a *Client) GetNetworkSnmp(params *GetNetworkSnmpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSnmpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSnmpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSnmp",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/snmp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSnmpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSnmpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSnmp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSplashLoginAttempts lists the splash login attempts for a network

  List the splash login attempts for a network
*/
func (a *Client) GetNetworkSplashLoginAttempts(params *GetNetworkSplashLoginAttemptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSplashLoginAttemptsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSplashLoginAttemptsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSplashLoginAttempts",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/splashLoginAttempts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSplashLoginAttemptsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSplashLoginAttemptsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSplashLoginAttempts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkSyslogServers lists the syslog servers for a network

  List the syslog servers for a network
*/
func (a *Client) GetNetworkSyslogServers(params *GetNetworkSyslogServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSyslogServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSyslogServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkSyslogServers",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/syslogServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSyslogServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSyslogServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkSyslogServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkTopologyLinkLayer lists of devices and connections among them within the network

  List of devices and connections among them within the network.
*/
func (a *Client) GetNetworkTopologyLinkLayer(params *GetNetworkTopologyLinkLayerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkTopologyLinkLayerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkTopologyLinkLayerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkTopologyLinkLayer",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/topology/linkLayer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkTopologyLinkLayerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkTopologyLinkLayerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkTopologyLinkLayer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkTraffic returns the traffic analysis data for this network

  Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
*/
func (a *Client) GetNetworkTraffic(params *GetNetworkTrafficParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkTrafficOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkTrafficParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkTraffic",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/traffic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkTrafficReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkTrafficOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkTraffic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkTrafficAnalysis returns the traffic analysis settings for a network

  Return the traffic analysis settings for a network
*/
func (a *Client) GetNetworkTrafficAnalysis(params *GetNetworkTrafficAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkTrafficAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkTrafficAnalysisParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkTrafficAnalysis",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/trafficAnalysis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkTrafficAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkTrafficAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkTrafficAnalysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkTrafficShapingApplicationCategories returns the application categories for traffic shaping rules

  Returns the application categories for traffic shaping rules.
*/
func (a *Client) GetNetworkTrafficShapingApplicationCategories(params *GetNetworkTrafficShapingApplicationCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkTrafficShapingApplicationCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkTrafficShapingApplicationCategoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkTrafficShapingApplicationCategories",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/trafficShaping/applicationCategories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkTrafficShapingApplicationCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkTrafficShapingApplicationCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkTrafficShapingApplicationCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkTrafficShapingDscpTaggingOptions returns the available d s c p tagging options for your traffic shaping rules

  Returns the available DSCP tagging options for your traffic shaping rules.
*/
func (a *Client) GetNetworkTrafficShapingDscpTaggingOptions(params *GetNetworkTrafficShapingDscpTaggingOptionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkTrafficShapingDscpTaggingOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkTrafficShapingDscpTaggingOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkTrafficShapingDscpTaggingOptions",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/trafficShaping/dscpTaggingOptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkTrafficShapingDscpTaggingOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkTrafficShapingDscpTaggingOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkTrafficShapingDscpTaggingOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWebhooksHTTPServer returns an HTTP server for a network

  Return an HTTP server for a network
*/
func (a *Client) GetNetworkWebhooksHTTPServer(params *GetNetworkWebhooksHTTPServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWebhooksHTTPServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWebhooksHTTPServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWebhooksHttpServer",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/webhooks/httpServers/{httpServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWebhooksHTTPServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWebhooksHTTPServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWebhooksHttpServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWebhooksHTTPServers lists the HTTP servers for a network

  List the HTTP servers for a network
*/
func (a *Client) GetNetworkWebhooksHTTPServers(params *GetNetworkWebhooksHTTPServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWebhooksHTTPServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWebhooksHTTPServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWebhooksHttpServers",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/webhooks/httpServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWebhooksHTTPServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWebhooksHTTPServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWebhooksHttpServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWebhooksPayloadTemplate gets the webhook payload template for a network

  Get the webhook payload template for a network
*/
func (a *Client) GetNetworkWebhooksPayloadTemplate(params *GetNetworkWebhooksPayloadTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWebhooksPayloadTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWebhooksPayloadTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWebhooksPayloadTemplate",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWebhooksPayloadTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWebhooksPayloadTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWebhooksPayloadTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWebhooksPayloadTemplates lists the webhook payload templates for a network

  List the webhook payload templates for a network
*/
func (a *Client) GetNetworkWebhooksPayloadTemplates(params *GetNetworkWebhooksPayloadTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWebhooksPayloadTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWebhooksPayloadTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWebhooksPayloadTemplates",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/webhooks/payloadTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWebhooksPayloadTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWebhooksPayloadTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWebhooksPayloadTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkWebhooksWebhookTest returns the status of a webhook test for a network

  Return the status of a webhook test for a network
*/
func (a *Client) GetNetworkWebhooksWebhookTest(params *GetNetworkWebhooksWebhookTestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkWebhooksWebhookTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkWebhooksWebhookTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkWebhooksWebhookTest",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/webhooks/webhookTests/{webhookTestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkWebhooksWebhookTestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkWebhooksWebhookTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkWebhooksWebhookTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProvisionNetworkClients provisions a client with a name and policy

  Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
*/
func (a *Client) ProvisionNetworkClients(params *ProvisionNetworkClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProvisionNetworkClientsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionNetworkClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "provisionNetworkClients",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/clients/provision",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisionNetworkClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvisionNetworkClientsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for provisionNetworkClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveNetworkDevices removes a single device

  Remove a single device
*/
func (a *Client) RemoveNetworkDevices(params *RemoveNetworkDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveNetworkDevicesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveNetworkDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeNetworkDevices",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/devices/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveNetworkDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveNetworkDevicesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeNetworkDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SplitNetwork splits a combined network into individual networks for each type of device

  Split a combined network into individual networks for each type of device
*/
func (a *Client) SplitNetwork(params *SplitNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SplitNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSplitNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "splitNetwork",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/split",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SplitNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SplitNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for splitNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnbindNetwork unbinds a network from a template

  Unbind a network from a template.
*/
func (a *Client) UnbindNetwork(params *UnbindNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnbindNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnbindNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unbindNetwork",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/unbind",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnbindNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnbindNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unbindNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetwork updates a network

  Update a network
*/
func (a *Client) UpdateNetwork(params *UpdateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetwork",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkAlertsSettings updates the alert configuration for this network

  Update the alert configuration for this network
*/
func (a *Client) UpdateNetworkAlertsSettings(params *UpdateNetworkAlertsSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkAlertsSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkAlertsSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkAlertsSettings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/alerts/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkAlertsSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkAlertsSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkAlertsSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkClientPolicy updates the policy assigned to a client on the network

  Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) UpdateNetworkClientPolicy(params *UpdateNetworkClientPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkClientPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkClientPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkClientPolicy",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/policy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkClientPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkClientPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkClientPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkClientSplashAuthorizationStatus updates a client s splash authorization

  Update a client's splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
*/
func (a *Client) UpdateNetworkClientSplashAuthorizationStatus(params *UpdateNetworkClientSplashAuthorizationStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkClientSplashAuthorizationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkClientSplashAuthorizationStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkClientSplashAuthorizationStatus",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkClientSplashAuthorizationStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkClientSplashAuthorizationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkClientSplashAuthorizationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkFirmwareUpgrades updates firmware upgrade information for a network

  Update firmware upgrade information for a network
*/
func (a *Client) UpdateNetworkFirmwareUpgrades(params *UpdateNetworkFirmwareUpgradesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkFirmwareUpgradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkFirmwareUpgradesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkFirmwareUpgrades",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/firmwareUpgrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkFirmwareUpgradesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkFirmwareUpgradesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkFirmwareUpgrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkFloorPlan updates a floor plan s geolocation and other meta data

  Update a floor plan's geolocation and other meta data
*/
func (a *Client) UpdateNetworkFloorPlan(params *UpdateNetworkFloorPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkFloorPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkFloorPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkFloorPlan",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/floorPlans/{floorPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkFloorPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkFloorPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkFloorPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkGroupPolicy updates a group policy

  Update a group policy
*/
func (a *Client) UpdateNetworkGroupPolicy(params *UpdateNetworkGroupPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkGroupPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkGroupPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkGroupPolicy",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/groupPolicies/{groupPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkGroupPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkGroupPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkGroupPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkMerakiAuthUser updates a user configured with meraki authentication currently 802 1 x r a d i u s splash guest and client v p n users can be updated

  Update a user configured with Meraki Authentication (currently, 802.1X RADIUS, splash guest, and client VPN users can be updated)
*/
func (a *Client) UpdateNetworkMerakiAuthUser(params *UpdateNetworkMerakiAuthUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkMerakiAuthUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkMerakiAuthUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkMerakiAuthUser",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkMerakiAuthUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkMerakiAuthUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkMerakiAuthUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkMqttBroker updates an m q t t broker

  Update an MQTT broker
*/
func (a *Client) UpdateNetworkMqttBroker(params *UpdateNetworkMqttBrokerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkMqttBrokerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkMqttBrokerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkMqttBroker",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/mqttBrokers/{mqttBrokerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkMqttBrokerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkMqttBrokerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkMqttBroker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkNetflow updates the net flow traffic reporting settings for a network

  Update the NetFlow traffic reporting settings for a network
*/
func (a *Client) UpdateNetworkNetflow(params *UpdateNetworkNetflowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkNetflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkNetflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkNetflow",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/netflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkNetflowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkNetflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkNetflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSettings updates the settings for a network

  Update the settings for a network
*/
func (a *Client) UpdateNetworkSettings(params *UpdateNetworkSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkSettings",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSnmp updates the s n m p settings for a network

  Update the SNMP settings for a network
*/
func (a *Client) UpdateNetworkSnmp(params *UpdateNetworkSnmpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSnmpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSnmpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkSnmp",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/snmp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSnmpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSnmpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSnmp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkSyslogServers updates the syslog servers for a network

  Update the syslog servers for a network
*/
func (a *Client) UpdateNetworkSyslogServers(params *UpdateNetworkSyslogServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSyslogServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSyslogServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkSyslogServers",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/syslogServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSyslogServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSyslogServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkSyslogServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkTrafficAnalysis updates the traffic analysis settings for a network

  Update the traffic analysis settings for a network
*/
func (a *Client) UpdateNetworkTrafficAnalysis(params *UpdateNetworkTrafficAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkTrafficAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkTrafficAnalysisParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkTrafficAnalysis",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/trafficAnalysis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkTrafficAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkTrafficAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkTrafficAnalysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWebhooksHTTPServer updates an HTTP server

  Update an HTTP server. To change a URL, create a new HTTP server.
*/
func (a *Client) UpdateNetworkWebhooksHTTPServer(params *UpdateNetworkWebhooksHTTPServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWebhooksHTTPServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWebhooksHTTPServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWebhooksHttpServer",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/webhooks/httpServers/{httpServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWebhooksHTTPServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWebhooksHTTPServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWebhooksHttpServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkWebhooksPayloadTemplate updates a webhook payload template for a network

  Update a webhook payload template for a network
*/
func (a *Client) UpdateNetworkWebhooksPayloadTemplate(params *UpdateNetworkWebhooksPayloadTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkWebhooksPayloadTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkWebhooksPayloadTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkWebhooksPayloadTemplate",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/webhooks/payloadTemplates/{payloadTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkWebhooksPayloadTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkWebhooksPayloadTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkWebhooksPayloadTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VmxNetworkDevicesClaim claims a v m x into a network

  Claim a vMX into a network
*/
func (a *Client) VmxNetworkDevicesClaim(params *VmxNetworkDevicesClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VmxNetworkDevicesClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVmxNetworkDevicesClaimParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "vmxNetworkDevicesClaim",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/devices/claim/vmx",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VmxNetworkDevicesClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VmxNetworkDevicesClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for vmxNetworkDevicesClaim: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
