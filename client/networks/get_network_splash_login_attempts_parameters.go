// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkSplashLoginAttemptsParams creates a new GetNetworkSplashLoginAttemptsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNetworkSplashLoginAttemptsParams() *GetNetworkSplashLoginAttemptsParams {
	return &GetNetworkSplashLoginAttemptsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkSplashLoginAttemptsParamsWithTimeout creates a new GetNetworkSplashLoginAttemptsParams object
// with the ability to set a timeout on a request.
func NewGetNetworkSplashLoginAttemptsParamsWithTimeout(timeout time.Duration) *GetNetworkSplashLoginAttemptsParams {
	return &GetNetworkSplashLoginAttemptsParams{
		timeout: timeout,
	}
}

// NewGetNetworkSplashLoginAttemptsParamsWithContext creates a new GetNetworkSplashLoginAttemptsParams object
// with the ability to set a context for a request.
func NewGetNetworkSplashLoginAttemptsParamsWithContext(ctx context.Context) *GetNetworkSplashLoginAttemptsParams {
	return &GetNetworkSplashLoginAttemptsParams{
		Context: ctx,
	}
}

// NewGetNetworkSplashLoginAttemptsParamsWithHTTPClient creates a new GetNetworkSplashLoginAttemptsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNetworkSplashLoginAttemptsParamsWithHTTPClient(client *http.Client) *GetNetworkSplashLoginAttemptsParams {
	return &GetNetworkSplashLoginAttemptsParams{
		HTTPClient: client,
	}
}

/* GetNetworkSplashLoginAttemptsParams contains all the parameters to send to the API endpoint
   for the get network splash login attempts operation.

   Typically these are written to a http.Request.
*/
type GetNetworkSplashLoginAttemptsParams struct {

	/* LoginIdentifier.

	   The username, email, or phone number used during login
	*/
	LoginIdentifier *string

	// NetworkID.
	NetworkID string

	/* SsidNumber.

	   Only return the login attempts for the specified SSID
	*/
	SsidNumber *int64

	/* Timespan.

	   The timespan, in seconds, for the login attempts. The period will be from [timespan] seconds ago until now. The maximum timespan is 3 months
	*/
	Timespan *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get network splash login attempts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkSplashLoginAttemptsParams) WithDefaults() *GetNetworkSplashLoginAttemptsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get network splash login attempts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkSplashLoginAttemptsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) WithTimeout(timeout time.Duration) *GetNetworkSplashLoginAttemptsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) WithContext(ctx context.Context) *GetNetworkSplashLoginAttemptsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) WithHTTPClient(client *http.Client) *GetNetworkSplashLoginAttemptsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLoginIdentifier adds the loginIdentifier to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) WithLoginIdentifier(loginIdentifier *string) *GetNetworkSplashLoginAttemptsParams {
	o.SetLoginIdentifier(loginIdentifier)
	return o
}

// SetLoginIdentifier adds the loginIdentifier to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) SetLoginIdentifier(loginIdentifier *string) {
	o.LoginIdentifier = loginIdentifier
}

// WithNetworkID adds the networkID to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) WithNetworkID(networkID string) *GetNetworkSplashLoginAttemptsParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithSsidNumber adds the ssidNumber to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) WithSsidNumber(ssidNumber *int64) *GetNetworkSplashLoginAttemptsParams {
	o.SetSsidNumber(ssidNumber)
	return o
}

// SetSsidNumber adds the ssidNumber to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) SetSsidNumber(ssidNumber *int64) {
	o.SsidNumber = ssidNumber
}

// WithTimespan adds the timespan to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) WithTimespan(timespan *int64) *GetNetworkSplashLoginAttemptsParams {
	o.SetTimespan(timespan)
	return o
}

// SetTimespan adds the timespan to the get network splash login attempts params
func (o *GetNetworkSplashLoginAttemptsParams) SetTimespan(timespan *int64) {
	o.Timespan = timespan
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkSplashLoginAttemptsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LoginIdentifier != nil {

		// query param loginIdentifier
		var qrLoginIdentifier string

		if o.LoginIdentifier != nil {
			qrLoginIdentifier = *o.LoginIdentifier
		}
		qLoginIdentifier := qrLoginIdentifier
		if qLoginIdentifier != "" {

			if err := r.SetQueryParam("loginIdentifier", qLoginIdentifier); err != nil {
				return err
			}
		}
	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.SsidNumber != nil {

		// query param ssidNumber
		var qrSsidNumber int64

		if o.SsidNumber != nil {
			qrSsidNumber = *o.SsidNumber
		}
		qSsidNumber := swag.FormatInt64(qrSsidNumber)
		if qSsidNumber != "" {

			if err := r.SetQueryParam("ssidNumber", qSsidNumber); err != nil {
				return err
			}
		}
	}

	if o.Timespan != nil {

		// query param timespan
		var qrTimespan int64

		if o.Timespan != nil {
			qrTimespan = *o.Timespan
		}
		qTimespan := swag.FormatInt64(qrTimespan)
		if qTimespan != "" {

			if err := r.SetQueryParam("timespan", qTimespan); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
