// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNetworkFirmwareUpgradesReader is a Reader for the UpdateNetworkFirmwareUpgrades structure.
type UpdateNetworkFirmwareUpgradesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkFirmwareUpgradesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkFirmwareUpgradesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkFirmwareUpgradesOK creates a UpdateNetworkFirmwareUpgradesOK with default headers values
func NewUpdateNetworkFirmwareUpgradesOK() *UpdateNetworkFirmwareUpgradesOK {
	return &UpdateNetworkFirmwareUpgradesOK{}
}

/* UpdateNetworkFirmwareUpgradesOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkFirmwareUpgradesOK struct {
	Payload interface{}
}

func (o *UpdateNetworkFirmwareUpgradesOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/firmwareUpgrades][%d] updateNetworkFirmwareUpgradesOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkFirmwareUpgradesOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkFirmwareUpgradesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkFirmwareUpgradesBody update network firmware upgrades body
// Example: {"products":{"switch":{"nextUpgrade":{"toVersion":{"id":"7857"}}}}}
swagger:model UpdateNetworkFirmwareUpgradesBody
*/
type UpdateNetworkFirmwareUpgradesBody struct {

	// products
	Products *UpdateNetworkFirmwareUpgradesParamsBodyProducts `json:"products,omitempty"`

	// The timezone for the network
	Timezone string `json:"timezone,omitempty"`

	// upgrade window
	UpgradeWindow *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow `json:"upgradeWindow,omitempty"`
}

// Validate validates this update network firmware upgrades body
func (o *UpdateNetworkFirmwareUpgradesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpgradeWindow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesBody) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(o.Products) { // not required
		return nil
	}

	if o.Products != nil {
		if err := o.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesBody) validateUpgradeWindow(formats strfmt.Registry) error {
	if swag.IsZero(o.UpgradeWindow) { // not required
		return nil
	}

	if o.UpgradeWindow != nil {
		if err := o.UpgradeWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "upgradeWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "upgradeWindow")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades body based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUpgradeWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesBody) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if o.Products != nil {
		if err := o.Products.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesBody) contextValidateUpgradeWindow(ctx context.Context, formats strfmt.Registry) error {

	if o.UpgradeWindow != nil {
		if err := o.UpgradeWindow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "upgradeWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "upgradeWindow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProducts Contains information about the network to update
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProducts
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProducts struct {

	// appliance
	Appliance *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance `json:"appliance,omitempty"`

	// camera
	Camera *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera `json:"camera,omitempty"`

	// cellular gateway
	CellularGateway *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway `json:"cellularGateway,omitempty"`

	// environmental
	Environmental *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmental `json:"environmental,omitempty"`

	// sensor
	Sensor *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor `json:"sensor,omitempty"`

	// switch
	Switch *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch `json:"switch,omitempty"`

	// vmx host
	VmxHost *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHost `json:"vmxHost,omitempty"`

	// wireless
	Wireless *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless `json:"wireless,omitempty"`
}

// Validate validates this update network firmware upgrades params body products
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppliance(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCamera(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCellularGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnvironmental(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSensor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSwitch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVmxHost(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWireless(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateAppliance(formats strfmt.Registry) error {
	if swag.IsZero(o.Appliance) { // not required
		return nil
	}

	if o.Appliance != nil {
		if err := o.Appliance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateCamera(formats strfmt.Registry) error {
	if swag.IsZero(o.Camera) { // not required
		return nil
	}

	if o.Camera != nil {
		if err := o.Camera.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateCellularGateway(formats strfmt.Registry) error {
	if swag.IsZero(o.CellularGateway) { // not required
		return nil
	}

	if o.CellularGateway != nil {
		if err := o.CellularGateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateEnvironmental(formats strfmt.Registry) error {
	if swag.IsZero(o.Environmental) { // not required
		return nil
	}

	if o.Environmental != nil {
		if err := o.Environmental.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateSensor(formats strfmt.Registry) error {
	if swag.IsZero(o.Sensor) { // not required
		return nil
	}

	if o.Sensor != nil {
		if err := o.Sensor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateSwitch(formats strfmt.Registry) error {
	if swag.IsZero(o.Switch) { // not required
		return nil
	}

	if o.Switch != nil {
		if err := o.Switch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateVmxHost(formats strfmt.Registry) error {
	if swag.IsZero(o.VmxHost) { // not required
		return nil
	}

	if o.VmxHost != nil {
		if err := o.VmxHost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) validateWireless(formats strfmt.Registry) error {
	if swag.IsZero(o.Wireless) { // not required
		return nil
	}

	if o.Wireless != nil {
		if err := o.Wireless.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAppliance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCamera(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCellularGateway(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEnvironmental(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSensor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSwitch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVmxHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateWireless(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateAppliance(ctx context.Context, formats strfmt.Registry) error {

	if o.Appliance != nil {
		if err := o.Appliance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateCamera(ctx context.Context, formats strfmt.Registry) error {

	if o.Camera != nil {
		if err := o.Camera.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateCellularGateway(ctx context.Context, formats strfmt.Registry) error {

	if o.CellularGateway != nil {
		if err := o.CellularGateway.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateEnvironmental(ctx context.Context, formats strfmt.Registry) error {

	if o.Environmental != nil {
		if err := o.Environmental.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateSensor(ctx context.Context, formats strfmt.Registry) error {

	if o.Sensor != nil {
		if err := o.Sensor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateSwitch(ctx context.Context, formats strfmt.Registry) error {

	if o.Switch != nil {
		if err := o.Switch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateVmxHost(ctx context.Context, formats strfmt.Registry) error {

	if o.VmxHost != nil {
		if err := o.VmxHost.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) contextValidateWireless(ctx context.Context, formats strfmt.Registry) error {

	if o.Wireless != nil {
		if err := o.Wireless.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProducts) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProducts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products appliance
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products appliance based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsAppliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products appliance next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products appliance next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "appliance" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products appliance next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products appliance next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsApplianceNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products camera
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products camera based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCamera
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products camera next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products camera next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "camera" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products camera next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products camera next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCameraNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products cellular gateway
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products cellular gateway based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products cellular gateway next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products cellular gateway next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "cellularGateway" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products cellular gateway next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products cellular gateway next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsCellularGatewayNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmental The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmental
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmental struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products environmental
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmental) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmental) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products environmental based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmental) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmental) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmental) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmental) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmental
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products environmental next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products environmental next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "environmental" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products environmental next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products environmental next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsEnvironmentalNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products sensor
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products sensor based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSensor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products sensor next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products sensor next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "sensor" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products sensor next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products sensor next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSensorNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products switch
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products switch based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products switch next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products switch next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "switch" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products switch next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products switch next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsSwitchNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHost The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHost
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHost struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products vmx host
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHost) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products vmx host based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHost) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHost) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHost) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products vmx host next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products vmx host next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "vmxHost" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products vmx host next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products vmx host next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsVmxHostNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless The network device to be updated
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless struct {

	// next upgrade
	NextUpgrade *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade `json:"nextUpgrade,omitempty"`

	// Whether or not the network wants beta firmware
	ParticipateInNextBetaRelease bool `json:"participateInNextBetaRelease,omitempty"`
}

// Validate validates this update network firmware upgrades params body products wireless
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNextUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) validateNextUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(o.NextUpgrade) { // not required
		return nil
	}

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products wireless based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNextUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) contextValidateNextUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if o.NextUpgrade != nil {
		if err := o.NextUpgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsWireless
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade The pending firmware upgrade if it exists
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade struct {

	// The time of the last successful upgrade
	Time string `json:"time,omitempty"`

	// to version
	ToVersion *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion `json:"toVersion,omitempty"`
}

// Validate validates this update network firmware upgrades params body products wireless next upgrade
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) validateToVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.ToVersion) { // not required
		return nil
	}

	if o.ToVersion != nil {
		if err := o.ToVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network firmware upgrades params body products wireless next upgrade based on the context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateToVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) contextValidateToVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.ToVersion != nil {
		if err := o.ToVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkFirmwareUpgrades" + "." + "products" + "." + "wireless" + "." + "nextUpgrade" + "." + "toVersion")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgrade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion The version to be updated to
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion
*/
type UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion struct {

	// The version ID
	ID string `json:"id,omitempty"`
}

// Validate validates this update network firmware upgrades params body products wireless next upgrade to version
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network firmware upgrades params body products wireless next upgrade to version based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyProductsWirelessNextUpgradeToVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow Upgrade window for devices in network
swagger:model UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow
*/
type UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow struct {

	// Day of the week
	// Enum: [sun mon tue wed thu fri sat sunday monday tuesday wednesday thursday friday saturday]
	DayOfWeek string `json:"dayOfWeek,omitempty"`

	// Hour of the day
	// Enum: [0:00 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00 9:00 10:00 11:00 12:00 13:00 14:00 15:00 16:00 17:00 18:00 19:00 20:00 21:00 22:00 23:00]
	HourOfDay string `json:"hourOfDay,omitempty"`
}

// Validate validates this update network firmware upgrades params body upgrade window
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHourOfDay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeDayOfWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sun","mon","tue","wed","thu","fri","sat","sunday","monday","tuesday","wednesday","thursday","friday","saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeDayOfWeekPropEnum = append(updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeDayOfWeekPropEnum, v)
	}
}

const (

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSun captures enum value "sun"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSun string = "sun"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekMon captures enum value "mon"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekMon string = "mon"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekTue captures enum value "tue"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekTue string = "tue"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekWed captures enum value "wed"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekWed string = "wed"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekThu captures enum value "thu"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekThu string = "thu"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekFri captures enum value "fri"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekFri string = "fri"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSat captures enum value "sat"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSat string = "sat"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSunday captures enum value "sunday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSunday string = "sunday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekMonday captures enum value "monday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekMonday string = "monday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekTuesday captures enum value "tuesday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekTuesday string = "tuesday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekWednesday captures enum value "wednesday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekWednesday string = "wednesday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekThursday captures enum value "thursday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekThursday string = "thursday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekFriday captures enum value "friday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekFriday string = "friday"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSaturday captures enum value "saturday"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowDayOfWeekSaturday string = "saturday"
)

// prop value enum
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) validateDayOfWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeDayOfWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) validateDayOfWeek(formats strfmt.Registry) error {
	if swag.IsZero(o.DayOfWeek) { // not required
		return nil
	}

	// value enum
	if err := o.validateDayOfWeekEnum("updateNetworkFirmwareUpgrades"+"."+"upgradeWindow"+"."+"dayOfWeek", "body", o.DayOfWeek); err != nil {
		return err
	}

	return nil
}

var updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeHourOfDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0:00","1:00","2:00","3:00","4:00","5:00","6:00","7:00","8:00","9:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00","17:00","18:00","19:00","20:00","21:00","22:00","23:00"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeHourOfDayPropEnum = append(updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeHourOfDayPropEnum, v)
	}
}

const (

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr000 captures enum value "0:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr000 string = "0:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr100 captures enum value "1:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr100 string = "1:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr200 captures enum value "2:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr200 string = "2:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr300 captures enum value "3:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr300 string = "3:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr400 captures enum value "4:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr400 string = "4:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr500 captures enum value "5:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr500 string = "5:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr600 captures enum value "6:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr600 string = "6:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr700 captures enum value "7:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr700 string = "7:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr800 captures enum value "8:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr800 string = "8:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr900 captures enum value "9:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr900 string = "9:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1000 captures enum value "10:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1000 string = "10:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1100 captures enum value "11:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1100 string = "11:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1200 captures enum value "12:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1200 string = "12:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1300 captures enum value "13:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1300 string = "13:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1400 captures enum value "14:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1400 string = "14:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1500 captures enum value "15:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1500 string = "15:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1600 captures enum value "16:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1600 string = "16:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1700 captures enum value "17:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1700 string = "17:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1800 captures enum value "18:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1800 string = "18:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1900 captures enum value "19:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr1900 string = "19:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2000 captures enum value "20:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2000 string = "20:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2100 captures enum value "21:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2100 string = "21:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2200 captures enum value "22:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2200 string = "22:00"

	// UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2300 captures enum value "23:00"
	UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindowHourOfDayNr2300 string = "23:00"
)

// prop value enum
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) validateHourOfDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNetworkFirmwareUpgradesParamsBodyUpgradeWindowTypeHourOfDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) validateHourOfDay(formats strfmt.Registry) error {
	if swag.IsZero(o.HourOfDay) { // not required
		return nil
	}

	// value enum
	if err := o.validateHourOfDayEnum("updateNetworkFirmwareUpgrades"+"."+"upgradeWindow"+"."+"hourOfDay", "body", o.HourOfDay); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update network firmware upgrades params body upgrade window based on context it is used
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkFirmwareUpgradesParamsBodyUpgradeWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
