// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProvisionNetworkClientsReader is a Reader for the ProvisionNetworkClients structure.
type ProvisionNetworkClientsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProvisionNetworkClientsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewProvisionNetworkClientsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProvisionNetworkClientsCreated creates a ProvisionNetworkClientsCreated with default headers values
func NewProvisionNetworkClientsCreated() *ProvisionNetworkClientsCreated {
	return &ProvisionNetworkClientsCreated{}
}

/* ProvisionNetworkClientsCreated describes a response with status code 201, with default header values.

Successful operation
*/
type ProvisionNetworkClientsCreated struct {
	Payload interface{}
}

func (o *ProvisionNetworkClientsCreated) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/clients/provision][%d] provisionNetworkClientsCreated  %+v", 201, o.Payload)
}
func (o *ProvisionNetworkClientsCreated) GetPayload() interface{} {
	return o.Payload
}

func (o *ProvisionNetworkClientsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ProvisionNetworkClientsBody provision network clients body
// Example: {"clients":[{"clientId":"k74272e","mac":"00:11:22:33:44:55","name":"Miles's phone"}],"devicePolicy":"Group policy","groupPolicyId":"101"}
swagger:model ProvisionNetworkClientsBody
*/
type ProvisionNetworkClientsBody struct {

	// The array of clients to provision
	// Required: true
	Clients []*ProvisionNetworkClientsParamsBodyClientsItems0 `json:"clients"`

	// The policy to apply to the specified client. Can be 'Group policy', 'Allowed', 'Blocked', 'Per connection' or 'Normal'. Required.
	// Required: true
	// Enum: [Group policy Allowed Blocked Per connection Normal]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`

	// policies by security appliance
	PoliciesBySecurityAppliance *ProvisionNetworkClientsParamsBodyPoliciesBySecurityAppliance `json:"policiesBySecurityAppliance,omitempty"`

	// policies by ssid
	PoliciesBySsid *ProvisionNetworkClientsParamsBodyPoliciesBySsid `json:"policiesBySsid,omitempty"`
}

// Validate validates this provision network clients body
func (o *ProvisionNetworkClientsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClients(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePoliciesBySecurityAppliance(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePoliciesBySsid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProvisionNetworkClientsBody) validateClients(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"clients", "body", o.Clients); err != nil {
		return err
	}

	for i := 0; i < len(o.Clients); i++ {
		if swag.IsZero(o.Clients[i]) { // not required
			continue
		}

		if o.Clients[i] != nil {
			if err := o.Clients[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("provisionNetworkClients" + "." + "clients" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("provisionNetworkClients" + "." + "clients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var provisionNetworkClientsBodyTypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Group policy","Allowed","Blocked","Per connection","Normal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsBodyTypeDevicePolicyPropEnum = append(provisionNetworkClientsBodyTypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsBodyDevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsBodyDevicePolicyGroupPolicy string = "Group policy"

	// ProvisionNetworkClientsBodyDevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsBodyDevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsBodyDevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsBodyDevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsBodyDevicePolicyPerConnection captures enum value "Per connection"
	ProvisionNetworkClientsBodyDevicePolicyPerConnection string = "Per connection"

	// ProvisionNetworkClientsBodyDevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsBodyDevicePolicyNormal string = "Normal"
)

// prop value enum
func (o *ProvisionNetworkClientsBody) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsBodyTypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsBody) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

func (o *ProvisionNetworkClientsBody) validatePoliciesBySecurityAppliance(formats strfmt.Registry) error {
	if swag.IsZero(o.PoliciesBySecurityAppliance) { // not required
		return nil
	}

	if o.PoliciesBySecurityAppliance != nil {
		if err := o.PoliciesBySecurityAppliance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySecurityAppliance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySecurityAppliance")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsBody) validatePoliciesBySsid(formats strfmt.Registry) error {
	if swag.IsZero(o.PoliciesBySsid) { // not required
		return nil
	}

	if o.PoliciesBySsid != nil {
		if err := o.PoliciesBySsid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this provision network clients body based on the context it is used
func (o *ProvisionNetworkClientsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePoliciesBySecurityAppliance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePoliciesBySsid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProvisionNetworkClientsBody) contextValidateClients(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Clients); i++ {

		if o.Clients[i] != nil {
			if err := o.Clients[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("provisionNetworkClients" + "." + "clients" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("provisionNetworkClients" + "." + "clients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProvisionNetworkClientsBody) contextValidatePoliciesBySecurityAppliance(ctx context.Context, formats strfmt.Registry) error {

	if o.PoliciesBySecurityAppliance != nil {
		if err := o.PoliciesBySecurityAppliance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySecurityAppliance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySecurityAppliance")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsBody) contextValidatePoliciesBySsid(ctx context.Context, formats strfmt.Registry) error {

	if o.PoliciesBySsid != nil {
		if err := o.PoliciesBySsid.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsBody) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyClientsItems0 provision network clients params body clients items0
swagger:model ProvisionNetworkClientsParamsBodyClientsItems0
*/
type ProvisionNetworkClientsParamsBodyClientsItems0 struct {

	// The MAC address of the client. Required.
	// Required: true
	Mac *string `json:"mac"`

	// The display name for the client. Optional. Limited to 255 bytes.
	Name string `json:"name,omitempty"`
}

// Validate validates this provision network clients params body clients items0
func (o *ProvisionNetworkClientsParamsBodyClientsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyClientsItems0) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", o.Mac); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body clients items0 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyClientsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyClientsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyClientsItems0) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyClientsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySecurityAppliance An object, describing what the policy-connection association is for the security appliance. (Only relevant if the security appliance is actually within the network)
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySecurityAppliance
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySecurityAppliance struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked' or 'Normal'. Required.
	// Enum: [Allowed Blocked Normal]
	DevicePolicy string `json:"devicePolicy,omitempty"`
}

// Validate validates this provision network clients params body policies by security appliance
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySecurityAppliance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySecurityApplianceTypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySecurityApplianceTypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySecurityApplianceTypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySecurityApplianceDevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySecurityApplianceDevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySecurityApplianceDevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySecurityApplianceDevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySecurityApplianceDevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySecurityApplianceDevicePolicyNormal string = "Normal"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySecurityAppliance) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySecurityApplianceTypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySecurityAppliance) validateDevicePolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.DevicePolicy) { // not required
		return nil
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySecurityAppliance"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by security appliance based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySecurityAppliance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySecurityAppliance) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySecurityAppliance) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySecurityAppliance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsid An object, describing the policy-connection associations for each active SSID within the network. Keys should be the number of enabled SSIDs, mapping to an object describing the client's policy
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsid
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsid struct {

	// 0
	Nr0 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0 `json:"0,omitempty"`

	// 1
	Nr1 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1 `json:"1,omitempty"`

	// 10
	Nr10 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10 `json:"10,omitempty"`

	// 11
	Nr11 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11 `json:"11,omitempty"`

	// 12
	Nr12 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12 `json:"12,omitempty"`

	// 13
	Nr13 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13 `json:"13,omitempty"`

	// 14
	Nr14 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14 `json:"14,omitempty"`

	// 2
	Nr2 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2 `json:"2,omitempty"`

	// 3
	Nr3 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3 `json:"3,omitempty"`

	// 4
	Nr4 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4 `json:"4,omitempty"`

	// 5
	Nr5 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5 `json:"5,omitempty"`

	// 6
	Nr6 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6 `json:"6,omitempty"`

	// 7
	Nr7 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7 `json:"7,omitempty"`

	// 8
	Nr8 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8 `json:"8,omitempty"`

	// 9
	Nr9 *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9 `json:"9,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNr0(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr10(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr11(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr12(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr13(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr14(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr3(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr4(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr5(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr6(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr7(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr8(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr9(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr0(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr0) { // not required
		return nil
	}

	if o.Nr0 != nil {
		if err := o.Nr0.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr1(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr1) { // not required
		return nil
	}

	if o.Nr1 != nil {
		if err := o.Nr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr10(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr10) { // not required
		return nil
	}

	if o.Nr10 != nil {
		if err := o.Nr10.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr11(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr11) { // not required
		return nil
	}

	if o.Nr11 != nil {
		if err := o.Nr11.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr12(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr12) { // not required
		return nil
	}

	if o.Nr12 != nil {
		if err := o.Nr12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr13(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr13) { // not required
		return nil
	}

	if o.Nr13 != nil {
		if err := o.Nr13.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr14(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr14) { // not required
		return nil
	}

	if o.Nr14 != nil {
		if err := o.Nr14.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr2(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr2) { // not required
		return nil
	}

	if o.Nr2 != nil {
		if err := o.Nr2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr3(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr3) { // not required
		return nil
	}

	if o.Nr3 != nil {
		if err := o.Nr3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr4(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr4) { // not required
		return nil
	}

	if o.Nr4 != nil {
		if err := o.Nr4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr5(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr5) { // not required
		return nil
	}

	if o.Nr5 != nil {
		if err := o.Nr5.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr6(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr6) { // not required
		return nil
	}

	if o.Nr6 != nil {
		if err := o.Nr6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr7(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr7) { // not required
		return nil
	}

	if o.Nr7 != nil {
		if err := o.Nr7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr8(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr8) { // not required
		return nil
	}

	if o.Nr8 != nil {
		if err := o.Nr8.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) validateNr9(formats strfmt.Registry) error {
	if swag.IsZero(o.Nr9) { // not required
		return nil
	}

	if o.Nr9 != nil {
		if err := o.Nr9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this provision network clients params body policies by ssid based on the context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNr0(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr10(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr11(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr12(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr13(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr14(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr5(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr7(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr8(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNr9(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr0(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr0 != nil {
		if err := o.Nr0.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "0")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "0")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr1(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr1 != nil {
		if err := o.Nr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "1")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr10(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr10 != nil {
		if err := o.Nr10.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "10")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr11(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr11 != nil {
		if err := o.Nr11.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "11")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr12(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr12 != nil {
		if err := o.Nr12.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "12")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr13(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr13 != nil {
		if err := o.Nr13.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "13")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr14(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr14 != nil {
		if err := o.Nr14.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "14")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr2(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr2 != nil {
		if err := o.Nr2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "2")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr3(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr3 != nil {
		if err := o.Nr3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "3")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr4(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr4 != nil {
		if err := o.Nr4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "4")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr5(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr5 != nil {
		if err := o.Nr5.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "5")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr6(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr6 != nil {
		if err := o.Nr6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "6")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr7(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr7 != nil {
		if err := o.Nr7.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "7")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr8(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr8 != nil {
		if err := o.Nr8.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "8")
			}
			return err
		}
	}

	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) contextValidateNr9(ctx context.Context, formats strfmt.Registry) error {

	if o.Nr9 != nil {
		if err := o.Nr9.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provisionNetworkClients" + "." + "policiesBySsid" + "." + "9")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsid) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsid
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr0
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr0TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr0TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr0TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr0TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"0"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"0"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr0 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr1
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr1TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr1TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr1TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr1TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"1"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"1"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr1 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr10
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr10TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr10TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr10TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr10TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"10"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"10"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr10 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr10
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr11
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr11TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr11TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr11TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr11TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"11"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"11"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr11 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr11
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr12
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr12TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr12TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr12TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr12TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"12"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"12"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr12 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr12
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr13
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr13TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr13TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr13TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr13TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"13"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"13"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr13 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr13
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr14
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr14TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr14TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr14TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr14TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"14"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"14"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr14 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr14
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr2
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr2TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr2TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr2TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr2TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"2"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"2"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr2 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr3
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr3TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr3TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr3TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr3TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"3"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"3"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr3 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr4
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr4TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr4TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr4TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr4TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"4"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"4"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr4 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr4
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr5
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr5TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr5TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr5TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr5TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"5"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"5"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr5 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr5
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr6
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr6TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr6TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr6TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr6TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"6"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"6"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr6 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr6
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr7
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr7TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr7TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr7TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr7TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"7"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"7"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr7 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr8
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr8TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr8TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr8TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr8TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"8"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"8"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr8 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr8
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9 The number for the SSID
swagger:model ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9
*/
type ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9 struct {

	// The policy to apply to the specified client. Can be 'Allowed', 'Blocked', 'Normal' or 'Group policy'. Required.
	// Required: true
	// Enum: [Allowed Blocked Normal Group policy]
	DevicePolicy *string `json:"devicePolicy"`

	// The ID of the desired group policy to apply to the client. Required if 'devicePolicy' is set to "Group policy". Otherwise this is ignored.
	GroupPolicyID string `json:"groupPolicyId,omitempty"`
}

// Validate validates this provision network clients params body policies by ssid nr9
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevicePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var provisionNetworkClientsParamsBodyPoliciesBySsidNr9TypeDevicePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Allowed","Blocked","Normal","Group policy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		provisionNetworkClientsParamsBodyPoliciesBySsidNr9TypeDevicePolicyPropEnum = append(provisionNetworkClientsParamsBodyPoliciesBySsidNr9TypeDevicePolicyPropEnum, v)
	}
}

const (

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9DevicePolicyAllowed captures enum value "Allowed"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9DevicePolicyAllowed string = "Allowed"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9DevicePolicyBlocked captures enum value "Blocked"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9DevicePolicyBlocked string = "Blocked"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9DevicePolicyNormal captures enum value "Normal"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9DevicePolicyNormal string = "Normal"

	// ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9DevicePolicyGroupPolicy captures enum value "Group policy"
	ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9DevicePolicyGroupPolicy string = "Group policy"
)

// prop value enum
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9) validateDevicePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, provisionNetworkClientsParamsBodyPoliciesBySsidNr9TypeDevicePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9) validateDevicePolicy(formats strfmt.Registry) error {

	if err := validate.Required("provisionNetworkClients"+"."+"policiesBySsid"+"."+"9"+"."+"devicePolicy", "body", o.DevicePolicy); err != nil {
		return err
	}

	// value enum
	if err := o.validateDevicePolicyEnum("provisionNetworkClients"+"."+"policiesBySsid"+"."+"9"+"."+"devicePolicy", "body", *o.DevicePolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this provision network clients params body policies by ssid nr9 based on context it is used
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9) UnmarshalBinary(b []byte) error {
	var res ProvisionNetworkClientsParamsBodyPoliciesBySsidNr9
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
