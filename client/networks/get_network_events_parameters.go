// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkEventsParams creates a new GetNetworkEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNetworkEventsParams() *GetNetworkEventsParams {
	return &GetNetworkEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkEventsParamsWithTimeout creates a new GetNetworkEventsParams object
// with the ability to set a timeout on a request.
func NewGetNetworkEventsParamsWithTimeout(timeout time.Duration) *GetNetworkEventsParams {
	return &GetNetworkEventsParams{
		timeout: timeout,
	}
}

// NewGetNetworkEventsParamsWithContext creates a new GetNetworkEventsParams object
// with the ability to set a context for a request.
func NewGetNetworkEventsParamsWithContext(ctx context.Context) *GetNetworkEventsParams {
	return &GetNetworkEventsParams{
		Context: ctx,
	}
}

// NewGetNetworkEventsParamsWithHTTPClient creates a new GetNetworkEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNetworkEventsParamsWithHTTPClient(client *http.Client) *GetNetworkEventsParams {
	return &GetNetworkEventsParams{
		HTTPClient: client,
	}
}

/* GetNetworkEventsParams contains all the parameters to send to the API endpoint
   for the get network events operation.

   Typically these are written to a http.Request.
*/
type GetNetworkEventsParams struct {

	/* ClientIP.

	   The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
	*/
	ClientIP *string

	/* ClientMac.

	   The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
	*/
	ClientMac *string

	/* ClientName.

	   The name, or partial name, of the client which the list of events will be filtered with
	*/
	ClientName *string

	/* DeviceMac.

	   The MAC address of the Meraki device which the list of events will be filtered with
	*/
	DeviceMac *string

	/* DeviceName.

	   The name of the Meraki device which the list of events will be filtered with
	*/
	DeviceName *string

	/* DeviceSerial.

	   The serial of the Meraki device which the list of events will be filtered with
	*/
	DeviceSerial *string

	/* EndingBefore.

	   A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	EndingBefore *string

	/* ExcludedEventTypes.

	   A list of event types. The returned events will be filtered to exclude events with these types.
	*/
	ExcludedEventTypes []string

	/* IncludedEventTypes.

	   A list of event types. The returned events will be filtered to only include events with these types.
	*/
	IncludedEventTypes []string

	// NetworkID.
	NetworkID string

	/* PerPage.

	   The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
	*/
	PerPage *int64

	/* ProductType.

	   The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
	*/
	ProductType *string

	/* SmDeviceMac.

	   The MAC address of the Systems Manager device which the list of events will be filtered with
	*/
	SmDeviceMac *string

	/* SmDeviceName.

	   The name of the Systems Manager device which the list of events will be filtered with
	*/
	SmDeviceName *string

	/* StartingAfter.

	   A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	StartingAfter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get network events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkEventsParams) WithDefaults() *GetNetworkEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get network events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get network events params
func (o *GetNetworkEventsParams) WithTimeout(timeout time.Duration) *GetNetworkEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network events params
func (o *GetNetworkEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network events params
func (o *GetNetworkEventsParams) WithContext(ctx context.Context) *GetNetworkEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network events params
func (o *GetNetworkEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network events params
func (o *GetNetworkEventsParams) WithHTTPClient(client *http.Client) *GetNetworkEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network events params
func (o *GetNetworkEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientIP adds the clientIP to the get network events params
func (o *GetNetworkEventsParams) WithClientIP(clientIP *string) *GetNetworkEventsParams {
	o.SetClientIP(clientIP)
	return o
}

// SetClientIP adds the clientIp to the get network events params
func (o *GetNetworkEventsParams) SetClientIP(clientIP *string) {
	o.ClientIP = clientIP
}

// WithClientMac adds the clientMac to the get network events params
func (o *GetNetworkEventsParams) WithClientMac(clientMac *string) *GetNetworkEventsParams {
	o.SetClientMac(clientMac)
	return o
}

// SetClientMac adds the clientMac to the get network events params
func (o *GetNetworkEventsParams) SetClientMac(clientMac *string) {
	o.ClientMac = clientMac
}

// WithClientName adds the clientName to the get network events params
func (o *GetNetworkEventsParams) WithClientName(clientName *string) *GetNetworkEventsParams {
	o.SetClientName(clientName)
	return o
}

// SetClientName adds the clientName to the get network events params
func (o *GetNetworkEventsParams) SetClientName(clientName *string) {
	o.ClientName = clientName
}

// WithDeviceMac adds the deviceMac to the get network events params
func (o *GetNetworkEventsParams) WithDeviceMac(deviceMac *string) *GetNetworkEventsParams {
	o.SetDeviceMac(deviceMac)
	return o
}

// SetDeviceMac adds the deviceMac to the get network events params
func (o *GetNetworkEventsParams) SetDeviceMac(deviceMac *string) {
	o.DeviceMac = deviceMac
}

// WithDeviceName adds the deviceName to the get network events params
func (o *GetNetworkEventsParams) WithDeviceName(deviceName *string) *GetNetworkEventsParams {
	o.SetDeviceName(deviceName)
	return o
}

// SetDeviceName adds the deviceName to the get network events params
func (o *GetNetworkEventsParams) SetDeviceName(deviceName *string) {
	o.DeviceName = deviceName
}

// WithDeviceSerial adds the deviceSerial to the get network events params
func (o *GetNetworkEventsParams) WithDeviceSerial(deviceSerial *string) *GetNetworkEventsParams {
	o.SetDeviceSerial(deviceSerial)
	return o
}

// SetDeviceSerial adds the deviceSerial to the get network events params
func (o *GetNetworkEventsParams) SetDeviceSerial(deviceSerial *string) {
	o.DeviceSerial = deviceSerial
}

// WithEndingBefore adds the endingBefore to the get network events params
func (o *GetNetworkEventsParams) WithEndingBefore(endingBefore *string) *GetNetworkEventsParams {
	o.SetEndingBefore(endingBefore)
	return o
}

// SetEndingBefore adds the endingBefore to the get network events params
func (o *GetNetworkEventsParams) SetEndingBefore(endingBefore *string) {
	o.EndingBefore = endingBefore
}

// WithExcludedEventTypes adds the excludedEventTypes to the get network events params
func (o *GetNetworkEventsParams) WithExcludedEventTypes(excludedEventTypes []string) *GetNetworkEventsParams {
	o.SetExcludedEventTypes(excludedEventTypes)
	return o
}

// SetExcludedEventTypes adds the excludedEventTypes to the get network events params
func (o *GetNetworkEventsParams) SetExcludedEventTypes(excludedEventTypes []string) {
	o.ExcludedEventTypes = excludedEventTypes
}

// WithIncludedEventTypes adds the includedEventTypes to the get network events params
func (o *GetNetworkEventsParams) WithIncludedEventTypes(includedEventTypes []string) *GetNetworkEventsParams {
	o.SetIncludedEventTypes(includedEventTypes)
	return o
}

// SetIncludedEventTypes adds the includedEventTypes to the get network events params
func (o *GetNetworkEventsParams) SetIncludedEventTypes(includedEventTypes []string) {
	o.IncludedEventTypes = includedEventTypes
}

// WithNetworkID adds the networkID to the get network events params
func (o *GetNetworkEventsParams) WithNetworkID(networkID string) *GetNetworkEventsParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network events params
func (o *GetNetworkEventsParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithPerPage adds the perPage to the get network events params
func (o *GetNetworkEventsParams) WithPerPage(perPage *int64) *GetNetworkEventsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get network events params
func (o *GetNetworkEventsParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithProductType adds the productType to the get network events params
func (o *GetNetworkEventsParams) WithProductType(productType *string) *GetNetworkEventsParams {
	o.SetProductType(productType)
	return o
}

// SetProductType adds the productType to the get network events params
func (o *GetNetworkEventsParams) SetProductType(productType *string) {
	o.ProductType = productType
}

// WithSmDeviceMac adds the smDeviceMac to the get network events params
func (o *GetNetworkEventsParams) WithSmDeviceMac(smDeviceMac *string) *GetNetworkEventsParams {
	o.SetSmDeviceMac(smDeviceMac)
	return o
}

// SetSmDeviceMac adds the smDeviceMac to the get network events params
func (o *GetNetworkEventsParams) SetSmDeviceMac(smDeviceMac *string) {
	o.SmDeviceMac = smDeviceMac
}

// WithSmDeviceName adds the smDeviceName to the get network events params
func (o *GetNetworkEventsParams) WithSmDeviceName(smDeviceName *string) *GetNetworkEventsParams {
	o.SetSmDeviceName(smDeviceName)
	return o
}

// SetSmDeviceName adds the smDeviceName to the get network events params
func (o *GetNetworkEventsParams) SetSmDeviceName(smDeviceName *string) {
	o.SmDeviceName = smDeviceName
}

// WithStartingAfter adds the startingAfter to the get network events params
func (o *GetNetworkEventsParams) WithStartingAfter(startingAfter *string) *GetNetworkEventsParams {
	o.SetStartingAfter(startingAfter)
	return o
}

// SetStartingAfter adds the startingAfter to the get network events params
func (o *GetNetworkEventsParams) SetStartingAfter(startingAfter *string) {
	o.StartingAfter = startingAfter
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientIP != nil {

		// query param clientIp
		var qrClientIP string

		if o.ClientIP != nil {
			qrClientIP = *o.ClientIP
		}
		qClientIP := qrClientIP
		if qClientIP != "" {

			if err := r.SetQueryParam("clientIp", qClientIP); err != nil {
				return err
			}
		}
	}

	if o.ClientMac != nil {

		// query param clientMac
		var qrClientMac string

		if o.ClientMac != nil {
			qrClientMac = *o.ClientMac
		}
		qClientMac := qrClientMac
		if qClientMac != "" {

			if err := r.SetQueryParam("clientMac", qClientMac); err != nil {
				return err
			}
		}
	}

	if o.ClientName != nil {

		// query param clientName
		var qrClientName string

		if o.ClientName != nil {
			qrClientName = *o.ClientName
		}
		qClientName := qrClientName
		if qClientName != "" {

			if err := r.SetQueryParam("clientName", qClientName); err != nil {
				return err
			}
		}
	}

	if o.DeviceMac != nil {

		// query param deviceMac
		var qrDeviceMac string

		if o.DeviceMac != nil {
			qrDeviceMac = *o.DeviceMac
		}
		qDeviceMac := qrDeviceMac
		if qDeviceMac != "" {

			if err := r.SetQueryParam("deviceMac", qDeviceMac); err != nil {
				return err
			}
		}
	}

	if o.DeviceName != nil {

		// query param deviceName
		var qrDeviceName string

		if o.DeviceName != nil {
			qrDeviceName = *o.DeviceName
		}
		qDeviceName := qrDeviceName
		if qDeviceName != "" {

			if err := r.SetQueryParam("deviceName", qDeviceName); err != nil {
				return err
			}
		}
	}

	if o.DeviceSerial != nil {

		// query param deviceSerial
		var qrDeviceSerial string

		if o.DeviceSerial != nil {
			qrDeviceSerial = *o.DeviceSerial
		}
		qDeviceSerial := qrDeviceSerial
		if qDeviceSerial != "" {

			if err := r.SetQueryParam("deviceSerial", qDeviceSerial); err != nil {
				return err
			}
		}
	}

	if o.EndingBefore != nil {

		// query param endingBefore
		var qrEndingBefore string

		if o.EndingBefore != nil {
			qrEndingBefore = *o.EndingBefore
		}
		qEndingBefore := qrEndingBefore
		if qEndingBefore != "" {

			if err := r.SetQueryParam("endingBefore", qEndingBefore); err != nil {
				return err
			}
		}
	}

	if o.ExcludedEventTypes != nil {

		// binding items for excludedEventTypes
		joinedExcludedEventTypes := o.bindParamExcludedEventTypes(reg)

		// query array param excludedEventTypes
		if err := r.SetQueryParam("excludedEventTypes", joinedExcludedEventTypes...); err != nil {
			return err
		}
	}

	if o.IncludedEventTypes != nil {

		// binding items for includedEventTypes
		joinedIncludedEventTypes := o.bindParamIncludedEventTypes(reg)

		// query array param includedEventTypes
		if err := r.SetQueryParam("includedEventTypes", joinedIncludedEventTypes...); err != nil {
			return err
		}
	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.PerPage != nil {

		// query param perPage
		var qrPerPage int64

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("perPage", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.ProductType != nil {

		// query param productType
		var qrProductType string

		if o.ProductType != nil {
			qrProductType = *o.ProductType
		}
		qProductType := qrProductType
		if qProductType != "" {

			if err := r.SetQueryParam("productType", qProductType); err != nil {
				return err
			}
		}
	}

	if o.SmDeviceMac != nil {

		// query param smDeviceMac
		var qrSmDeviceMac string

		if o.SmDeviceMac != nil {
			qrSmDeviceMac = *o.SmDeviceMac
		}
		qSmDeviceMac := qrSmDeviceMac
		if qSmDeviceMac != "" {

			if err := r.SetQueryParam("smDeviceMac", qSmDeviceMac); err != nil {
				return err
			}
		}
	}

	if o.SmDeviceName != nil {

		// query param smDeviceName
		var qrSmDeviceName string

		if o.SmDeviceName != nil {
			qrSmDeviceName = *o.SmDeviceName
		}
		qSmDeviceName := qrSmDeviceName
		if qSmDeviceName != "" {

			if err := r.SetQueryParam("smDeviceName", qSmDeviceName); err != nil {
				return err
			}
		}
	}

	if o.StartingAfter != nil {

		// query param startingAfter
		var qrStartingAfter string

		if o.StartingAfter != nil {
			qrStartingAfter = *o.StartingAfter
		}
		qStartingAfter := qrStartingAfter
		if qStartingAfter != "" {

			if err := r.SetQueryParam("startingAfter", qStartingAfter); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetNetworkEvents binds the parameter excludedEventTypes
func (o *GetNetworkEventsParams) bindParamExcludedEventTypes(formats strfmt.Registry) []string {
	excludedEventTypesIR := o.ExcludedEventTypes

	var excludedEventTypesIC []string
	for _, excludedEventTypesIIR := range excludedEventTypesIR { // explode []string

		excludedEventTypesIIV := excludedEventTypesIIR // string as string
		excludedEventTypesIC = append(excludedEventTypesIC, excludedEventTypesIIV)
	}

	// items.CollectionFormat: ""
	excludedEventTypesIS := swag.JoinByFormat(excludedEventTypesIC, "")

	return excludedEventTypesIS
}

// bindParamGetNetworkEvents binds the parameter includedEventTypes
func (o *GetNetworkEventsParams) bindParamIncludedEventTypes(formats strfmt.Registry) []string {
	includedEventTypesIR := o.IncludedEventTypes

	var includedEventTypesIC []string
	for _, includedEventTypesIIR := range includedEventTypesIR { // explode []string

		includedEventTypesIIV := includedEventTypesIIR // string as string
		includedEventTypesIC = append(includedEventTypesIC, includedEventTypesIIV)
	}

	// items.CollectionFormat: ""
	includedEventTypesIS := swag.JoinByFormat(includedEventTypesIC, "")

	return includedEventTypesIS
}
