// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkSettingsReader is a Reader for the UpdateNetworkSettings structure.
type UpdateNetworkSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkSettingsOK creates a UpdateNetworkSettingsOK with default headers values
func NewUpdateNetworkSettingsOK() *UpdateNetworkSettingsOK {
	return &UpdateNetworkSettingsOK{}
}

/* UpdateNetworkSettingsOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkSettingsOK struct {
	Payload interface{}
}

func (o *UpdateNetworkSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/settings][%d] updateNetworkSettingsOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkSettingsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkSettingsBody update network settings body
// Example: {"fips":{"enabled":true},"localStatusPage":{"authentication":{"enabled":false,"username":"admin"}},"localStatusPageEnabled":true,"namedVlans":{"enabled":true},"remoteStatusPageEnabled":true,"secureConnect":{"enabled":false}}
swagger:model UpdateNetworkSettingsBody
*/
type UpdateNetworkSettingsBody struct {

	// local status page
	LocalStatusPage *UpdateNetworkSettingsParamsBodyLocalStatusPage `json:"localStatusPage,omitempty"`

	// Enables / disables the local device status pages (<a target='_blank' href='http://my.meraki.com/'>my.meraki.com, </a><a target='_blank' href='http://ap.meraki.com/'>ap.meraki.com, </a><a target='_blank' href='http://switch.meraki.com/'>switch.meraki.com, </a><a target='_blank' href='http://wired.meraki.com/'>wired.meraki.com</a>). Optional (defaults to false)
	LocalStatusPageEnabled bool `json:"localStatusPageEnabled,omitempty"`

	// Enables / disables access to the device status page (<a target='_blank'>http://[device's LAN IP])</a>. Optional. Can only be set if localStatusPageEnabled is set to true
	RemoteStatusPageEnabled bool `json:"remoteStatusPageEnabled,omitempty"`

	// secure connect
	SecureConnect *UpdateNetworkSettingsParamsBodySecureConnect `json:"secureConnect,omitempty"`
}

// Validate validates this update network settings body
func (o *UpdateNetworkSettingsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLocalStatusPage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecureConnect(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSettingsBody) validateLocalStatusPage(formats strfmt.Registry) error {
	if swag.IsZero(o.LocalStatusPage) { // not required
		return nil
	}

	if o.LocalStatusPage != nil {
		if err := o.LocalStatusPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSettings" + "." + "localStatusPage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSettings" + "." + "localStatusPage")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSettingsBody) validateSecureConnect(formats strfmt.Registry) error {
	if swag.IsZero(o.SecureConnect) { // not required
		return nil
	}

	if o.SecureConnect != nil {
		if err := o.SecureConnect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSettings" + "." + "secureConnect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSettings" + "." + "secureConnect")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network settings body based on the context it is used
func (o *UpdateNetworkSettingsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocalStatusPage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSecureConnect(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSettingsBody) contextValidateLocalStatusPage(ctx context.Context, formats strfmt.Registry) error {

	if o.LocalStatusPage != nil {
		if err := o.LocalStatusPage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSettings" + "." + "localStatusPage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSettings" + "." + "localStatusPage")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateNetworkSettingsBody) contextValidateSecureConnect(ctx context.Context, formats strfmt.Registry) error {

	if o.SecureConnect != nil {
		if err := o.SecureConnect.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSettings" + "." + "secureConnect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSettings" + "." + "secureConnect")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSettingsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSettingsBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSettingsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkSettingsParamsBodyLocalStatusPage A hash of Local Status page(s) options applied to the Network.
swagger:model UpdateNetworkSettingsParamsBodyLocalStatusPage
*/
type UpdateNetworkSettingsParamsBodyLocalStatusPage struct {

	// authentication
	Authentication *UpdateNetworkSettingsParamsBodyLocalStatusPageAuthentication `json:"authentication,omitempty"`
}

// Validate validates this update network settings params body local status page
func (o *UpdateNetworkSettingsParamsBodyLocalStatusPage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSettingsParamsBodyLocalStatusPage) validateAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(o.Authentication) { // not required
		return nil
	}

	if o.Authentication != nil {
		if err := o.Authentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSettings" + "." + "localStatusPage" + "." + "authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSettings" + "." + "localStatusPage" + "." + "authentication")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update network settings params body local status page based on the context it is used
func (o *UpdateNetworkSettingsParamsBodyLocalStatusPage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateNetworkSettingsParamsBodyLocalStatusPage) contextValidateAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if o.Authentication != nil {
		if err := o.Authentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateNetworkSettings" + "." + "localStatusPage" + "." + "authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateNetworkSettings" + "." + "localStatusPage" + "." + "authentication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSettingsParamsBodyLocalStatusPage) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSettingsParamsBodyLocalStatusPage) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSettingsParamsBodyLocalStatusPage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkSettingsParamsBodyLocalStatusPageAuthentication A hash of Local Status page(s)' authentication options applied to the Network.
swagger:model UpdateNetworkSettingsParamsBodyLocalStatusPageAuthentication
*/
type UpdateNetworkSettingsParamsBodyLocalStatusPageAuthentication struct {

	// Enables / disables the authentication on Local Status page(s).
	Enabled bool `json:"enabled,omitempty"`

	// A password used for Local Status Page(s). Set this null to clear the password.
	Password string `json:"password,omitempty"`
}

// Validate validates this update network settings params body local status page authentication
func (o *UpdateNetworkSettingsParamsBodyLocalStatusPageAuthentication) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network settings params body local status page authentication based on context it is used
func (o *UpdateNetworkSettingsParamsBodyLocalStatusPageAuthentication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSettingsParamsBodyLocalStatusPageAuthentication) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSettingsParamsBodyLocalStatusPageAuthentication) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSettingsParamsBodyLocalStatusPageAuthentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateNetworkSettingsParamsBodySecureConnect A hash of SecureConnect options applied to the Network.
swagger:model UpdateNetworkSettingsParamsBodySecureConnect
*/
type UpdateNetworkSettingsParamsBodySecureConnect struct {

	// Enables / disables SecureConnect on the network. Optional.
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this update network settings params body secure connect
func (o *UpdateNetworkSettingsParamsBodySecureConnect) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network settings params body secure connect based on context it is used
func (o *UpdateNetworkSettingsParamsBodySecureConnect) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkSettingsParamsBodySecureConnect) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkSettingsParamsBodySecureConnect) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkSettingsParamsBodySecureConnect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
