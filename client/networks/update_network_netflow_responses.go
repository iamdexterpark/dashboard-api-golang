// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateNetworkNetflowReader is a Reader for the UpdateNetworkNetflow structure.
type UpdateNetworkNetflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetworkNetflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateNetworkNetflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateNetworkNetflowOK creates a UpdateNetworkNetflowOK with default headers values
func NewUpdateNetworkNetflowOK() *UpdateNetworkNetflowOK {
	return &UpdateNetworkNetflowOK{}
}

/* UpdateNetworkNetflowOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateNetworkNetflowOK struct {
	Payload interface{}
}

func (o *UpdateNetworkNetflowOK) Error() string {
	return fmt.Sprintf("[PUT /networks/{networkId}/netflow][%d] updateNetworkNetflowOK  %+v", 200, o.Payload)
}
func (o *UpdateNetworkNetflowOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateNetworkNetflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateNetworkNetflowBody update network netflow body
// Example: {"collectorIp":"1.2.3.4","collectorPort":443,"etaDstPort":443,"etaEnabled":true,"reportingEnabled":true}
swagger:model UpdateNetworkNetflowBody
*/
type UpdateNetworkNetflowBody struct {

	// The IPv4 address of the NetFlow collector.
	CollectorIP string `json:"collectorIp,omitempty"`

	// The port that the NetFlow collector will be listening on.
	CollectorPort int64 `json:"collectorPort,omitempty"`

	// The port that the Encrypted Traffic Analytics collector will be listening on.
	EtaDstPort int64 `json:"etaDstPort,omitempty"`

	// Boolean indicating whether Encrypted Traffic Analytics is enabled (true) or disabled (false).
	EtaEnabled bool `json:"etaEnabled,omitempty"`

	// Boolean indicating whether NetFlow traffic reporting is enabled (true) or disabled (false).
	ReportingEnabled bool `json:"reportingEnabled,omitempty"`
}

// Validate validates this update network netflow body
func (o *UpdateNetworkNetflowBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update network netflow body based on context it is used
func (o *UpdateNetworkNetflowBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateNetworkNetflowBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateNetworkNetflowBody) UnmarshalBinary(b []byte) error {
	var res UpdateNetworkNetflowBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
