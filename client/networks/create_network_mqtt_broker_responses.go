// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNetworkMqttBrokerReader is a Reader for the CreateNetworkMqttBroker structure.
type CreateNetworkMqttBrokerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNetworkMqttBrokerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateNetworkMqttBrokerCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateNetworkMqttBrokerCreated creates a CreateNetworkMqttBrokerCreated with default headers values
func NewCreateNetworkMqttBrokerCreated() *CreateNetworkMqttBrokerCreated {
	return &CreateNetworkMqttBrokerCreated{}
}

/* CreateNetworkMqttBrokerCreated describes a response with status code 201, with default header values.

Successful operation
*/
type CreateNetworkMqttBrokerCreated struct {
	Payload interface{}
}

func (o *CreateNetworkMqttBrokerCreated) Error() string {
	return fmt.Sprintf("[POST /networks/{networkId}/mqttBrokers][%d] createNetworkMqttBrokerCreated  %+v", 201, o.Payload)
}
func (o *CreateNetworkMqttBrokerCreated) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateNetworkMqttBrokerCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateNetworkMqttBrokerBody create network mqtt broker body
// Example: {"authentication":{"username":"Username"},"host":"1.1.1.1","name":"MQTT_Broker_1","port":1234,"security":{"mode":"tls","tls":{"hasCaCertificate":true,"verifyHostnames":true}}}
swagger:model CreateNetworkMqttBrokerBody
*/
type CreateNetworkMqttBrokerBody struct {

	// Authentication settings of the MQTT broker
	Authentication interface{} `json:"authentication,omitempty"`

	// Host name/IP address where the MQTT broker runs.
	// Required: true
	Host *string `json:"host"`

	// Name of the MQTT broker.
	// Required: true
	Name *string `json:"name"`

	// Host port though which the MQTT broker can be reached.
	// Required: true
	Port *int64 `json:"port"`

	// security
	Security *CreateNetworkMqttBrokerParamsBodySecurity `json:"security,omitempty"`
}

// Validate validates this create network mqtt broker body
func (o *CreateNetworkMqttBrokerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkMqttBrokerBody) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkMqttBroker"+"."+"host", "body", o.Host); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkMqttBrokerBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkMqttBroker"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkMqttBrokerBody) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("createNetworkMqttBroker"+"."+"port", "body", o.Port); err != nil {
		return err
	}

	return nil
}

func (o *CreateNetworkMqttBrokerBody) validateSecurity(formats strfmt.Registry) error {
	if swag.IsZero(o.Security) { // not required
		return nil
	}

	if o.Security != nil {
		if err := o.Security.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkMqttBroker" + "." + "security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkMqttBroker" + "." + "security")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network mqtt broker body based on the context it is used
func (o *CreateNetworkMqttBrokerBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkMqttBrokerBody) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if o.Security != nil {
		if err := o.Security.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkMqttBroker" + "." + "security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkMqttBroker" + "." + "security")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkMqttBrokerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkMqttBrokerBody) UnmarshalBinary(b []byte) error {
	var res CreateNetworkMqttBrokerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateNetworkMqttBrokerParamsBodySecurity Security settings of the MQTT broker.
swagger:model CreateNetworkMqttBrokerParamsBodySecurity
*/
type CreateNetworkMqttBrokerParamsBodySecurity struct {

	// Security protocol of the MQTT broker.
	Mode string `json:"mode,omitempty"`

	// security
	Security *CreateNetworkMqttBrokerParamsBodySecuritySecurity `json:"security,omitempty"`
}

// Validate validates this create network mqtt broker params body security
func (o *CreateNetworkMqttBrokerParamsBodySecurity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkMqttBrokerParamsBodySecurity) validateSecurity(formats strfmt.Registry) error {
	if swag.IsZero(o.Security) { // not required
		return nil
	}

	if o.Security != nil {
		if err := o.Security.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkMqttBroker" + "." + "security" + "." + "security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkMqttBroker" + "." + "security" + "." + "security")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create network mqtt broker params body security based on the context it is used
func (o *CreateNetworkMqttBrokerParamsBodySecurity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateNetworkMqttBrokerParamsBodySecurity) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if o.Security != nil {
		if err := o.Security.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createNetworkMqttBroker" + "." + "security" + "." + "security")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createNetworkMqttBroker" + "." + "security" + "." + "security")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkMqttBrokerParamsBodySecurity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkMqttBrokerParamsBodySecurity) UnmarshalBinary(b []byte) error {
	var res CreateNetworkMqttBrokerParamsBodySecurity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateNetworkMqttBrokerParamsBodySecuritySecurity TLS settings of the MQTT broker.
swagger:model CreateNetworkMqttBrokerParamsBodySecuritySecurity
*/
type CreateNetworkMqttBrokerParamsBodySecuritySecurity struct {

	// CA Certificate of the MQTT broker.
	CaCertificate string `json:"caCertificate,omitempty"`

	// Whether the TLS hostname verification is enabled for the MQTT broker.
	VerifyHostnames bool `json:"verifyHostnames,omitempty"`
}

// Validate validates this create network mqtt broker params body security security
func (o *CreateNetworkMqttBrokerParamsBodySecuritySecurity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create network mqtt broker params body security security based on context it is used
func (o *CreateNetworkMqttBrokerParamsBodySecuritySecurity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNetworkMqttBrokerParamsBodySecuritySecurity) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNetworkMqttBrokerParamsBodySecuritySecurity) UnmarshalBinary(b []byte) error {
	var res CreateNetworkMqttBrokerParamsBodySecuritySecurity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
