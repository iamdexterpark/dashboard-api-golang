// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetNetworkTrafficParams creates a new GetNetworkTrafficParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNetworkTrafficParams() *GetNetworkTrafficParams {
	return &GetNetworkTrafficParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkTrafficParamsWithTimeout creates a new GetNetworkTrafficParams object
// with the ability to set a timeout on a request.
func NewGetNetworkTrafficParamsWithTimeout(timeout time.Duration) *GetNetworkTrafficParams {
	return &GetNetworkTrafficParams{
		timeout: timeout,
	}
}

// NewGetNetworkTrafficParamsWithContext creates a new GetNetworkTrafficParams object
// with the ability to set a context for a request.
func NewGetNetworkTrafficParamsWithContext(ctx context.Context) *GetNetworkTrafficParams {
	return &GetNetworkTrafficParams{
		Context: ctx,
	}
}

// NewGetNetworkTrafficParamsWithHTTPClient creates a new GetNetworkTrafficParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNetworkTrafficParamsWithHTTPClient(client *http.Client) *GetNetworkTrafficParams {
	return &GetNetworkTrafficParams{
		HTTPClient: client,
	}
}

/* GetNetworkTrafficParams contains all the parameters to send to the API endpoint
   for the get network traffic operation.

   Typically these are written to a http.Request.
*/
type GetNetworkTrafficParams struct {

	/* DeviceType.

	   Filter the data by device type: 'combined', 'wireless', 'switch' or 'appliance'. Defaults to 'combined'. When using 'combined', for each rule the data will come from the device type with the most usage.
	*/
	DeviceType *string

	// NetworkID.
	NetworkID string

	/* T0.

	   The beginning of the timespan for the data. The maximum lookback period is 30 days from today.
	*/
	T0 *string

	/* Timespan.

	   The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 30 days.

	   Format: float
	*/
	Timespan *float32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get network traffic params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkTrafficParams) WithDefaults() *GetNetworkTrafficParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get network traffic params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNetworkTrafficParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get network traffic params
func (o *GetNetworkTrafficParams) WithTimeout(timeout time.Duration) *GetNetworkTrafficParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network traffic params
func (o *GetNetworkTrafficParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network traffic params
func (o *GetNetworkTrafficParams) WithContext(ctx context.Context) *GetNetworkTrafficParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network traffic params
func (o *GetNetworkTrafficParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network traffic params
func (o *GetNetworkTrafficParams) WithHTTPClient(client *http.Client) *GetNetworkTrafficParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network traffic params
func (o *GetNetworkTrafficParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceType adds the deviceType to the get network traffic params
func (o *GetNetworkTrafficParams) WithDeviceType(deviceType *string) *GetNetworkTrafficParams {
	o.SetDeviceType(deviceType)
	return o
}

// SetDeviceType adds the deviceType to the get network traffic params
func (o *GetNetworkTrafficParams) SetDeviceType(deviceType *string) {
	o.DeviceType = deviceType
}

// WithNetworkID adds the networkID to the get network traffic params
func (o *GetNetworkTrafficParams) WithNetworkID(networkID string) *GetNetworkTrafficParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get network traffic params
func (o *GetNetworkTrafficParams) SetNetworkID(networkID string) {
	o.NetworkID = networkID
}

// WithT0 adds the t0 to the get network traffic params
func (o *GetNetworkTrafficParams) WithT0(t0 *string) *GetNetworkTrafficParams {
	o.SetT0(t0)
	return o
}

// SetT0 adds the t0 to the get network traffic params
func (o *GetNetworkTrafficParams) SetT0(t0 *string) {
	o.T0 = t0
}

// WithTimespan adds the timespan to the get network traffic params
func (o *GetNetworkTrafficParams) WithTimespan(timespan *float32) *GetNetworkTrafficParams {
	o.SetTimespan(timespan)
	return o
}

// SetTimespan adds the timespan to the get network traffic params
func (o *GetNetworkTrafficParams) SetTimespan(timespan *float32) {
	o.Timespan = timespan
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkTrafficParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DeviceType != nil {

		// query param deviceType
		var qrDeviceType string

		if o.DeviceType != nil {
			qrDeviceType = *o.DeviceType
		}
		qDeviceType := qrDeviceType
		if qDeviceType != "" {

			if err := r.SetQueryParam("deviceType", qDeviceType); err != nil {
				return err
			}
		}
	}

	// path param networkId
	if err := r.SetPathParam("networkId", o.NetworkID); err != nil {
		return err
	}

	if o.T0 != nil {

		// query param t0
		var qrT0 string

		if o.T0 != nil {
			qrT0 = *o.T0
		}
		qT0 := qrT0
		if qT0 != "" {

			if err := r.SetQueryParam("t0", qT0); err != nil {
				return err
			}
		}
	}

	if o.Timespan != nil {

		// query param timespan
		var qrTimespan float32

		if o.Timespan != nil {
			qrTimespan = *o.Timespan
		}
		qTimespan := swag.FormatFloat32(qrTimespan)
		if qTimespan != "" {

			if err := r.SetQueryParam("timespan", qTimespan); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
