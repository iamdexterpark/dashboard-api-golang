// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOrganizationAdminReader is a Reader for the CreateOrganizationAdmin structure.
type CreateOrganizationAdminReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrganizationAdminReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateOrganizationAdminCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateOrganizationAdminCreated creates a CreateOrganizationAdminCreated with default headers values
func NewCreateOrganizationAdminCreated() *CreateOrganizationAdminCreated {
	return &CreateOrganizationAdminCreated{}
}

/* CreateOrganizationAdminCreated describes a response with status code 201, with default header values.

Successful operation
*/
type CreateOrganizationAdminCreated struct {
	Payload interface{}
}

func (o *CreateOrganizationAdminCreated) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/admins][%d] createOrganizationAdminCreated  %+v", 201, o.Payload)
}
func (o *CreateOrganizationAdminCreated) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateOrganizationAdminCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateOrganizationAdminBody create organization admin body
// Example: {"email":"miles@meraki.com","name":"Miles Meraki","orgAccess":"none","tags":[{"access":"read-only","tag":"west"}]}
swagger:model CreateOrganizationAdminBody
*/
type CreateOrganizationAdminBody struct {

	// The method of authentication the user will use to sign in to the Meraki dashboard. Can be one of 'Email' or 'Cisco SecureX Sign-On'. The default is Email authentication
	// Enum: [Email Cisco SecureX Sign-On]
	AuthenticationMethod string `json:"authenticationMethod,omitempty"`

	// The email of the dashboard administrator. This attribute can not be updated.
	// Required: true
	Email *string `json:"email"`

	// The name of the dashboard administrator
	// Required: true
	Name *string `json:"name"`

	// The list of networks that the dashboard administrator has privileges on
	Networks []*CreateOrganizationAdminParamsBodyNetworksItems0 `json:"networks"`

	// The privilege of the dashboard administrator on the organization. Can be one of 'full', 'read-only', 'enterprise' or 'none'
	// Required: true
	// Enum: [full read-only enterprise none]
	OrgAccess *string `json:"orgAccess"`

	// The list of tags that the dashboard administrator has privileges on
	Tags []*CreateOrganizationAdminParamsBodyTagsItems0 `json:"tags"`
}

// Validate validates this create organization admin body
func (o *CreateOrganizationAdminBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthenticationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrgAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createOrganizationAdminBodyTypeAuthenticationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Email","Cisco SecureX Sign-On"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createOrganizationAdminBodyTypeAuthenticationMethodPropEnum = append(createOrganizationAdminBodyTypeAuthenticationMethodPropEnum, v)
	}
}

const (

	// CreateOrganizationAdminBodyAuthenticationMethodEmail captures enum value "Email"
	CreateOrganizationAdminBodyAuthenticationMethodEmail string = "Email"

	// CreateOrganizationAdminBodyAuthenticationMethodCiscoSecureXSignDashOn captures enum value "Cisco SecureX Sign-On"
	CreateOrganizationAdminBodyAuthenticationMethodCiscoSecureXSignDashOn string = "Cisco SecureX Sign-On"
)

// prop value enum
func (o *CreateOrganizationAdminBody) validateAuthenticationMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createOrganizationAdminBodyTypeAuthenticationMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateOrganizationAdminBody) validateAuthenticationMethod(formats strfmt.Registry) error {
	if swag.IsZero(o.AuthenticationMethod) { // not required
		return nil
	}

	// value enum
	if err := o.validateAuthenticationMethodEnum("createOrganizationAdmin"+"."+"authenticationMethod", "body", o.AuthenticationMethod); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrganizationAdminBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("createOrganizationAdmin"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrganizationAdminBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createOrganizationAdmin"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrganizationAdminBody) validateNetworks(formats strfmt.Registry) error {
	if swag.IsZero(o.Networks) { // not required
		return nil
	}

	for i := 0; i < len(o.Networks); i++ {
		if swag.IsZero(o.Networks[i]) { // not required
			continue
		}

		if o.Networks[i] != nil {
			if err := o.Networks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganizationAdmin" + "." + "networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganizationAdmin" + "." + "networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createOrganizationAdminBodyTypeOrgAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["full","read-only","enterprise","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createOrganizationAdminBodyTypeOrgAccessPropEnum = append(createOrganizationAdminBodyTypeOrgAccessPropEnum, v)
	}
}

const (

	// CreateOrganizationAdminBodyOrgAccessFull captures enum value "full"
	CreateOrganizationAdminBodyOrgAccessFull string = "full"

	// CreateOrganizationAdminBodyOrgAccessReadDashOnly captures enum value "read-only"
	CreateOrganizationAdminBodyOrgAccessReadDashOnly string = "read-only"

	// CreateOrganizationAdminBodyOrgAccessEnterprise captures enum value "enterprise"
	CreateOrganizationAdminBodyOrgAccessEnterprise string = "enterprise"

	// CreateOrganizationAdminBodyOrgAccessNone captures enum value "none"
	CreateOrganizationAdminBodyOrgAccessNone string = "none"
)

// prop value enum
func (o *CreateOrganizationAdminBody) validateOrgAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createOrganizationAdminBodyTypeOrgAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateOrganizationAdminBody) validateOrgAccess(formats strfmt.Registry) error {

	if err := validate.Required("createOrganizationAdmin"+"."+"orgAccess", "body", o.OrgAccess); err != nil {
		return err
	}

	// value enum
	if err := o.validateOrgAccessEnum("createOrganizationAdmin"+"."+"orgAccess", "body", *o.OrgAccess); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrganizationAdminBody) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(o.Tags) { // not required
		return nil
	}

	for i := 0; i < len(o.Tags); i++ {
		if swag.IsZero(o.Tags[i]) { // not required
			continue
		}

		if o.Tags[i] != nil {
			if err := o.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganizationAdmin" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganizationAdmin" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create organization admin body based on the context it is used
func (o *CreateOrganizationAdminBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationAdminBody) contextValidateNetworks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Networks); i++ {

		if o.Networks[i] != nil {
			if err := o.Networks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganizationAdmin" + "." + "networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganizationAdmin" + "." + "networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateOrganizationAdminBody) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Tags); i++ {

		if o.Tags[i] != nil {
			if err := o.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganizationAdmin" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganizationAdmin" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationAdminBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationAdminBody) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationAdminBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrganizationAdminParamsBodyNetworksItems0 create organization admin params body networks items0
swagger:model CreateOrganizationAdminParamsBodyNetworksItems0
*/
type CreateOrganizationAdminParamsBodyNetworksItems0 struct {

	// The privilege of the dashboard administrator on the network. Can be one of 'full', 'read-only', 'guest-ambassador' or 'monitor-only'
	// Required: true
	// Enum: [full read-only guest-ambassador monitor-only]
	Access *string `json:"access"`

	// The network ID
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this create organization admin params body networks items0
func (o *CreateOrganizationAdminParamsBodyNetworksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createOrganizationAdminParamsBodyNetworksItems0TypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["full","read-only","guest-ambassador","monitor-only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createOrganizationAdminParamsBodyNetworksItems0TypeAccessPropEnum = append(createOrganizationAdminParamsBodyNetworksItems0TypeAccessPropEnum, v)
	}
}

const (

	// CreateOrganizationAdminParamsBodyNetworksItems0AccessFull captures enum value "full"
	CreateOrganizationAdminParamsBodyNetworksItems0AccessFull string = "full"

	// CreateOrganizationAdminParamsBodyNetworksItems0AccessReadDashOnly captures enum value "read-only"
	CreateOrganizationAdminParamsBodyNetworksItems0AccessReadDashOnly string = "read-only"

	// CreateOrganizationAdminParamsBodyNetworksItems0AccessGuestDashAmbassador captures enum value "guest-ambassador"
	CreateOrganizationAdminParamsBodyNetworksItems0AccessGuestDashAmbassador string = "guest-ambassador"

	// CreateOrganizationAdminParamsBodyNetworksItems0AccessMonitorDashOnly captures enum value "monitor-only"
	CreateOrganizationAdminParamsBodyNetworksItems0AccessMonitorDashOnly string = "monitor-only"
)

// prop value enum
func (o *CreateOrganizationAdminParamsBodyNetworksItems0) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createOrganizationAdminParamsBodyNetworksItems0TypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateOrganizationAdminParamsBodyNetworksItems0) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", o.Access); err != nil {
		return err
	}

	// value enum
	if err := o.validateAccessEnum("access", "body", *o.Access); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrganizationAdminParamsBodyNetworksItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create organization admin params body networks items0 based on context it is used
func (o *CreateOrganizationAdminParamsBodyNetworksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationAdminParamsBodyNetworksItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationAdminParamsBodyNetworksItems0) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationAdminParamsBodyNetworksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrganizationAdminParamsBodyTagsItems0 create organization admin params body tags items0
swagger:model CreateOrganizationAdminParamsBodyTagsItems0
*/
type CreateOrganizationAdminParamsBodyTagsItems0 struct {

	// The privilege of the dashboard administrator on the tag. Can be one of 'full', 'read-only', 'guest-ambassador' or 'monitor-only'
	// Required: true
	// Enum: [full read-only guest-ambassador monitor-only]
	Access *string `json:"access"`

	// The name of the tag
	// Required: true
	Tag *string `json:"tag"`
}

// Validate validates this create organization admin params body tags items0
func (o *CreateOrganizationAdminParamsBodyTagsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createOrganizationAdminParamsBodyTagsItems0TypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["full","read-only","guest-ambassador","monitor-only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createOrganizationAdminParamsBodyTagsItems0TypeAccessPropEnum = append(createOrganizationAdminParamsBodyTagsItems0TypeAccessPropEnum, v)
	}
}

const (

	// CreateOrganizationAdminParamsBodyTagsItems0AccessFull captures enum value "full"
	CreateOrganizationAdminParamsBodyTagsItems0AccessFull string = "full"

	// CreateOrganizationAdminParamsBodyTagsItems0AccessReadDashOnly captures enum value "read-only"
	CreateOrganizationAdminParamsBodyTagsItems0AccessReadDashOnly string = "read-only"

	// CreateOrganizationAdminParamsBodyTagsItems0AccessGuestDashAmbassador captures enum value "guest-ambassador"
	CreateOrganizationAdminParamsBodyTagsItems0AccessGuestDashAmbassador string = "guest-ambassador"

	// CreateOrganizationAdminParamsBodyTagsItems0AccessMonitorDashOnly captures enum value "monitor-only"
	CreateOrganizationAdminParamsBodyTagsItems0AccessMonitorDashOnly string = "monitor-only"
)

// prop value enum
func (o *CreateOrganizationAdminParamsBodyTagsItems0) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createOrganizationAdminParamsBodyTagsItems0TypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateOrganizationAdminParamsBodyTagsItems0) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", o.Access); err != nil {
		return err
	}

	// value enum
	if err := o.validateAccessEnum("access", "body", *o.Access); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrganizationAdminParamsBodyTagsItems0) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", o.Tag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create organization admin params body tags items0 based on context it is used
func (o *CreateOrganizationAdminParamsBodyTagsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationAdminParamsBodyTagsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationAdminParamsBodyTagsItems0) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationAdminParamsBodyTagsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
