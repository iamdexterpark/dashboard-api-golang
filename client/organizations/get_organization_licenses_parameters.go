// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationLicensesParams creates a new GetOrganizationLicensesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrganizationLicensesParams() *GetOrganizationLicensesParams {
	return &GetOrganizationLicensesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationLicensesParamsWithTimeout creates a new GetOrganizationLicensesParams object
// with the ability to set a timeout on a request.
func NewGetOrganizationLicensesParamsWithTimeout(timeout time.Duration) *GetOrganizationLicensesParams {
	return &GetOrganizationLicensesParams{
		timeout: timeout,
	}
}

// NewGetOrganizationLicensesParamsWithContext creates a new GetOrganizationLicensesParams object
// with the ability to set a context for a request.
func NewGetOrganizationLicensesParamsWithContext(ctx context.Context) *GetOrganizationLicensesParams {
	return &GetOrganizationLicensesParams{
		Context: ctx,
	}
}

// NewGetOrganizationLicensesParamsWithHTTPClient creates a new GetOrganizationLicensesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrganizationLicensesParamsWithHTTPClient(client *http.Client) *GetOrganizationLicensesParams {
	return &GetOrganizationLicensesParams{
		HTTPClient: client,
	}
}

/* GetOrganizationLicensesParams contains all the parameters to send to the API endpoint
   for the get organization licenses operation.

   Typically these are written to a http.Request.
*/
type GetOrganizationLicensesParams struct {

	/* DeviceSerial.

	   Filter the licenses to those assigned to a particular device
	*/
	DeviceSerial *string

	/* EndingBefore.

	   A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	EndingBefore *string

	/* NetworkID.

	   Filter the licenses to those assigned in a particular network
	*/
	NetworkID *string

	// OrganizationID.
	OrganizationID string

	/* PerPage.

	   The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	*/
	PerPage *int64

	/* StartingAfter.

	   A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	StartingAfter *string

	/* State.

	   Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'unused', 'unusedActive' or 'recentlyQueued'
	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get organization licenses params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationLicensesParams) WithDefaults() *GetOrganizationLicensesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get organization licenses params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationLicensesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get organization licenses params
func (o *GetOrganizationLicensesParams) WithTimeout(timeout time.Duration) *GetOrganizationLicensesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization licenses params
func (o *GetOrganizationLicensesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization licenses params
func (o *GetOrganizationLicensesParams) WithContext(ctx context.Context) *GetOrganizationLicensesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization licenses params
func (o *GetOrganizationLicensesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization licenses params
func (o *GetOrganizationLicensesParams) WithHTTPClient(client *http.Client) *GetOrganizationLicensesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization licenses params
func (o *GetOrganizationLicensesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceSerial adds the deviceSerial to the get organization licenses params
func (o *GetOrganizationLicensesParams) WithDeviceSerial(deviceSerial *string) *GetOrganizationLicensesParams {
	o.SetDeviceSerial(deviceSerial)
	return o
}

// SetDeviceSerial adds the deviceSerial to the get organization licenses params
func (o *GetOrganizationLicensesParams) SetDeviceSerial(deviceSerial *string) {
	o.DeviceSerial = deviceSerial
}

// WithEndingBefore adds the endingBefore to the get organization licenses params
func (o *GetOrganizationLicensesParams) WithEndingBefore(endingBefore *string) *GetOrganizationLicensesParams {
	o.SetEndingBefore(endingBefore)
	return o
}

// SetEndingBefore adds the endingBefore to the get organization licenses params
func (o *GetOrganizationLicensesParams) SetEndingBefore(endingBefore *string) {
	o.EndingBefore = endingBefore
}

// WithNetworkID adds the networkID to the get organization licenses params
func (o *GetOrganizationLicensesParams) WithNetworkID(networkID *string) *GetOrganizationLicensesParams {
	o.SetNetworkID(networkID)
	return o
}

// SetNetworkID adds the networkId to the get organization licenses params
func (o *GetOrganizationLicensesParams) SetNetworkID(networkID *string) {
	o.NetworkID = networkID
}

// WithOrganizationID adds the organizationID to the get organization licenses params
func (o *GetOrganizationLicensesParams) WithOrganizationID(organizationID string) *GetOrganizationLicensesParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get organization licenses params
func (o *GetOrganizationLicensesParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithPerPage adds the perPage to the get organization licenses params
func (o *GetOrganizationLicensesParams) WithPerPage(perPage *int64) *GetOrganizationLicensesParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get organization licenses params
func (o *GetOrganizationLicensesParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithStartingAfter adds the startingAfter to the get organization licenses params
func (o *GetOrganizationLicensesParams) WithStartingAfter(startingAfter *string) *GetOrganizationLicensesParams {
	o.SetStartingAfter(startingAfter)
	return o
}

// SetStartingAfter adds the startingAfter to the get organization licenses params
func (o *GetOrganizationLicensesParams) SetStartingAfter(startingAfter *string) {
	o.StartingAfter = startingAfter
}

// WithState adds the state to the get organization licenses params
func (o *GetOrganizationLicensesParams) WithState(state *string) *GetOrganizationLicensesParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get organization licenses params
func (o *GetOrganizationLicensesParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationLicensesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DeviceSerial != nil {

		// query param deviceSerial
		var qrDeviceSerial string

		if o.DeviceSerial != nil {
			qrDeviceSerial = *o.DeviceSerial
		}
		qDeviceSerial := qrDeviceSerial
		if qDeviceSerial != "" {

			if err := r.SetQueryParam("deviceSerial", qDeviceSerial); err != nil {
				return err
			}
		}
	}

	if o.EndingBefore != nil {

		// query param endingBefore
		var qrEndingBefore string

		if o.EndingBefore != nil {
			qrEndingBefore = *o.EndingBefore
		}
		qEndingBefore := qrEndingBefore
		if qEndingBefore != "" {

			if err := r.SetQueryParam("endingBefore", qEndingBefore); err != nil {
				return err
			}
		}
	}

	if o.NetworkID != nil {

		// query param networkId
		var qrNetworkID string

		if o.NetworkID != nil {
			qrNetworkID = *o.NetworkID
		}
		qNetworkID := qrNetworkID
		if qNetworkID != "" {

			if err := r.SetQueryParam("networkId", qNetworkID); err != nil {
				return err
			}
		}
	}

	// path param organizationId
	if err := r.SetPathParam("organizationId", o.OrganizationID); err != nil {
		return err
	}

	if o.PerPage != nil {

		// query param perPage
		var qrPerPage int64

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("perPage", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.StartingAfter != nil {

		// query param startingAfter
		var qrStartingAfter string

		if o.StartingAfter != nil {
			qrStartingAfter = *o.StartingAfter
		}
		qStartingAfter := qrStartingAfter
		if qStartingAfter != "" {

			if err := r.SetQueryParam("startingAfter", qStartingAfter); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
