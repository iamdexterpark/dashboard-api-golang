// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationDevicesStatusesOverviewParams creates a new GetOrganizationDevicesStatusesOverviewParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrganizationDevicesStatusesOverviewParams() *GetOrganizationDevicesStatusesOverviewParams {
	return &GetOrganizationDevicesStatusesOverviewParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationDevicesStatusesOverviewParamsWithTimeout creates a new GetOrganizationDevicesStatusesOverviewParams object
// with the ability to set a timeout on a request.
func NewGetOrganizationDevicesStatusesOverviewParamsWithTimeout(timeout time.Duration) *GetOrganizationDevicesStatusesOverviewParams {
	return &GetOrganizationDevicesStatusesOverviewParams{
		timeout: timeout,
	}
}

// NewGetOrganizationDevicesStatusesOverviewParamsWithContext creates a new GetOrganizationDevicesStatusesOverviewParams object
// with the ability to set a context for a request.
func NewGetOrganizationDevicesStatusesOverviewParamsWithContext(ctx context.Context) *GetOrganizationDevicesStatusesOverviewParams {
	return &GetOrganizationDevicesStatusesOverviewParams{
		Context: ctx,
	}
}

// NewGetOrganizationDevicesStatusesOverviewParamsWithHTTPClient creates a new GetOrganizationDevicesStatusesOverviewParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrganizationDevicesStatusesOverviewParamsWithHTTPClient(client *http.Client) *GetOrganizationDevicesStatusesOverviewParams {
	return &GetOrganizationDevicesStatusesOverviewParams{
		HTTPClient: client,
	}
}

/* GetOrganizationDevicesStatusesOverviewParams contains all the parameters to send to the API endpoint
   for the get organization devices statuses overview operation.

   Typically these are written to a http.Request.
*/
type GetOrganizationDevicesStatusesOverviewParams struct {

	/* NetworkIds.

	   An optional parameter to filter device statuses by network.
	*/
	NetworkIds []string

	// OrganizationID.
	OrganizationID string

	/* ProductTypes.

	   An optional parameter to filter device statuses by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
	*/
	ProductTypes []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get organization devices statuses overview params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationDevicesStatusesOverviewParams) WithDefaults() *GetOrganizationDevicesStatusesOverviewParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get organization devices statuses overview params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationDevicesStatusesOverviewParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) WithTimeout(timeout time.Duration) *GetOrganizationDevicesStatusesOverviewParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) WithContext(ctx context.Context) *GetOrganizationDevicesStatusesOverviewParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) WithHTTPClient(client *http.Client) *GetOrganizationDevicesStatusesOverviewParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetworkIds adds the networkIds to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) WithNetworkIds(networkIds []string) *GetOrganizationDevicesStatusesOverviewParams {
	o.SetNetworkIds(networkIds)
	return o
}

// SetNetworkIds adds the networkIds to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) SetNetworkIds(networkIds []string) {
	o.NetworkIds = networkIds
}

// WithOrganizationID adds the organizationID to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) WithOrganizationID(organizationID string) *GetOrganizationDevicesStatusesOverviewParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithProductTypes adds the productTypes to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) WithProductTypes(productTypes []string) *GetOrganizationDevicesStatusesOverviewParams {
	o.SetProductTypes(productTypes)
	return o
}

// SetProductTypes adds the productTypes to the get organization devices statuses overview params
func (o *GetOrganizationDevicesStatusesOverviewParams) SetProductTypes(productTypes []string) {
	o.ProductTypes = productTypes
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationDevicesStatusesOverviewParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NetworkIds != nil {

		// binding items for networkIds
		joinedNetworkIds := o.bindParamNetworkIds(reg)

		// query array param networkIds
		if err := r.SetQueryParam("networkIds", joinedNetworkIds...); err != nil {
			return err
		}
	}

	// path param organizationId
	if err := r.SetPathParam("organizationId", o.OrganizationID); err != nil {
		return err
	}

	if o.ProductTypes != nil {

		// binding items for productTypes
		joinedProductTypes := o.bindParamProductTypes(reg)

		// query array param productTypes
		if err := r.SetQueryParam("productTypes", joinedProductTypes...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetOrganizationDevicesStatusesOverview binds the parameter networkIds
func (o *GetOrganizationDevicesStatusesOverviewParams) bindParamNetworkIds(formats strfmt.Registry) []string {
	networkIdsIR := o.NetworkIds

	var networkIdsIC []string
	for _, networkIdsIIR := range networkIdsIR { // explode []string

		networkIdsIIV := networkIdsIIR // string as string
		networkIdsIC = append(networkIdsIC, networkIdsIIV)
	}

	// items.CollectionFormat: ""
	networkIdsIS := swag.JoinByFormat(networkIdsIC, "")

	return networkIdsIS
}

// bindParamGetOrganizationDevicesStatusesOverview binds the parameter productTypes
func (o *GetOrganizationDevicesStatusesOverviewParams) bindParamProductTypes(formats strfmt.Registry) []string {
	productTypesIR := o.ProductTypes

	var productTypesIC []string
	for _, productTypesIIR := range productTypesIR { // explode []string

		productTypesIIV := productTypesIIR // string as string
		productTypesIC = append(productTypesIC, productTypesIIV)
	}

	// items.CollectionFormat: ""
	productTypesIS := swag.JoinByFormat(productTypesIC, "")

	return productTypesIS
}
