// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateOrganizationAdaptivePolicyACLReader is a Reader for the UpdateOrganizationAdaptivePolicyACL structure.
type UpdateOrganizationAdaptivePolicyACLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOrganizationAdaptivePolicyACLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOrganizationAdaptivePolicyACLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateOrganizationAdaptivePolicyACLOK creates a UpdateOrganizationAdaptivePolicyACLOK with default headers values
func NewUpdateOrganizationAdaptivePolicyACLOK() *UpdateOrganizationAdaptivePolicyACLOK {
	return &UpdateOrganizationAdaptivePolicyACLOK{}
}

/* UpdateOrganizationAdaptivePolicyACLOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateOrganizationAdaptivePolicyACLOK struct {
	Payload interface{}
}

func (o *UpdateOrganizationAdaptivePolicyACLOK) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organizationId}/adaptivePolicy/acls/{id}][%d] updateOrganizationAdaptivePolicyAclOK  %+v", 200, o.Payload)
}
func (o *UpdateOrganizationAdaptivePolicyACLOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateOrganizationAdaptivePolicyACLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateOrganizationAdaptivePolicyACLBody update organization adaptive policy ACL body
// Example: {"description":"Blocks sensitive web traffic","ipVersion":"ipv6","name":"Block sensitive web traffic","rules":[{"dstPort":"22-30","policy":"deny","protocol":"tcp","srcPort":"1,33"},{"dstPort":"any","policy":"allow","protocol":"any","srcPort":"any"}]}
swagger:model UpdateOrganizationAdaptivePolicyACLBody
*/
type UpdateOrganizationAdaptivePolicyACLBody struct {

	// Description of the adaptive policy ACL
	Description string `json:"description,omitempty"`

	// IP version of adpative policy ACL. One of: 'any', 'ipv4' or 'ipv6'
	// Enum: [any ipv4 ipv6]
	IPVersion string `json:"ipVersion,omitempty"`

	// Name of the adaptive policy ACL
	Name string `json:"name,omitempty"`

	// An ordered array of the adaptive policy ACL rules. An empty array will clear the rules.
	Rules []*UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0 `json:"rules"`
}

// Validate validates this update organization adaptive policy ACL body
func (o *UpdateOrganizationAdaptivePolicyACLBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateOrganizationAdaptivePolicyAclBodyTypeIPVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["any","ipv4","ipv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationAdaptivePolicyAclBodyTypeIPVersionPropEnum = append(updateOrganizationAdaptivePolicyAclBodyTypeIPVersionPropEnum, v)
	}
}

const (

	// UpdateOrganizationAdaptivePolicyACLBodyIPVersionAny captures enum value "any"
	UpdateOrganizationAdaptivePolicyACLBodyIPVersionAny string = "any"

	// UpdateOrganizationAdaptivePolicyACLBodyIPVersionIPV4 captures enum value "ipv4"
	UpdateOrganizationAdaptivePolicyACLBodyIPVersionIPV4 string = "ipv4"

	// UpdateOrganizationAdaptivePolicyACLBodyIPVersionIPV6 captures enum value "ipv6"
	UpdateOrganizationAdaptivePolicyACLBodyIPVersionIPV6 string = "ipv6"
)

// prop value enum
func (o *UpdateOrganizationAdaptivePolicyACLBody) validateIPVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationAdaptivePolicyAclBodyTypeIPVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationAdaptivePolicyACLBody) validateIPVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.IPVersion) { // not required
		return nil
	}

	// value enum
	if err := o.validateIPVersionEnum("updateOrganizationAdaptivePolicyAcl"+"."+"ipVersion", "body", o.IPVersion); err != nil {
		return err
	}

	return nil
}

func (o *UpdateOrganizationAdaptivePolicyACLBody) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(o.Rules) { // not required
		return nil
	}

	for i := 0; i < len(o.Rules); i++ {
		if swag.IsZero(o.Rules[i]) { // not required
			continue
		}

		if o.Rules[i] != nil {
			if err := o.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationAdaptivePolicyAcl" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationAdaptivePolicyAcl" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update organization adaptive policy ACL body based on the context it is used
func (o *UpdateOrganizationAdaptivePolicyACLBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrganizationAdaptivePolicyACLBody) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Rules); i++ {

		if o.Rules[i] != nil {
			if err := o.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateOrganizationAdaptivePolicyAcl" + "." + "rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("updateOrganizationAdaptivePolicyAcl" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationAdaptivePolicyACLBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationAdaptivePolicyACLBody) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationAdaptivePolicyACLBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0 update organization adaptive policy ACL params body rules items0
swagger:model UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0
*/
type UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0 struct {

	// Destination port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'.
	DstPort string `json:"dstPort,omitempty"`

	// 'allow' or 'deny' traffic specified by this rule.
	// Required: true
	// Enum: [allow deny]
	Policy *string `json:"policy"`

	// The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any').
	// Required: true
	// Enum: [tcp udp icmp any]
	Protocol *string `json:"protocol"`

	// Source port. Must be in the format of single port: '1', port list: '1,2' or port range: '1-10', and in the range of 1-65535, or 'any'. Default is 'any'.
	SrcPort string `json:"srcPort,omitempty"`
}

// Validate validates this update organization adaptive policy ACL params body rules items0
func (o *UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateOrganizationAdaptivePolicyAclParamsBodyRulesItems0TypePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationAdaptivePolicyAclParamsBodyRulesItems0TypePolicyPropEnum = append(updateOrganizationAdaptivePolicyAclParamsBodyRulesItems0TypePolicyPropEnum, v)
	}
}

const (

	// UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0PolicyAllow captures enum value "allow"
	UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0PolicyAllow string = "allow"

	// UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0PolicyDeny captures enum value "deny"
	UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0PolicyDeny string = "deny"
)

// prop value enum
func (o *UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0) validatePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationAdaptivePolicyAclParamsBodyRulesItems0TypePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", o.Policy); err != nil {
		return err
	}

	// value enum
	if err := o.validatePolicyEnum("policy", "body", *o.Policy); err != nil {
		return err
	}

	return nil
}

var updateOrganizationAdaptivePolicyAclParamsBodyRulesItems0TypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tcp","udp","icmp","any"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateOrganizationAdaptivePolicyAclParamsBodyRulesItems0TypeProtocolPropEnum = append(updateOrganizationAdaptivePolicyAclParamsBodyRulesItems0TypeProtocolPropEnum, v)
	}
}

const (

	// UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0ProtocolTCP captures enum value "tcp"
	UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0ProtocolTCP string = "tcp"

	// UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0ProtocolUDP captures enum value "udp"
	UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0ProtocolUDP string = "udp"

	// UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0ProtocolIcmp captures enum value "icmp"
	UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0ProtocolIcmp string = "icmp"

	// UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0ProtocolAny captures enum value "any"
	UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0ProtocolAny string = "any"
)

// prop value enum
func (o *UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateOrganizationAdaptivePolicyAclParamsBodyRulesItems0TypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", o.Protocol); err != nil {
		return err
	}

	// value enum
	if err := o.validateProtocolEnum("protocol", "body", *o.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update organization adaptive policy ACL params body rules items0 based on context it is used
func (o *UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0) UnmarshalBinary(b []byte) error {
	var res UpdateOrganizationAdaptivePolicyACLParamsBodyRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
