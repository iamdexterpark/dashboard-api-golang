// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOrganizationSamlRoleReader is a Reader for the CreateOrganizationSamlRole structure.
type CreateOrganizationSamlRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrganizationSamlRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateOrganizationSamlRoleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateOrganizationSamlRoleCreated creates a CreateOrganizationSamlRoleCreated with default headers values
func NewCreateOrganizationSamlRoleCreated() *CreateOrganizationSamlRoleCreated {
	return &CreateOrganizationSamlRoleCreated{}
}

/* CreateOrganizationSamlRoleCreated describes a response with status code 201, with default header values.

Successful operation
*/
type CreateOrganizationSamlRoleCreated struct {
	Payload interface{}
}

func (o *CreateOrganizationSamlRoleCreated) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/samlRoles][%d] createOrganizationSamlRoleCreated  %+v", 201, o.Payload)
}
func (o *CreateOrganizationSamlRoleCreated) GetPayload() interface{} {
	return o.Payload
}

func (o *CreateOrganizationSamlRoleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateOrganizationSamlRoleBody create organization saml role body
// Example: {"networks":[{"access":"full","id":"N_1234"}],"orgAccess":"none","role":"myrole","tags":[{"access":"read-only","tag":"west"}]}
swagger:model CreateOrganizationSamlRoleBody
*/
type CreateOrganizationSamlRoleBody struct {

	// The list of networks that the SAML administrator has privileges on
	Networks []*CreateOrganizationSamlRoleParamsBodyNetworksItems0 `json:"networks"`

	// The privilege of the SAML administrator on the organization. Can be one of 'none', 'read-only' or 'full'
	// Required: true
	// Enum: [none read-only full]
	OrgAccess *string `json:"orgAccess"`

	// The role of the SAML administrator
	// Required: true
	Role *string `json:"role"`

	// The list of tags that the SAML administrator has privleges on
	Tags []*CreateOrganizationSamlRoleParamsBodyTagsItems0 `json:"tags"`
}

// Validate validates this create organization saml role body
func (o *CreateOrganizationSamlRoleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrgAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationSamlRoleBody) validateNetworks(formats strfmt.Registry) error {
	if swag.IsZero(o.Networks) { // not required
		return nil
	}

	for i := 0; i < len(o.Networks); i++ {
		if swag.IsZero(o.Networks[i]) { // not required
			continue
		}

		if o.Networks[i] != nil {
			if err := o.Networks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganizationSamlRole" + "." + "networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganizationSamlRole" + "." + "networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createOrganizationSamlRoleBodyTypeOrgAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","read-only","full"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createOrganizationSamlRoleBodyTypeOrgAccessPropEnum = append(createOrganizationSamlRoleBodyTypeOrgAccessPropEnum, v)
	}
}

const (

	// CreateOrganizationSamlRoleBodyOrgAccessNone captures enum value "none"
	CreateOrganizationSamlRoleBodyOrgAccessNone string = "none"

	// CreateOrganizationSamlRoleBodyOrgAccessReadDashOnly captures enum value "read-only"
	CreateOrganizationSamlRoleBodyOrgAccessReadDashOnly string = "read-only"

	// CreateOrganizationSamlRoleBodyOrgAccessFull captures enum value "full"
	CreateOrganizationSamlRoleBodyOrgAccessFull string = "full"
)

// prop value enum
func (o *CreateOrganizationSamlRoleBody) validateOrgAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createOrganizationSamlRoleBodyTypeOrgAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateOrganizationSamlRoleBody) validateOrgAccess(formats strfmt.Registry) error {

	if err := validate.Required("createOrganizationSamlRole"+"."+"orgAccess", "body", o.OrgAccess); err != nil {
		return err
	}

	// value enum
	if err := o.validateOrgAccessEnum("createOrganizationSamlRole"+"."+"orgAccess", "body", *o.OrgAccess); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrganizationSamlRoleBody) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("createOrganizationSamlRole"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrganizationSamlRoleBody) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(o.Tags) { // not required
		return nil
	}

	for i := 0; i < len(o.Tags); i++ {
		if swag.IsZero(o.Tags[i]) { // not required
			continue
		}

		if o.Tags[i] != nil {
			if err := o.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganizationSamlRole" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganizationSamlRole" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create organization saml role body based on the context it is used
func (o *CreateOrganizationSamlRoleBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrganizationSamlRoleBody) contextValidateNetworks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Networks); i++ {

		if o.Networks[i] != nil {
			if err := o.Networks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganizationSamlRole" + "." + "networks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganizationSamlRole" + "." + "networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateOrganizationSamlRoleBody) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Tags); i++ {

		if o.Tags[i] != nil {
			if err := o.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOrganizationSamlRole" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("createOrganizationSamlRole" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationSamlRoleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationSamlRoleBody) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationSamlRoleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrganizationSamlRoleParamsBodyNetworksItems0 create organization saml role params body networks items0
swagger:model CreateOrganizationSamlRoleParamsBodyNetworksItems0
*/
type CreateOrganizationSamlRoleParamsBodyNetworksItems0 struct {

	// The privilege of the SAML administrator on the network. Can be one of 'full', 'read-only', 'guest-ambassador' or 'monitor-only'
	// Required: true
	// Enum: [full read-only guest-ambassador monitor-only]
	Access *string `json:"access"`

	// The network ID
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this create organization saml role params body networks items0
func (o *CreateOrganizationSamlRoleParamsBodyNetworksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createOrganizationSamlRoleParamsBodyNetworksItems0TypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["full","read-only","guest-ambassador","monitor-only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createOrganizationSamlRoleParamsBodyNetworksItems0TypeAccessPropEnum = append(createOrganizationSamlRoleParamsBodyNetworksItems0TypeAccessPropEnum, v)
	}
}

const (

	// CreateOrganizationSamlRoleParamsBodyNetworksItems0AccessFull captures enum value "full"
	CreateOrganizationSamlRoleParamsBodyNetworksItems0AccessFull string = "full"

	// CreateOrganizationSamlRoleParamsBodyNetworksItems0AccessReadDashOnly captures enum value "read-only"
	CreateOrganizationSamlRoleParamsBodyNetworksItems0AccessReadDashOnly string = "read-only"

	// CreateOrganizationSamlRoleParamsBodyNetworksItems0AccessGuestDashAmbassador captures enum value "guest-ambassador"
	CreateOrganizationSamlRoleParamsBodyNetworksItems0AccessGuestDashAmbassador string = "guest-ambassador"

	// CreateOrganizationSamlRoleParamsBodyNetworksItems0AccessMonitorDashOnly captures enum value "monitor-only"
	CreateOrganizationSamlRoleParamsBodyNetworksItems0AccessMonitorDashOnly string = "monitor-only"
)

// prop value enum
func (o *CreateOrganizationSamlRoleParamsBodyNetworksItems0) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createOrganizationSamlRoleParamsBodyNetworksItems0TypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateOrganizationSamlRoleParamsBodyNetworksItems0) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", o.Access); err != nil {
		return err
	}

	// value enum
	if err := o.validateAccessEnum("access", "body", *o.Access); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrganizationSamlRoleParamsBodyNetworksItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create organization saml role params body networks items0 based on context it is used
func (o *CreateOrganizationSamlRoleParamsBodyNetworksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationSamlRoleParamsBodyNetworksItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationSamlRoleParamsBodyNetworksItems0) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationSamlRoleParamsBodyNetworksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrganizationSamlRoleParamsBodyTagsItems0 create organization saml role params body tags items0
swagger:model CreateOrganizationSamlRoleParamsBodyTagsItems0
*/
type CreateOrganizationSamlRoleParamsBodyTagsItems0 struct {

	// The privilege of the SAML administrator on the tag. Can be one of 'full', 'read-only', 'guest-ambassador' or 'monitor-only'
	// Required: true
	// Enum: [full read-only guest-ambassador monitor-only]
	Access *string `json:"access"`

	// The name of the tag
	// Required: true
	Tag *string `json:"tag"`
}

// Validate validates this create organization saml role params body tags items0
func (o *CreateOrganizationSamlRoleParamsBodyTagsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createOrganizationSamlRoleParamsBodyTagsItems0TypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["full","read-only","guest-ambassador","monitor-only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createOrganizationSamlRoleParamsBodyTagsItems0TypeAccessPropEnum = append(createOrganizationSamlRoleParamsBodyTagsItems0TypeAccessPropEnum, v)
	}
}

const (

	// CreateOrganizationSamlRoleParamsBodyTagsItems0AccessFull captures enum value "full"
	CreateOrganizationSamlRoleParamsBodyTagsItems0AccessFull string = "full"

	// CreateOrganizationSamlRoleParamsBodyTagsItems0AccessReadDashOnly captures enum value "read-only"
	CreateOrganizationSamlRoleParamsBodyTagsItems0AccessReadDashOnly string = "read-only"

	// CreateOrganizationSamlRoleParamsBodyTagsItems0AccessGuestDashAmbassador captures enum value "guest-ambassador"
	CreateOrganizationSamlRoleParamsBodyTagsItems0AccessGuestDashAmbassador string = "guest-ambassador"

	// CreateOrganizationSamlRoleParamsBodyTagsItems0AccessMonitorDashOnly captures enum value "monitor-only"
	CreateOrganizationSamlRoleParamsBodyTagsItems0AccessMonitorDashOnly string = "monitor-only"
)

// prop value enum
func (o *CreateOrganizationSamlRoleParamsBodyTagsItems0) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createOrganizationSamlRoleParamsBodyTagsItems0TypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *CreateOrganizationSamlRoleParamsBodyTagsItems0) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", o.Access); err != nil {
		return err
	}

	// value enum
	if err := o.validateAccessEnum("access", "body", *o.Access); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrganizationSamlRoleParamsBodyTagsItems0) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", o.Tag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create organization saml role params body tags items0 based on context it is used
func (o *CreateOrganizationSamlRoleParamsBodyTagsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrganizationSamlRoleParamsBodyTagsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrganizationSamlRoleParamsBodyTagsItems0) UnmarshalBinary(b []byte) error {
	var res CreateOrganizationSamlRoleParamsBodyTagsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
