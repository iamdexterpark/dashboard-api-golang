// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new organizations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organizations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssignOrganizationLicensesSeats(params *AssignOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssignOrganizationLicensesSeatsOK, error)

	ClaimIntoOrganization(params *ClaimIntoOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClaimIntoOrganizationOK, error)

	ClaimIntoOrganizationInventory(params *ClaimIntoOrganizationInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClaimIntoOrganizationInventoryOK, error)

	CloneOrganization(params *CloneOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneOrganizationCreated, error)

	CombineOrganizationNetworks(params *CombineOrganizationNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CombineOrganizationNetworksOK, error)

	CreateOrganization(params *CreateOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationCreated, error)

	CreateOrganizationActionBatch(params *CreateOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationActionBatchCreated, error)

	CreateOrganizationAdaptivePolicyACL(params *CreateOrganizationAdaptivePolicyACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationAdaptivePolicyACLOK, error)

	CreateOrganizationAdaptivePolicyGroup(params *CreateOrganizationAdaptivePolicyGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationAdaptivePolicyGroupCreated, error)

	CreateOrganizationAdaptivePolicyPolicy(params *CreateOrganizationAdaptivePolicyPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationAdaptivePolicyPolicyCreated, error)

	CreateOrganizationAdmin(params *CreateOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationAdminCreated, error)

	CreateOrganizationAlertsProfile(params *CreateOrganizationAlertsProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationAlertsProfileCreated, error)

	CreateOrganizationBrandingPolicy(params *CreateOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationBrandingPolicyCreated, error)

	CreateOrganizationConfigTemplate(params *CreateOrganizationConfigTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationConfigTemplateCreated, error)

	CreateOrganizationNetwork(params *CreateOrganizationNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationNetworkCreated, error)

	CreateOrganizationSamlIdp(params *CreateOrganizationSamlIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationSamlIdpCreated, error)

	CreateOrganizationSamlRole(params *CreateOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationSamlRoleCreated, error)

	DeleteOrganization(params *DeleteOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationNoContent, error)

	DeleteOrganizationActionBatch(params *DeleteOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationActionBatchNoContent, error)

	DeleteOrganizationAdaptivePolicyACL(params *DeleteOrganizationAdaptivePolicyACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationAdaptivePolicyACLNoContent, error)

	DeleteOrganizationAdaptivePolicyGroup(params *DeleteOrganizationAdaptivePolicyGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationAdaptivePolicyGroupNoContent, error)

	DeleteOrganizationAdaptivePolicyPolicy(params *DeleteOrganizationAdaptivePolicyPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationAdaptivePolicyPolicyNoContent, error)

	DeleteOrganizationAdmin(params *DeleteOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationAdminNoContent, error)

	DeleteOrganizationAlertsProfile(params *DeleteOrganizationAlertsProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationAlertsProfileNoContent, error)

	DeleteOrganizationBrandingPolicy(params *DeleteOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationBrandingPolicyNoContent, error)

	DeleteOrganizationConfigTemplate(params *DeleteOrganizationConfigTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationConfigTemplateNoContent, error)

	DeleteOrganizationSamlIdp(params *DeleteOrganizationSamlIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationSamlIdpNoContent, error)

	DeleteOrganizationSamlRole(params *DeleteOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationSamlRoleNoContent, error)

	GetOrganization(params *GetOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationOK, error)

	GetOrganizationActionBatch(params *GetOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationActionBatchOK, error)

	GetOrganizationActionBatches(params *GetOrganizationActionBatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationActionBatchesOK, error)

	GetOrganizationAdaptivePolicyACL(params *GetOrganizationAdaptivePolicyACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyACLOK, error)

	GetOrganizationAdaptivePolicyAcls(params *GetOrganizationAdaptivePolicyAclsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyAclsOK, error)

	GetOrganizationAdaptivePolicyGroup(params *GetOrganizationAdaptivePolicyGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyGroupOK, error)

	GetOrganizationAdaptivePolicyGroups(params *GetOrganizationAdaptivePolicyGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyGroupsOK, error)

	GetOrganizationAdaptivePolicyOverview(params *GetOrganizationAdaptivePolicyOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyOverviewOK, error)

	GetOrganizationAdaptivePolicyPolicies(params *GetOrganizationAdaptivePolicyPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyPoliciesOK, error)

	GetOrganizationAdaptivePolicyPolicy(params *GetOrganizationAdaptivePolicyPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyPolicyOK, error)

	GetOrganizationAdaptivePolicySettings(params *GetOrganizationAdaptivePolicySettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicySettingsOK, error)

	GetOrganizationAdmins(params *GetOrganizationAdminsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdminsOK, error)

	GetOrganizationAlertsProfiles(params *GetOrganizationAlertsProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAlertsProfilesOK, error)

	GetOrganizationAPIRequests(params *GetOrganizationAPIRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAPIRequestsOK, error)

	GetOrganizationAPIRequestsOverview(params *GetOrganizationAPIRequestsOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAPIRequestsOverviewOK, error)

	GetOrganizationBrandingPolicies(params *GetOrganizationBrandingPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationBrandingPoliciesOK, error)

	GetOrganizationBrandingPoliciesPriorities(params *GetOrganizationBrandingPoliciesPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationBrandingPoliciesPrioritiesOK, error)

	GetOrganizationBrandingPolicy(params *GetOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationBrandingPolicyOK, error)

	GetOrganizationClientsBandwidthUsageHistory(params *GetOrganizationClientsBandwidthUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationClientsBandwidthUsageHistoryOK, error)

	GetOrganizationClientsOverview(params *GetOrganizationClientsOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationClientsOverviewOK, error)

	GetOrganizationClientsSearch(params *GetOrganizationClientsSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationClientsSearchOK, error)

	GetOrganizationConfigTemplate(params *GetOrganizationConfigTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationConfigTemplateOK, error)

	GetOrganizationConfigTemplates(params *GetOrganizationConfigTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationConfigTemplatesOK, error)

	GetOrganizationConfigurationChanges(params *GetOrganizationConfigurationChangesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationConfigurationChangesOK, error)

	GetOrganizationDevices(params *GetOrganizationDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationDevicesOK, error)

	GetOrganizationDevicesStatuses(params *GetOrganizationDevicesStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationDevicesStatusesOK, error)

	GetOrganizationDevicesStatusesOverview(params *GetOrganizationDevicesStatusesOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationDevicesStatusesOverviewOK, error)

	GetOrganizationDevicesUplinksLossAndLatency(params *GetOrganizationDevicesUplinksLossAndLatencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationDevicesUplinksLossAndLatencyOK, error)

	GetOrganizationInventoryDevice(params *GetOrganizationInventoryDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationInventoryDeviceOK, error)

	GetOrganizationInventoryDevices(params *GetOrganizationInventoryDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationInventoryDevicesOK, error)

	GetOrganizationLicense(params *GetOrganizationLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationLicenseOK, error)

	GetOrganizationLicenses(params *GetOrganizationLicensesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationLicensesOK, error)

	GetOrganizationLicensesOverview(params *GetOrganizationLicensesOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationLicensesOverviewOK, error)

	GetOrganizationLoginSecurity(params *GetOrganizationLoginSecurityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationLoginSecurityOK, error)

	GetOrganizationNetworks(params *GetOrganizationNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationNetworksOK, error)

	GetOrganizationOpenapiSpec(params *GetOrganizationOpenapiSpecParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationOpenapiSpecOK, error)

	GetOrganizationSaml(params *GetOrganizationSamlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSamlOK, error)

	GetOrganizationSamlIdp(params *GetOrganizationSamlIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSamlIdpOK, error)

	GetOrganizationSamlIdps(params *GetOrganizationSamlIdpsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSamlIdpsOK, error)

	GetOrganizationSamlRole(params *GetOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSamlRoleOK, error)

	GetOrganizationSamlRoles(params *GetOrganizationSamlRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSamlRolesOK, error)

	GetOrganizationSnmp(params *GetOrganizationSnmpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSnmpOK, error)

	GetOrganizationSummaryTopAppliancesByUtilization(params *GetOrganizationSummaryTopAppliancesByUtilizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopAppliancesByUtilizationOK, error)

	GetOrganizationSummaryTopClientsByUsage(params *GetOrganizationSummaryTopClientsByUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopClientsByUsageOK, error)

	GetOrganizationSummaryTopClientsManufacturersByUsage(params *GetOrganizationSummaryTopClientsManufacturersByUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopClientsManufacturersByUsageOK, error)

	GetOrganizationSummaryTopDevicesByUsage(params *GetOrganizationSummaryTopDevicesByUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopDevicesByUsageOK, error)

	GetOrganizationSummaryTopDevicesModelsByUsage(params *GetOrganizationSummaryTopDevicesModelsByUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopDevicesModelsByUsageOK, error)

	GetOrganizationSummaryTopSsidsByUsage(params *GetOrganizationSummaryTopSsidsByUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopSsidsByUsageOK, error)

	GetOrganizationSummaryTopSwitchesByEnergyUsage(params *GetOrganizationSummaryTopSwitchesByEnergyUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopSwitchesByEnergyUsageOK, error)

	GetOrganizationUplinksStatuses(params *GetOrganizationUplinksStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationUplinksStatusesOK, error)

	GetOrganizationWebhooksAlertTypes(params *GetOrganizationWebhooksAlertTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationWebhooksAlertTypesOK, error)

	GetOrganizationWebhooksLogs(params *GetOrganizationWebhooksLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationWebhooksLogsOK, error)

	GetOrganizations(params *GetOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOK, error)

	MoveOrganizationLicenses(params *MoveOrganizationLicensesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveOrganizationLicensesOK, error)

	MoveOrganizationLicensesSeats(params *MoveOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveOrganizationLicensesSeatsOK, error)

	ReleaseFromOrganizationInventory(params *ReleaseFromOrganizationInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReleaseFromOrganizationInventoryOK, error)

	RenewOrganizationLicensesSeats(params *RenewOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenewOrganizationLicensesSeatsOK, error)

	UpdateOrganization(params *UpdateOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationOK, error)

	UpdateOrganizationActionBatch(params *UpdateOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationActionBatchOK, error)

	UpdateOrganizationAdaptivePolicyACL(params *UpdateOrganizationAdaptivePolicyACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAdaptivePolicyACLOK, error)

	UpdateOrganizationAdaptivePolicyGroup(params *UpdateOrganizationAdaptivePolicyGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAdaptivePolicyGroupOK, error)

	UpdateOrganizationAdaptivePolicyPolicy(params *UpdateOrganizationAdaptivePolicyPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAdaptivePolicyPolicyOK, error)

	UpdateOrganizationAdaptivePolicySettings(params *UpdateOrganizationAdaptivePolicySettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAdaptivePolicySettingsOK, error)

	UpdateOrganizationAdmin(params *UpdateOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAdminOK, error)

	UpdateOrganizationAlertsProfile(params *UpdateOrganizationAlertsProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAlertsProfileOK, error)

	UpdateOrganizationBrandingPoliciesPriorities(params *UpdateOrganizationBrandingPoliciesPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationBrandingPoliciesPrioritiesOK, error)

	UpdateOrganizationBrandingPolicy(params *UpdateOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationBrandingPolicyOK, error)

	UpdateOrganizationConfigTemplate(params *UpdateOrganizationConfigTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationConfigTemplateOK, error)

	UpdateOrganizationLicense(params *UpdateOrganizationLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationLicenseOK, error)

	UpdateOrganizationLoginSecurity(params *UpdateOrganizationLoginSecurityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationLoginSecurityOK, error)

	UpdateOrganizationSaml(params *UpdateOrganizationSamlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationSamlOK, error)

	UpdateOrganizationSamlIdp(params *UpdateOrganizationSamlIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationSamlIdpOK, error)

	UpdateOrganizationSamlRole(params *UpdateOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationSamlRoleOK, error)

	UpdateOrganizationSnmp(params *UpdateOrganizationSnmpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationSnmpOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AssignOrganizationLicensesSeats assigns s m seats to a network

  Assign SM seats to a network. This will increase the managed SM device limit of the network
*/
func (a *Client) AssignOrganizationLicensesSeats(params *AssignOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssignOrganizationLicensesSeatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignOrganizationLicensesSeatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "assignOrganizationLicensesSeats",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/licenses/assignSeats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssignOrganizationLicensesSeatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignOrganizationLicensesSeatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for assignOrganizationLicensesSeats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ClaimIntoOrganization claims a list of devices licenses and or orders into an organization

  Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory.
*/
func (a *Client) ClaimIntoOrganization(params *ClaimIntoOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClaimIntoOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClaimIntoOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "claimIntoOrganization",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/claim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClaimIntoOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClaimIntoOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for claimIntoOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ClaimIntoOrganizationInventory claims a list of devices licenses and or orders into an organization

  Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory. Use /organizations/{organizationId}/inventory/release to release devices from an organization.
*/
func (a *Client) ClaimIntoOrganizationInventory(params *ClaimIntoOrganizationInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ClaimIntoOrganizationInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClaimIntoOrganizationInventoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "claimIntoOrganizationInventory",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/inventory/claim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ClaimIntoOrganizationInventoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClaimIntoOrganizationInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for claimIntoOrganizationInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloneOrganization creates a new organization by cloning the addressed organization

  Create a new organization by cloning the addressed organization
*/
func (a *Client) CloneOrganization(params *CloneOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneOrganizationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloneOrganization",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneOrganizationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CombineOrganizationNetworks combines multiple networks into a single network

  Combine multiple networks into a single network
*/
func (a *Client) CombineOrganizationNetworks(params *CombineOrganizationNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CombineOrganizationNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCombineOrganizationNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "combineOrganizationNetworks",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/networks/combine",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CombineOrganizationNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CombineOrganizationNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for combineOrganizationNetworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganization creates a new organization

  Create a new organization
*/
func (a *Client) CreateOrganization(params *CreateOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganization",
		Method:             "POST",
		PathPattern:        "/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationActionBatch creates an action batch

  Create an action batch
*/
func (a *Client) CreateOrganizationActionBatch(params *CreateOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationActionBatchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationActionBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationActionBatch",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/actionBatches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationActionBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationActionBatchCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationActionBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationAdaptivePolicyACL creates new adaptive policy ACL

  Creates new adaptive policy ACL
*/
func (a *Client) CreateOrganizationAdaptivePolicyACL(params *CreateOrganizationAdaptivePolicyACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationAdaptivePolicyACLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationAdaptivePolicyACLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationAdaptivePolicyAcl",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/acls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationAdaptivePolicyACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationAdaptivePolicyACLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationAdaptivePolicyAcl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationAdaptivePolicyGroup creates a new adaptive policy group

  Creates a new adaptive policy group
*/
func (a *Client) CreateOrganizationAdaptivePolicyGroup(params *CreateOrganizationAdaptivePolicyGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationAdaptivePolicyGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationAdaptivePolicyGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationAdaptivePolicyGroup",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationAdaptivePolicyGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationAdaptivePolicyGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationAdaptivePolicyGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationAdaptivePolicyPolicy adds an adaptive policy

  Add an Adaptive Policy
*/
func (a *Client) CreateOrganizationAdaptivePolicyPolicy(params *CreateOrganizationAdaptivePolicyPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationAdaptivePolicyPolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationAdaptivePolicyPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationAdaptivePolicyPolicy",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationAdaptivePolicyPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationAdaptivePolicyPolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationAdaptivePolicyPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationAdmin creates a new dashboard administrator

  Create a new dashboard administrator
*/
func (a *Client) CreateOrganizationAdmin(params *CreateOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationAdminCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationAdminParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationAdmin",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/admins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationAdminCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationAlertsProfile creates an organization wide alert configuration

  Create an organization-wide alert configuration
*/
func (a *Client) CreateOrganizationAlertsProfile(params *CreateOrganizationAlertsProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationAlertsProfileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationAlertsProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationAlertsProfile",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/alerts/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationAlertsProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationAlertsProfileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationAlertsProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationBrandingPolicy adds a new branding policy to an organization

  Add a new branding policy to an organization
*/
func (a *Client) CreateOrganizationBrandingPolicy(params *CreateOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationBrandingPolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationBrandingPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationBrandingPolicy",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationBrandingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationBrandingPolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationBrandingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationConfigTemplate creates a new configuration template

  Create a new configuration template
*/
func (a *Client) CreateOrganizationConfigTemplate(params *CreateOrganizationConfigTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationConfigTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationConfigTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationConfigTemplate",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/configTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationConfigTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationConfigTemplateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationConfigTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationNetwork creates a network

  Create a network
*/
func (a *Client) CreateOrganizationNetwork(params *CreateOrganizationNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationNetworkCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationNetwork",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationNetworkCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationSamlIdp creates a s a m l Id p for your organization

  Create a SAML IdP for your organization.
*/
func (a *Client) CreateOrganizationSamlIdp(params *CreateOrganizationSamlIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationSamlIdpCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationSamlIdpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationSamlIdp",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/saml/idps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationSamlIdpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationSamlIdpCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationSamlIdp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganizationSamlRole creates a s a m l role

  Create a SAML role
*/
func (a *Client) CreateOrganizationSamlRole(params *CreateOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationSamlRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationSamlRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationSamlRole",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/samlRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationSamlRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationSamlRoleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationSamlRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganization deletes an organization

  Delete an organization
*/
func (a *Client) DeleteOrganization(params *DeleteOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganization",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationActionBatch deletes an action batch

  Delete an action batch
*/
func (a *Client) DeleteOrganizationActionBatch(params *DeleteOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationActionBatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationActionBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationActionBatch",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/actionBatches/{actionBatchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationActionBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationActionBatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationActionBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationAdaptivePolicyACL deletes the specified adaptive policy ACL

  Deletes the specified adaptive policy ACL. Note this adaptive policy ACL will also be removed from policies using it.
*/
func (a *Client) DeleteOrganizationAdaptivePolicyACL(params *DeleteOrganizationAdaptivePolicyACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationAdaptivePolicyACLNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationAdaptivePolicyACLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationAdaptivePolicyAcl",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/acls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationAdaptivePolicyACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationAdaptivePolicyACLNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationAdaptivePolicyAcl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationAdaptivePolicyGroup deletes the specified adaptive policy group and any associated policies and references

  Deletes the specified adaptive policy group and any associated policies and references
*/
func (a *Client) DeleteOrganizationAdaptivePolicyGroup(params *DeleteOrganizationAdaptivePolicyGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationAdaptivePolicyGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationAdaptivePolicyGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationAdaptivePolicyGroup",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationAdaptivePolicyGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationAdaptivePolicyGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationAdaptivePolicyGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationAdaptivePolicyPolicy deletes an adaptive policy

  Delete an Adaptive Policy
*/
func (a *Client) DeleteOrganizationAdaptivePolicyPolicy(params *DeleteOrganizationAdaptivePolicyPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationAdaptivePolicyPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationAdaptivePolicyPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationAdaptivePolicyPolicy",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/policies/{adaptivePolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationAdaptivePolicyPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationAdaptivePolicyPolicyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationAdaptivePolicyPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationAdmin revokes all access for a dashboard administrator within this organization

  Revoke all access for a dashboard administrator within this organization
*/
func (a *Client) DeleteOrganizationAdmin(params *DeleteOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationAdminNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationAdminParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationAdmin",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/admins/{adminId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationAdminNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationAlertsProfile removes an organization wide alert config

  Removes an organization-wide alert config
*/
func (a *Client) DeleteOrganizationAlertsProfile(params *DeleteOrganizationAlertsProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationAlertsProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationAlertsProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationAlertsProfile",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/alerts/profiles/{alertConfigId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationAlertsProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationAlertsProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationAlertsProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationBrandingPolicy deletes a branding policy

  Delete a branding policy
*/
func (a *Client) DeleteOrganizationBrandingPolicy(params *DeleteOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationBrandingPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationBrandingPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationBrandingPolicy",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationBrandingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationBrandingPolicyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationBrandingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationConfigTemplate removes a configuration template

  Remove a configuration template
*/
func (a *Client) DeleteOrganizationConfigTemplate(params *DeleteOrganizationConfigTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationConfigTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationConfigTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationConfigTemplate",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/configTemplates/{configTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationConfigTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationConfigTemplateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationConfigTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationSamlIdp removes a s a m l Id p in your organization

  Remove a SAML IdP in your organization.
*/
func (a *Client) DeleteOrganizationSamlIdp(params *DeleteOrganizationSamlIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationSamlIdpNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationSamlIdpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationSamlIdp",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/saml/idps/{idpId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationSamlIdpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationSamlIdpNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationSamlIdp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganizationSamlRole removes a s a m l role

  Remove a SAML role
*/
func (a *Client) DeleteOrganizationSamlRole(params *DeleteOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOrganizationSamlRoleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationSamlRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrganizationSamlRole",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organizationId}/samlRoles/{samlRoleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationSamlRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationSamlRoleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrganizationSamlRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganization returns an organization

  Return an organization
*/
func (a *Client) GetOrganization(params *GetOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganization",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationActionBatch returns an action batch

  Return an action batch
*/
func (a *Client) GetOrganizationActionBatch(params *GetOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationActionBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationActionBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationActionBatch",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/actionBatches/{actionBatchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationActionBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationActionBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationActionBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationActionBatches returns the list of action batches in the organization

  Return the list of action batches in the organization
*/
func (a *Client) GetOrganizationActionBatches(params *GetOrganizationActionBatchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationActionBatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationActionBatchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationActionBatches",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/actionBatches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationActionBatchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationActionBatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationActionBatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAdaptivePolicyACL returns the adaptive policy ACL information

  Returns the adaptive policy ACL information
*/
func (a *Client) GetOrganizationAdaptivePolicyACL(params *GetOrganizationAdaptivePolicyACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyACLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAdaptivePolicyACLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationAdaptivePolicyAcl",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/acls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAdaptivePolicyACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAdaptivePolicyACLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAdaptivePolicyAcl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAdaptivePolicyAcls lists adaptive policy a c ls in a organization

  List adaptive policy ACLs in a organization
*/
func (a *Client) GetOrganizationAdaptivePolicyAcls(params *GetOrganizationAdaptivePolicyAclsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyAclsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAdaptivePolicyAclsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationAdaptivePolicyAcls",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/acls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAdaptivePolicyAclsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAdaptivePolicyAclsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAdaptivePolicyAcls: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAdaptivePolicyGroup returns an adaptive policy group

  Returns an adaptive policy group
*/
func (a *Client) GetOrganizationAdaptivePolicyGroup(params *GetOrganizationAdaptivePolicyGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAdaptivePolicyGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationAdaptivePolicyGroup",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAdaptivePolicyGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAdaptivePolicyGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAdaptivePolicyGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAdaptivePolicyGroups lists adaptive policy groups in a organization

  List adaptive policy groups in a organization
*/
func (a *Client) GetOrganizationAdaptivePolicyGroups(params *GetOrganizationAdaptivePolicyGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAdaptivePolicyGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationAdaptivePolicyGroups",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAdaptivePolicyGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAdaptivePolicyGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAdaptivePolicyGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAdaptivePolicyOverview returns adaptive policy aggregate statistics for an organization

  Returns adaptive policy aggregate statistics for an organization
*/
func (a *Client) GetOrganizationAdaptivePolicyOverview(params *GetOrganizationAdaptivePolicyOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAdaptivePolicyOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationAdaptivePolicyOverview",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAdaptivePolicyOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAdaptivePolicyOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAdaptivePolicyOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAdaptivePolicyPolicies lists adaptive policies in an organization

  List adaptive policies in an organization
*/
func (a *Client) GetOrganizationAdaptivePolicyPolicies(params *GetOrganizationAdaptivePolicyPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAdaptivePolicyPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationAdaptivePolicyPolicies",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAdaptivePolicyPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAdaptivePolicyPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAdaptivePolicyPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAdaptivePolicyPolicy returns an adaptive policy

  Return an adaptive policy
*/
func (a *Client) GetOrganizationAdaptivePolicyPolicy(params *GetOrganizationAdaptivePolicyPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicyPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAdaptivePolicyPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationAdaptivePolicyPolicy",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/policies/{adaptivePolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAdaptivePolicyPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAdaptivePolicyPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAdaptivePolicyPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAdaptivePolicySettings returns global adaptive policy settings in an organization

  Returns global adaptive policy settings in an organization
*/
func (a *Client) GetOrganizationAdaptivePolicySettings(params *GetOrganizationAdaptivePolicySettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdaptivePolicySettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAdaptivePolicySettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationAdaptivePolicySettings",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAdaptivePolicySettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAdaptivePolicySettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAdaptivePolicySettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAdmins lists the dashboard administrators in this organization

  List the dashboard administrators in this organization
*/
func (a *Client) GetOrganizationAdmins(params *GetOrganizationAdminsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAdminsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAdminsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationAdmins",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/admins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAdminsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAdminsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAdmins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAlertsProfiles lists all organization wide alert configurations

  List all organization-wide alert configurations
*/
func (a *Client) GetOrganizationAlertsProfiles(params *GetOrganizationAlertsProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAlertsProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAlertsProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationAlertsProfiles",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/alerts/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAlertsProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAlertsProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationAlertsProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAPIRequests lists the API requests made by an organization

  List the API requests made by an organization
*/
func (a *Client) GetOrganizationAPIRequests(params *GetOrganizationAPIRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAPIRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAPIRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationApiRequests",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/apiRequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAPIRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAPIRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationApiRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationAPIRequestsOverview returns an aggregated overview of API requests data

  Return an aggregated overview of API requests data
*/
func (a *Client) GetOrganizationAPIRequestsOverview(params *GetOrganizationAPIRequestsOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationAPIRequestsOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationAPIRequestsOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationApiRequestsOverview",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/apiRequests/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationAPIRequestsOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationAPIRequestsOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationApiRequestsOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationBrandingPolicies lists the branding policies of an organization

  List the branding policies of an organization
*/
func (a *Client) GetOrganizationBrandingPolicies(params *GetOrganizationBrandingPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationBrandingPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationBrandingPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationBrandingPolicies",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationBrandingPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationBrandingPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationBrandingPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationBrandingPoliciesPriorities returns the branding policy i ds of an organization in priority order

  Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
*/
func (a *Client) GetOrganizationBrandingPoliciesPriorities(params *GetOrganizationBrandingPoliciesPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationBrandingPoliciesPrioritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationBrandingPoliciesPrioritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationBrandingPoliciesPriorities",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationBrandingPoliciesPrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationBrandingPoliciesPrioritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationBrandingPoliciesPriorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationBrandingPolicy returns a branding policy

  Return a branding policy
*/
func (a *Client) GetOrganizationBrandingPolicy(params *GetOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationBrandingPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationBrandingPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationBrandingPolicy",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationBrandingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationBrandingPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationBrandingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationClientsBandwidthUsageHistory returns data usage in megabits per second over time for all clients in the given organization within a given time range

  Return data usage (in megabits per second) over time for all clients in the given organization within a given time range.
*/
func (a *Client) GetOrganizationClientsBandwidthUsageHistory(params *GetOrganizationClientsBandwidthUsageHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationClientsBandwidthUsageHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationClientsBandwidthUsageHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationClientsBandwidthUsageHistory",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/clients/bandwidthUsageHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationClientsBandwidthUsageHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationClientsBandwidthUsageHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationClientsBandwidthUsageHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationClientsOverview returns summary information around client data usage in mb across the given organization

  Return summary information around client data usage (in mb) across the given organization.
*/
func (a *Client) GetOrganizationClientsOverview(params *GetOrganizationClientsOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationClientsOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationClientsOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationClientsOverview",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/clients/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationClientsOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationClientsOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationClientsOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationClientsSearch returns the client details in an organization

  Return the client details in an organization
*/
func (a *Client) GetOrganizationClientsSearch(params *GetOrganizationClientsSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationClientsSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationClientsSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationClientsSearch",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/clients/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationClientsSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationClientsSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationClientsSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationConfigTemplate returns a single configuration template

  Return a single configuration template
*/
func (a *Client) GetOrganizationConfigTemplate(params *GetOrganizationConfigTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationConfigTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationConfigTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationConfigTemplate",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/configTemplates/{configTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationConfigTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationConfigTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationConfigTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationConfigTemplates lists the configuration templates for this organization

  List the configuration templates for this organization
*/
func (a *Client) GetOrganizationConfigTemplates(params *GetOrganizationConfigTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationConfigTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationConfigTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationConfigTemplates",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/configTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationConfigTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationConfigTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationConfigTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationConfigurationChanges views the change log for your organization

  View the Change Log for your organization
*/
func (a *Client) GetOrganizationConfigurationChanges(params *GetOrganizationConfigurationChangesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationConfigurationChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationConfigurationChangesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationConfigurationChanges",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/configurationChanges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationConfigurationChangesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationConfigurationChangesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationConfigurationChanges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationDevices lists the devices in an organization

  List the devices in an organization
*/
func (a *Client) GetOrganizationDevices(params *GetOrganizationDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationDevices",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationDevicesStatuses lists the status of every meraki device in the organization

  List the status of every Meraki device in the organization
*/
func (a *Client) GetOrganizationDevicesStatuses(params *GetOrganizationDevicesStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationDevicesStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationDevicesStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationDevicesStatuses",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/devices/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationDevicesStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationDevicesStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationDevicesStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationDevicesStatusesOverview returns an overview of current device statuses

  Return an overview of current device statuses
*/
func (a *Client) GetOrganizationDevicesStatusesOverview(params *GetOrganizationDevicesStatusesOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationDevicesStatusesOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationDevicesStatusesOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationDevicesStatusesOverview",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/devices/statuses/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationDevicesStatusesOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationDevicesStatusesOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationDevicesStatusesOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationDevicesUplinksLossAndLatency returns the uplink loss and latency for every m x in the organization from at latest 2 minutes ago

  Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
*/
func (a *Client) GetOrganizationDevicesUplinksLossAndLatency(params *GetOrganizationDevicesUplinksLossAndLatencyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationDevicesUplinksLossAndLatencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationDevicesUplinksLossAndLatencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationDevicesUplinksLossAndLatency",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/devices/uplinksLossAndLatency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationDevicesUplinksLossAndLatencyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationDevicesUplinksLossAndLatencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationDevicesUplinksLossAndLatency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationInventoryDevice returns a single device from the inventory of an organization

  Return a single device from the inventory of an organization
*/
func (a *Client) GetOrganizationInventoryDevice(params *GetOrganizationInventoryDeviceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationInventoryDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationInventoryDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationInventoryDevice",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/inventory/devices/{serial}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationInventoryDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationInventoryDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationInventoryDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationInventoryDevices returns the device inventory for an organization

  Return the device inventory for an organization
*/
func (a *Client) GetOrganizationInventoryDevices(params *GetOrganizationInventoryDevicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationInventoryDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationInventoryDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationInventoryDevices",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/inventory/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationInventoryDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationInventoryDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationInventoryDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationLicense displays a license

  Display a license
*/
func (a *Client) GetOrganizationLicense(params *GetOrganizationLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationLicense",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/licenses/{licenseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationLicenses lists the licenses for an organization

  List the licenses for an organization
*/
func (a *Client) GetOrganizationLicenses(params *GetOrganizationLicensesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationLicensesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationLicensesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationLicenses",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/licenses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationLicensesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationLicensesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationLicenses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationLicensesOverview returns an overview of the license state for an organization

  Return an overview of the license state for an organization
*/
func (a *Client) GetOrganizationLicensesOverview(params *GetOrganizationLicensesOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationLicensesOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationLicensesOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationLicensesOverview",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/licenses/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationLicensesOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationLicensesOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationLicensesOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationLoginSecurity returns the login security settings for an organization

  Returns the login security settings for an organization.
*/
func (a *Client) GetOrganizationLoginSecurity(params *GetOrganizationLoginSecurityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationLoginSecurityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationLoginSecurityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationLoginSecurity",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/loginSecurity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationLoginSecurityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationLoginSecurityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationLoginSecurity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationNetworks lists the networks that the user has privileges on in an organization

  List the networks that the user has privileges on in an organization
*/
func (a *Client) GetOrganizationNetworks(params *GetOrganizationNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationNetworks",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationNetworks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationOpenapiSpec returns the open API 2 0 specification of the organization s API documentation in JSON

  Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON
*/
func (a *Client) GetOrganizationOpenapiSpec(params *GetOrganizationOpenapiSpecParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationOpenapiSpecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationOpenapiSpecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationOpenapiSpec",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/openapiSpec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationOpenapiSpecReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationOpenapiSpecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationOpenapiSpec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSaml returns the s a m l s s o enabled settings for an organization

  Returns the SAML SSO enabled settings for an organization.
*/
func (a *Client) GetOrganizationSaml(params *GetOrganizationSamlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSamlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSamlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSaml",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/saml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSamlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSamlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSaml: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSamlIdp gets a s a m l Id p from your organization

  Get a SAML IdP from your organization.
*/
func (a *Client) GetOrganizationSamlIdp(params *GetOrganizationSamlIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSamlIdpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSamlIdpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSamlIdp",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/saml/idps/{idpId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSamlIdpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSamlIdpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSamlIdp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSamlIdps lists the s a m l Id ps in your organization

  List the SAML IdPs in your organization.
*/
func (a *Client) GetOrganizationSamlIdps(params *GetOrganizationSamlIdpsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSamlIdpsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSamlIdpsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSamlIdps",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/saml/idps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSamlIdpsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSamlIdpsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSamlIdps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSamlRole returns a s a m l role

  Return a SAML role
*/
func (a *Client) GetOrganizationSamlRole(params *GetOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSamlRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSamlRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSamlRole",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/samlRoles/{samlRoleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSamlRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSamlRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSamlRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSamlRoles lists the s a m l roles for this organization

  List the SAML roles for this organization
*/
func (a *Client) GetOrganizationSamlRoles(params *GetOrganizationSamlRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSamlRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSamlRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSamlRoles",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/samlRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSamlRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSamlRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSamlRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSnmp returns the s n m p settings for an organization

  Return the SNMP settings for an organization
*/
func (a *Client) GetOrganizationSnmp(params *GetOrganizationSnmpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSnmpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSnmpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSnmp",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/snmp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSnmpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSnmpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSnmp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSummaryTopAppliancesByUtilization returns the top 10 appliances sorted by utilization over given time range

  Return the top 10 appliances sorted by utilization over given time range.
*/
func (a *Client) GetOrganizationSummaryTopAppliancesByUtilization(params *GetOrganizationSummaryTopAppliancesByUtilizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopAppliancesByUtilizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSummaryTopAppliancesByUtilizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSummaryTopAppliancesByUtilization",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/summary/top/appliances/byUtilization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSummaryTopAppliancesByUtilizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSummaryTopAppliancesByUtilizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSummaryTopAppliancesByUtilization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSummaryTopClientsByUsage returns metrics for organization s top 10 clients by data usage in mb over given time range

  Return metrics for organization's top 10 clients by data usage (in mb) over given time range.
*/
func (a *Client) GetOrganizationSummaryTopClientsByUsage(params *GetOrganizationSummaryTopClientsByUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopClientsByUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSummaryTopClientsByUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSummaryTopClientsByUsage",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/summary/top/clients/byUsage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSummaryTopClientsByUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSummaryTopClientsByUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSummaryTopClientsByUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSummaryTopClientsManufacturersByUsage returns metrics for organization s top clients by data usage in mb over given time range grouped by manufacturer

  Return metrics for organization's top clients by data usage (in mb) over given time range, grouped by manufacturer.
*/
func (a *Client) GetOrganizationSummaryTopClientsManufacturersByUsage(params *GetOrganizationSummaryTopClientsManufacturersByUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopClientsManufacturersByUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSummaryTopClientsManufacturersByUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSummaryTopClientsManufacturersByUsage",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/summary/top/clients/manufacturers/byUsage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSummaryTopClientsManufacturersByUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSummaryTopClientsManufacturersByUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSummaryTopClientsManufacturersByUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSummaryTopDevicesByUsage returns metrics for organization s top 10 devices sorted by data usage over given time range

  Return metrics for organization's top 10 devices sorted by data usage over given time range. Default unit is megabytes.
*/
func (a *Client) GetOrganizationSummaryTopDevicesByUsage(params *GetOrganizationSummaryTopDevicesByUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopDevicesByUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSummaryTopDevicesByUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSummaryTopDevicesByUsage",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/summary/top/devices/byUsage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSummaryTopDevicesByUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSummaryTopDevicesByUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSummaryTopDevicesByUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSummaryTopDevicesModelsByUsage returns metrics for organization s top 10 device models sorted by data usage over given time range

  Return metrics for organization's top 10 device models sorted by data usage over given time range. Default unit is megabytes.
*/
func (a *Client) GetOrganizationSummaryTopDevicesModelsByUsage(params *GetOrganizationSummaryTopDevicesModelsByUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopDevicesModelsByUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSummaryTopDevicesModelsByUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSummaryTopDevicesModelsByUsage",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/summary/top/devices/models/byUsage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSummaryTopDevicesModelsByUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSummaryTopDevicesModelsByUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSummaryTopDevicesModelsByUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSummaryTopSsidsByUsage returns metrics for organization s top 10 ssids by data usage over given time range

  Return metrics for organization's top 10 ssids by data usage over given time range. Default unit is megabytes.
*/
func (a *Client) GetOrganizationSummaryTopSsidsByUsage(params *GetOrganizationSummaryTopSsidsByUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopSsidsByUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSummaryTopSsidsByUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSummaryTopSsidsByUsage",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/summary/top/ssids/byUsage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSummaryTopSsidsByUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSummaryTopSsidsByUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSummaryTopSsidsByUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationSummaryTopSwitchesByEnergyUsage returns metrics for organization s top 10 switches by energy usage over given time range

  Return metrics for organization's top 10 switches by energy usage over given time range. Default unit is joules.
*/
func (a *Client) GetOrganizationSummaryTopSwitchesByEnergyUsage(params *GetOrganizationSummaryTopSwitchesByEnergyUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationSummaryTopSwitchesByEnergyUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationSummaryTopSwitchesByEnergyUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationSummaryTopSwitchesByEnergyUsage",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/summary/top/switches/byEnergyUsage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationSummaryTopSwitchesByEnergyUsageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationSummaryTopSwitchesByEnergyUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationSummaryTopSwitchesByEnergyUsage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationUplinksStatuses lists the uplink status of every meraki m x m g and z series devices in the organization

  List the uplink status of every Meraki MX, MG and Z series devices in the organization
*/
func (a *Client) GetOrganizationUplinksStatuses(params *GetOrganizationUplinksStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationUplinksStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationUplinksStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationUplinksStatuses",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/uplinks/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationUplinksStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationUplinksStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationUplinksStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationWebhooksAlertTypes returns a list of alert types to be used with managing webhook alerts

  Return a list of alert types to be used with managing webhook alerts
*/
func (a *Client) GetOrganizationWebhooksAlertTypes(params *GetOrganizationWebhooksAlertTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationWebhooksAlertTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationWebhooksAlertTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationWebhooksAlertTypes",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/webhooks/alertTypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationWebhooksAlertTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationWebhooksAlertTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationWebhooksAlertTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationWebhooksLogs returns the log of webhook p o s ts sent

  Return the log of webhook POSTs sent
*/
func (a *Client) GetOrganizationWebhooksLogs(params *GetOrganizationWebhooksLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationWebhooksLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationWebhooksLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationWebhooksLogs",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/webhooks/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationWebhooksLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationWebhooksLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationWebhooksLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizations lists the organizations that the user has privileges on

  List the organizations that the user has privileges on
*/
func (a *Client) GetOrganizations(params *GetOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizations",
		Method:             "GET",
		PathPattern:        "/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveOrganizationLicenses moves licenses to another organization

  Move licenses to another organization. This will also move any devices that the licenses are assigned to
*/
func (a *Client) MoveOrganizationLicenses(params *MoveOrganizationLicensesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveOrganizationLicensesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveOrganizationLicensesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "moveOrganizationLicenses",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/licenses/move",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveOrganizationLicensesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveOrganizationLicensesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for moveOrganizationLicenses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveOrganizationLicensesSeats moves s m seats to another organization

  Move SM seats to another organization
*/
func (a *Client) MoveOrganizationLicensesSeats(params *MoveOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveOrganizationLicensesSeatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveOrganizationLicensesSeatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "moveOrganizationLicensesSeats",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/licenses/moveSeats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MoveOrganizationLicensesSeatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveOrganizationLicensesSeatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for moveOrganizationLicensesSeats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReleaseFromOrganizationInventory releases a list of claimed devices from an organization

  Release a list of claimed devices from an organization.
*/
func (a *Client) ReleaseFromOrganizationInventory(params *ReleaseFromOrganizationInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReleaseFromOrganizationInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseFromOrganizationInventoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "releaseFromOrganizationInventory",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/inventory/release",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReleaseFromOrganizationInventoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReleaseFromOrganizationInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for releaseFromOrganizationInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RenewOrganizationLicensesSeats renews s m seats of a license

  Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
*/
func (a *Client) RenewOrganizationLicensesSeats(params *RenewOrganizationLicensesSeatsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenewOrganizationLicensesSeatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenewOrganizationLicensesSeatsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "renewOrganizationLicensesSeats",
		Method:             "POST",
		PathPattern:        "/organizations/{organizationId}/licenses/renewSeats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RenewOrganizationLicensesSeatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RenewOrganizationLicensesSeatsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for renewOrganizationLicensesSeats: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganization updates an organization

  Update an organization
*/
func (a *Client) UpdateOrganization(params *UpdateOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganization",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationActionBatch updates an action batch

  Update an action batch
*/
func (a *Client) UpdateOrganizationActionBatch(params *UpdateOrganizationActionBatchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationActionBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationActionBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationActionBatch",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/actionBatches/{actionBatchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationActionBatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationActionBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationActionBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationAdaptivePolicyACL updates an adaptive policy ACL

  Updates an adaptive policy ACL
*/
func (a *Client) UpdateOrganizationAdaptivePolicyACL(params *UpdateOrganizationAdaptivePolicyACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAdaptivePolicyACLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationAdaptivePolicyACLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationAdaptivePolicyAcl",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/acls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationAdaptivePolicyACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationAdaptivePolicyACLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationAdaptivePolicyAcl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationAdaptivePolicyGroup updates an adaptive policy group

  Updates an adaptive policy group. If updating "Infrastructure", only the SGT is allowed. Cannot update "Unknown".
*/
func (a *Client) UpdateOrganizationAdaptivePolicyGroup(params *UpdateOrganizationAdaptivePolicyGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAdaptivePolicyGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationAdaptivePolicyGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationAdaptivePolicyGroup",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationAdaptivePolicyGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationAdaptivePolicyGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationAdaptivePolicyGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationAdaptivePolicyPolicy updates an adaptive policy

  Update an Adaptive Policy
*/
func (a *Client) UpdateOrganizationAdaptivePolicyPolicy(params *UpdateOrganizationAdaptivePolicyPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAdaptivePolicyPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationAdaptivePolicyPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationAdaptivePolicyPolicy",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/policies/{adaptivePolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationAdaptivePolicyPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationAdaptivePolicyPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationAdaptivePolicyPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationAdaptivePolicySettings updates global adaptive policy settings

  Update global adaptive policy settings
*/
func (a *Client) UpdateOrganizationAdaptivePolicySettings(params *UpdateOrganizationAdaptivePolicySettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAdaptivePolicySettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationAdaptivePolicySettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationAdaptivePolicySettings",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/adaptivePolicy/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationAdaptivePolicySettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationAdaptivePolicySettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationAdaptivePolicySettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationAdmin updates an administrator

  Update an administrator
*/
func (a *Client) UpdateOrganizationAdmin(params *UpdateOrganizationAdminParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationAdminParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationAdmin",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/admins/{adminId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationAdminOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationAlertsProfile updates an organization wide alert config

  Update an organization-wide alert config
*/
func (a *Client) UpdateOrganizationAlertsProfile(params *UpdateOrganizationAlertsProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationAlertsProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationAlertsProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationAlertsProfile",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/alerts/profiles/{alertConfigId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationAlertsProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationAlertsProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationAlertsProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationBrandingPoliciesPriorities updates the priority ordering of an organization s branding policies

  Update the priority ordering of an organization's branding policies.
*/
func (a *Client) UpdateOrganizationBrandingPoliciesPriorities(params *UpdateOrganizationBrandingPoliciesPrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationBrandingPoliciesPrioritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationBrandingPoliciesPrioritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationBrandingPoliciesPriorities",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationBrandingPoliciesPrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationBrandingPoliciesPrioritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationBrandingPoliciesPriorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationBrandingPolicy updates a branding policy

  Update a branding policy
*/
func (a *Client) UpdateOrganizationBrandingPolicy(params *UpdateOrganizationBrandingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationBrandingPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationBrandingPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationBrandingPolicy",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationBrandingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationBrandingPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationBrandingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationConfigTemplate updates a configuration template

  Update a configuration template
*/
func (a *Client) UpdateOrganizationConfigTemplate(params *UpdateOrganizationConfigTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationConfigTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationConfigTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationConfigTemplate",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/configTemplates/{configTemplateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationConfigTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationConfigTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationConfigTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationLicense updates a license

  Update a license
*/
func (a *Client) UpdateOrganizationLicense(params *UpdateOrganizationLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationLicense",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/licenses/{licenseId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationLoginSecurity updates the login security settings for an organization

  Update the login security settings for an organization
*/
func (a *Client) UpdateOrganizationLoginSecurity(params *UpdateOrganizationLoginSecurityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationLoginSecurityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationLoginSecurityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationLoginSecurity",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/loginSecurity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationLoginSecurityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationLoginSecurityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationLoginSecurity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationSaml updates the s a m l s s o enabled settings for an organization

  Updates the SAML SSO enabled settings for an organization.
*/
func (a *Client) UpdateOrganizationSaml(params *UpdateOrganizationSamlParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationSamlOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationSamlParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationSaml",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/saml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationSamlReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationSamlOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationSaml: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationSamlIdp updates a s a m l Id p in your organization

  Update a SAML IdP in your organization
*/
func (a *Client) UpdateOrganizationSamlIdp(params *UpdateOrganizationSamlIdpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationSamlIdpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationSamlIdpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationSamlIdp",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/saml/idps/{idpId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationSamlIdpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationSamlIdpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationSamlIdp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationSamlRole updates a s a m l role

  Update a SAML role
*/
func (a *Client) UpdateOrganizationSamlRole(params *UpdateOrganizationSamlRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationSamlRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationSamlRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationSamlRole",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/samlRoles/{samlRoleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationSamlRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationSamlRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationSamlRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationSnmp updates the s n m p settings for an organization

  Update the SNMP settings for an organization
*/
func (a *Client) UpdateOrganizationSnmp(params *UpdateOrganizationSnmpParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationSnmpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationSnmpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationSnmp",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/snmp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationSnmpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationSnmpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationSnmp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
