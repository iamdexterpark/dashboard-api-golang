// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationUplinksStatusesParams creates a new GetOrganizationUplinksStatusesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrganizationUplinksStatusesParams() *GetOrganizationUplinksStatusesParams {
	return &GetOrganizationUplinksStatusesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationUplinksStatusesParamsWithTimeout creates a new GetOrganizationUplinksStatusesParams object
// with the ability to set a timeout on a request.
func NewGetOrganizationUplinksStatusesParamsWithTimeout(timeout time.Duration) *GetOrganizationUplinksStatusesParams {
	return &GetOrganizationUplinksStatusesParams{
		timeout: timeout,
	}
}

// NewGetOrganizationUplinksStatusesParamsWithContext creates a new GetOrganizationUplinksStatusesParams object
// with the ability to set a context for a request.
func NewGetOrganizationUplinksStatusesParamsWithContext(ctx context.Context) *GetOrganizationUplinksStatusesParams {
	return &GetOrganizationUplinksStatusesParams{
		Context: ctx,
	}
}

// NewGetOrganizationUplinksStatusesParamsWithHTTPClient creates a new GetOrganizationUplinksStatusesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrganizationUplinksStatusesParamsWithHTTPClient(client *http.Client) *GetOrganizationUplinksStatusesParams {
	return &GetOrganizationUplinksStatusesParams{
		HTTPClient: client,
	}
}

/* GetOrganizationUplinksStatusesParams contains all the parameters to send to the API endpoint
   for the get organization uplinks statuses operation.

   Typically these are written to a http.Request.
*/
type GetOrganizationUplinksStatusesParams struct {

	/* EndingBefore.

	   A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	EndingBefore *string

	/* Iccids.

	   A list of ICCIDs. The returned devices will be filtered to only include these ICCIDs.
	*/
	Iccids []string

	/* NetworkIds.

	   A list of network IDs. The returned devices will be filtered to only include these networks.
	*/
	NetworkIds []string

	// OrganizationID.
	OrganizationID string

	/* PerPage.

	   The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	*/
	PerPage *int64

	/* Serials.

	   A list of serial numbers. The returned devices will be filtered to only include these serials.
	*/
	Serials []string

	/* StartingAfter.

	   A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	*/
	StartingAfter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get organization uplinks statuses params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationUplinksStatusesParams) WithDefaults() *GetOrganizationUplinksStatusesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get organization uplinks statuses params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationUplinksStatusesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) WithTimeout(timeout time.Duration) *GetOrganizationUplinksStatusesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) WithContext(ctx context.Context) *GetOrganizationUplinksStatusesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) WithHTTPClient(client *http.Client) *GetOrganizationUplinksStatusesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndingBefore adds the endingBefore to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) WithEndingBefore(endingBefore *string) *GetOrganizationUplinksStatusesParams {
	o.SetEndingBefore(endingBefore)
	return o
}

// SetEndingBefore adds the endingBefore to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) SetEndingBefore(endingBefore *string) {
	o.EndingBefore = endingBefore
}

// WithIccids adds the iccids to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) WithIccids(iccids []string) *GetOrganizationUplinksStatusesParams {
	o.SetIccids(iccids)
	return o
}

// SetIccids adds the iccids to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) SetIccids(iccids []string) {
	o.Iccids = iccids
}

// WithNetworkIds adds the networkIds to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) WithNetworkIds(networkIds []string) *GetOrganizationUplinksStatusesParams {
	o.SetNetworkIds(networkIds)
	return o
}

// SetNetworkIds adds the networkIds to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) SetNetworkIds(networkIds []string) {
	o.NetworkIds = networkIds
}

// WithOrganizationID adds the organizationID to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) WithOrganizationID(organizationID string) *GetOrganizationUplinksStatusesParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) SetOrganizationID(organizationID string) {
	o.OrganizationID = organizationID
}

// WithPerPage adds the perPage to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) WithPerPage(perPage *int64) *GetOrganizationUplinksStatusesParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) SetPerPage(perPage *int64) {
	o.PerPage = perPage
}

// WithSerials adds the serials to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) WithSerials(serials []string) *GetOrganizationUplinksStatusesParams {
	o.SetSerials(serials)
	return o
}

// SetSerials adds the serials to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) SetSerials(serials []string) {
	o.Serials = serials
}

// WithStartingAfter adds the startingAfter to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) WithStartingAfter(startingAfter *string) *GetOrganizationUplinksStatusesParams {
	o.SetStartingAfter(startingAfter)
	return o
}

// SetStartingAfter adds the startingAfter to the get organization uplinks statuses params
func (o *GetOrganizationUplinksStatusesParams) SetStartingAfter(startingAfter *string) {
	o.StartingAfter = startingAfter
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationUplinksStatusesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndingBefore != nil {

		// query param endingBefore
		var qrEndingBefore string

		if o.EndingBefore != nil {
			qrEndingBefore = *o.EndingBefore
		}
		qEndingBefore := qrEndingBefore
		if qEndingBefore != "" {

			if err := r.SetQueryParam("endingBefore", qEndingBefore); err != nil {
				return err
			}
		}
	}

	if o.Iccids != nil {

		// binding items for iccids
		joinedIccids := o.bindParamIccids(reg)

		// query array param iccids
		if err := r.SetQueryParam("iccids", joinedIccids...); err != nil {
			return err
		}
	}

	if o.NetworkIds != nil {

		// binding items for networkIds
		joinedNetworkIds := o.bindParamNetworkIds(reg)

		// query array param networkIds
		if err := r.SetQueryParam("networkIds", joinedNetworkIds...); err != nil {
			return err
		}
	}

	// path param organizationId
	if err := r.SetPathParam("organizationId", o.OrganizationID); err != nil {
		return err
	}

	if o.PerPage != nil {

		// query param perPage
		var qrPerPage int64

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt64(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("perPage", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Serials != nil {

		// binding items for serials
		joinedSerials := o.bindParamSerials(reg)

		// query array param serials
		if err := r.SetQueryParam("serials", joinedSerials...); err != nil {
			return err
		}
	}

	if o.StartingAfter != nil {

		// query param startingAfter
		var qrStartingAfter string

		if o.StartingAfter != nil {
			qrStartingAfter = *o.StartingAfter
		}
		qStartingAfter := qrStartingAfter
		if qStartingAfter != "" {

			if err := r.SetQueryParam("startingAfter", qStartingAfter); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetOrganizationUplinksStatuses binds the parameter iccids
func (o *GetOrganizationUplinksStatusesParams) bindParamIccids(formats strfmt.Registry) []string {
	iccidsIR := o.Iccids

	var iccidsIC []string
	for _, iccidsIIR := range iccidsIR { // explode []string

		iccidsIIV := iccidsIIR // string as string
		iccidsIC = append(iccidsIC, iccidsIIV)
	}

	// items.CollectionFormat: ""
	iccidsIS := swag.JoinByFormat(iccidsIC, "")

	return iccidsIS
}

// bindParamGetOrganizationUplinksStatuses binds the parameter networkIds
func (o *GetOrganizationUplinksStatusesParams) bindParamNetworkIds(formats strfmt.Registry) []string {
	networkIdsIR := o.NetworkIds

	var networkIdsIC []string
	for _, networkIdsIIR := range networkIdsIR { // explode []string

		networkIdsIIV := networkIdsIIR // string as string
		networkIdsIC = append(networkIdsIC, networkIdsIIV)
	}

	// items.CollectionFormat: ""
	networkIdsIS := swag.JoinByFormat(networkIdsIC, "")

	return networkIdsIS
}

// bindParamGetOrganizationUplinksStatuses binds the parameter serials
func (o *GetOrganizationUplinksStatusesParams) bindParamSerials(formats strfmt.Registry) []string {
	serialsIR := o.Serials

	var serialsIC []string
	for _, serialsIIR := range serialsIR { // explode []string

		serialsIIV := serialsIIR // string as string
		serialsIC = append(serialsIC, serialsIIV)
	}

	// items.CollectionFormat: ""
	serialsIS := swag.JoinByFormat(serialsIC, "")

	return serialsIS
}
