// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MoveOrganizationLicensesSeatsReader is a Reader for the MoveOrganizationLicensesSeats structure.
type MoveOrganizationLicensesSeatsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MoveOrganizationLicensesSeatsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMoveOrganizationLicensesSeatsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMoveOrganizationLicensesSeatsOK creates a MoveOrganizationLicensesSeatsOK with default headers values
func NewMoveOrganizationLicensesSeatsOK() *MoveOrganizationLicensesSeatsOK {
	return &MoveOrganizationLicensesSeatsOK{}
}

/* MoveOrganizationLicensesSeatsOK describes a response with status code 200, with default header values.

Successful operation
*/
type MoveOrganizationLicensesSeatsOK struct {
	Payload interface{}
}

func (o *MoveOrganizationLicensesSeatsOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organizationId}/licenses/moveSeats][%d] moveOrganizationLicensesSeatsOK  %+v", 200, o.Payload)
}
func (o *MoveOrganizationLicensesSeatsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *MoveOrganizationLicensesSeatsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*MoveOrganizationLicensesSeatsBody move organization licenses seats body
// Example: {"destOrganizationId":"2930418","licenseId":"1234","seatCount":20}
swagger:model MoveOrganizationLicensesSeatsBody
*/
type MoveOrganizationLicensesSeatsBody struct {

	// The ID of the organization to move the SM seats to
	// Required: true
	DestOrganizationID *string `json:"destOrganizationId"`

	// The ID of the SM license to move the seats from
	// Required: true
	LicenseID *string `json:"licenseId"`

	// The number of seats to move to the new organization. Must be less than or equal to the total number of seats of the license
	// Required: true
	SeatCount *int64 `json:"seatCount"`
}

// Validate validates this move organization licenses seats body
func (o *MoveOrganizationLicensesSeatsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDestOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLicenseID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSeatCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MoveOrganizationLicensesSeatsBody) validateDestOrganizationID(formats strfmt.Registry) error {

	if err := validate.Required("moveOrganizationLicensesSeats"+"."+"destOrganizationId", "body", o.DestOrganizationID); err != nil {
		return err
	}

	return nil
}

func (o *MoveOrganizationLicensesSeatsBody) validateLicenseID(formats strfmt.Registry) error {

	if err := validate.Required("moveOrganizationLicensesSeats"+"."+"licenseId", "body", o.LicenseID); err != nil {
		return err
	}

	return nil
}

func (o *MoveOrganizationLicensesSeatsBody) validateSeatCount(formats strfmt.Registry) error {

	if err := validate.Required("moveOrganizationLicensesSeats"+"."+"seatCount", "body", o.SeatCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this move organization licenses seats body based on context it is used
func (o *MoveOrganizationLicensesSeatsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MoveOrganizationLicensesSeatsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MoveOrganizationLicensesSeatsBody) UnmarshalBinary(b []byte) error {
	var res MoveOrganizationLicensesSeatsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
