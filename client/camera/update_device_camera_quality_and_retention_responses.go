// Code generated by go-swagger; DO NOT EDIT.

package camera

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateDeviceCameraQualityAndRetentionReader is a Reader for the UpdateDeviceCameraQualityAndRetention structure.
type UpdateDeviceCameraQualityAndRetentionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeviceCameraQualityAndRetentionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDeviceCameraQualityAndRetentionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDeviceCameraQualityAndRetentionOK creates a UpdateDeviceCameraQualityAndRetentionOK with default headers values
func NewUpdateDeviceCameraQualityAndRetentionOK() *UpdateDeviceCameraQualityAndRetentionOK {
	return &UpdateDeviceCameraQualityAndRetentionOK{}
}

/* UpdateDeviceCameraQualityAndRetentionOK describes a response with status code 200, with default header values.

Successful operation
*/
type UpdateDeviceCameraQualityAndRetentionOK struct {
	Payload interface{}
}

func (o *UpdateDeviceCameraQualityAndRetentionOK) Error() string {
	return fmt.Sprintf("[PUT /devices/{serial}/camera/qualityAndRetention][%d] updateDeviceCameraQualityAndRetentionOK  %+v", 200, o.Payload)
}
func (o *UpdateDeviceCameraQualityAndRetentionOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateDeviceCameraQualityAndRetentionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateDeviceCameraQualityAndRetentionBody update device camera quality and retention body
// Example: {"audioRecordingEnabled":false,"motionBasedRetentionEnabled":false,"motionDetectorVersion":2,"profileId":"1234","quality":"Standard","resolution":"1280x720","restrictedBandwidthModeEnabled":false}
swagger:model UpdateDeviceCameraQualityAndRetentionBody
*/
type UpdateDeviceCameraQualityAndRetentionBody struct {

	// Boolean indicating if audio recording is enabled(true) or disabled(false) on the camera
	AudioRecordingEnabled bool `json:"audioRecordingEnabled,omitempty"`

	// Boolean indicating if motion-based retention is enabled(true) or disabled(false) on the camera.
	MotionBasedRetentionEnabled bool `json:"motionBasedRetentionEnabled,omitempty"`

	// The version of the motion detector that will be used by the camera. Only applies to Gen 2 cameras. Defaults to v2.
	// Enum: [1 2]
	MotionDetectorVersion int64 `json:"motionDetectorVersion,omitempty"`

	// The ID of a quality and retention profile to assign to the camera. The profile's settings will override all of the per-camera quality and retention settings. If the value of this parameter is null, any existing profile will be unassigned from the camera.
	ProfileID string `json:"profileId,omitempty"`

	// Quality of the camera. Can be one of 'Standard', 'High' or 'Enhanced'. Not all qualities are supported by every camera model.
	// Enum: [Standard High Enhanced]
	Quality string `json:"quality,omitempty"`

	// Resolution of the camera. Can be one of '1280x720', '1920x1080', '1080x1080' or '2058x2058'. Not all resolutions are supported by every camera model.
	// Enum: [1280x720 1920x1080 1080x1080 2058x2058]
	Resolution string `json:"resolution,omitempty"`

	// Boolean indicating if restricted bandwidth is enabled(true) or disabled(false) on the camera. This setting does not apply to MV2 cameras.
	RestrictedBandwidthModeEnabled bool `json:"restrictedBandwidthModeEnabled,omitempty"`
}

// Validate validates this update device camera quality and retention body
func (o *UpdateDeviceCameraQualityAndRetentionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMotionDetectorVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResolution(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateDeviceCameraQualityAndRetentionBodyTypeMotionDetectorVersionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceCameraQualityAndRetentionBodyTypeMotionDetectorVersionPropEnum = append(updateDeviceCameraQualityAndRetentionBodyTypeMotionDetectorVersionPropEnum, v)
	}
}

// prop value enum
func (o *UpdateDeviceCameraQualityAndRetentionBody) validateMotionDetectorVersionEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, updateDeviceCameraQualityAndRetentionBodyTypeMotionDetectorVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceCameraQualityAndRetentionBody) validateMotionDetectorVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.MotionDetectorVersion) { // not required
		return nil
	}

	// value enum
	if err := o.validateMotionDetectorVersionEnum("updateDeviceCameraQualityAndRetention"+"."+"motionDetectorVersion", "body", o.MotionDetectorVersion); err != nil {
		return err
	}

	return nil
}

var updateDeviceCameraQualityAndRetentionBodyTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Standard","High","Enhanced"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceCameraQualityAndRetentionBodyTypeQualityPropEnum = append(updateDeviceCameraQualityAndRetentionBodyTypeQualityPropEnum, v)
	}
}

const (

	// UpdateDeviceCameraQualityAndRetentionBodyQualityStandard captures enum value "Standard"
	UpdateDeviceCameraQualityAndRetentionBodyQualityStandard string = "Standard"

	// UpdateDeviceCameraQualityAndRetentionBodyQualityHigh captures enum value "High"
	UpdateDeviceCameraQualityAndRetentionBodyQualityHigh string = "High"

	// UpdateDeviceCameraQualityAndRetentionBodyQualityEnhanced captures enum value "Enhanced"
	UpdateDeviceCameraQualityAndRetentionBodyQualityEnhanced string = "Enhanced"
)

// prop value enum
func (o *UpdateDeviceCameraQualityAndRetentionBody) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceCameraQualityAndRetentionBodyTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceCameraQualityAndRetentionBody) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(o.Quality) { // not required
		return nil
	}

	// value enum
	if err := o.validateQualityEnum("updateDeviceCameraQualityAndRetention"+"."+"quality", "body", o.Quality); err != nil {
		return err
	}

	return nil
}

var updateDeviceCameraQualityAndRetentionBodyTypeResolutionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1280x720","1920x1080","1080x1080","2058x2058"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateDeviceCameraQualityAndRetentionBodyTypeResolutionPropEnum = append(updateDeviceCameraQualityAndRetentionBodyTypeResolutionPropEnum, v)
	}
}

const (

	// UpdateDeviceCameraQualityAndRetentionBodyResolutionNr1280x720 captures enum value "1280x720"
	UpdateDeviceCameraQualityAndRetentionBodyResolutionNr1280x720 string = "1280x720"

	// UpdateDeviceCameraQualityAndRetentionBodyResolutionNr1920x1080 captures enum value "1920x1080"
	UpdateDeviceCameraQualityAndRetentionBodyResolutionNr1920x1080 string = "1920x1080"

	// UpdateDeviceCameraQualityAndRetentionBodyResolutionNr1080x1080 captures enum value "1080x1080"
	UpdateDeviceCameraQualityAndRetentionBodyResolutionNr1080x1080 string = "1080x1080"

	// UpdateDeviceCameraQualityAndRetentionBodyResolutionNr2058x2058 captures enum value "2058x2058"
	UpdateDeviceCameraQualityAndRetentionBodyResolutionNr2058x2058 string = "2058x2058"
)

// prop value enum
func (o *UpdateDeviceCameraQualityAndRetentionBody) validateResolutionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateDeviceCameraQualityAndRetentionBodyTypeResolutionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDeviceCameraQualityAndRetentionBody) validateResolution(formats strfmt.Registry) error {
	if swag.IsZero(o.Resolution) { // not required
		return nil
	}

	// value enum
	if err := o.validateResolutionEnum("updateDeviceCameraQualityAndRetention"+"."+"resolution", "body", o.Resolution); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update device camera quality and retention body based on context it is used
func (o *UpdateDeviceCameraQualityAndRetentionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceCameraQualityAndRetentionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceCameraQualityAndRetentionBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceCameraQualityAndRetentionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
