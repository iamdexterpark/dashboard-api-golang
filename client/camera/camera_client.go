// Code generated by go-swagger; DO NOT EDIT.

package camera

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new camera API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for camera API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkCameraQualityRetentionProfile(params *CreateNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkCameraQualityRetentionProfileOK, error)

	CreateNetworkCameraWirelessProfile(params *CreateNetworkCameraWirelessProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkCameraWirelessProfileOK, error)

	DeleteNetworkCameraQualityRetentionProfile(params *DeleteNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkCameraQualityRetentionProfileNoContent, error)

	DeleteNetworkCameraWirelessProfile(params *DeleteNetworkCameraWirelessProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkCameraWirelessProfileNoContent, error)

	GenerateDeviceCameraSnapshot(params *GenerateDeviceCameraSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateDeviceCameraSnapshotAccepted, error)

	GetDeviceCameraAnalyticsLive(params *GetDeviceCameraAnalyticsLiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraAnalyticsLiveOK, error)

	GetDeviceCameraAnalyticsOverview(params *GetDeviceCameraAnalyticsOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraAnalyticsOverviewOK, error)

	GetDeviceCameraAnalyticsRecent(params *GetDeviceCameraAnalyticsRecentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraAnalyticsRecentOK, error)

	GetDeviceCameraAnalyticsZoneHistory(params *GetDeviceCameraAnalyticsZoneHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraAnalyticsZoneHistoryOK, error)

	GetDeviceCameraAnalyticsZones(params *GetDeviceCameraAnalyticsZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraAnalyticsZonesOK, error)

	GetDeviceCameraQualityAndRetention(params *GetDeviceCameraQualityAndRetentionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraQualityAndRetentionOK, error)

	GetDeviceCameraSense(params *GetDeviceCameraSenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraSenseOK, error)

	GetDeviceCameraSenseObjectDetectionModels(params *GetDeviceCameraSenseObjectDetectionModelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraSenseObjectDetectionModelsOK, error)

	GetDeviceCameraVideoLink(params *GetDeviceCameraVideoLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraVideoLinkOK, error)

	GetDeviceCameraVideoSettings(params *GetDeviceCameraVideoSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraVideoSettingsOK, error)

	GetDeviceCameraWirelessProfiles(params *GetDeviceCameraWirelessProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraWirelessProfilesOK, error)

	GetNetworkCameraQualityRetentionProfile(params *GetNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCameraQualityRetentionProfileOK, error)

	GetNetworkCameraQualityRetentionProfiles(params *GetNetworkCameraQualityRetentionProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCameraQualityRetentionProfilesOK, error)

	GetNetworkCameraSchedules(params *GetNetworkCameraSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCameraSchedulesOK, error)

	GetNetworkCameraWirelessProfile(params *GetNetworkCameraWirelessProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCameraWirelessProfileOK, error)

	GetNetworkCameraWirelessProfiles(params *GetNetworkCameraWirelessProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCameraWirelessProfilesOK, error)

	GetOrganizationCameraOnboardingStatuses(params *GetOrganizationCameraOnboardingStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationCameraOnboardingStatusesOK, error)

	UpdateDeviceCameraQualityAndRetention(params *UpdateDeviceCameraQualityAndRetentionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCameraQualityAndRetentionOK, error)

	UpdateDeviceCameraSense(params *UpdateDeviceCameraSenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCameraSenseOK, error)

	UpdateDeviceCameraVideoSettings(params *UpdateDeviceCameraVideoSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCameraVideoSettingsOK, error)

	UpdateDeviceCameraWirelessProfiles(params *UpdateDeviceCameraWirelessProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCameraWirelessProfilesOK, error)

	UpdateNetworkCameraQualityRetentionProfile(params *UpdateNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCameraQualityRetentionProfileOK, error)

	UpdateNetworkCameraWirelessProfile(params *UpdateNetworkCameraWirelessProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCameraWirelessProfileOK, error)

	UpdateOrganizationCameraOnboardingStatuses(params *UpdateOrganizationCameraOnboardingStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationCameraOnboardingStatusesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkCameraQualityRetentionProfile creates new quality retention profile for this network

  Creates new quality retention profile for this network.
*/
func (a *Client) CreateNetworkCameraQualityRetentionProfile(params *CreateNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkCameraQualityRetentionProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkCameraQualityRetentionProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkCameraQualityRetentionProfile",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/camera/qualityRetentionProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkCameraQualityRetentionProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkCameraQualityRetentionProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkCameraQualityRetentionProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkCameraWirelessProfile creates a new camera wireless profile for this network

  Creates a new camera wireless profile for this network.
*/
func (a *Client) CreateNetworkCameraWirelessProfile(params *CreateNetworkCameraWirelessProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkCameraWirelessProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkCameraWirelessProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNetworkCameraWirelessProfile",
		Method:             "POST",
		PathPattern:        "/networks/{networkId}/camera/wirelessProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkCameraWirelessProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkCameraWirelessProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNetworkCameraWirelessProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkCameraQualityRetentionProfile deletes an existing quality retention profile for this network

  Delete an existing quality retention profile for this network.
*/
func (a *Client) DeleteNetworkCameraQualityRetentionProfile(params *DeleteNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkCameraQualityRetentionProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkCameraQualityRetentionProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkCameraQualityRetentionProfile",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkCameraQualityRetentionProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkCameraQualityRetentionProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkCameraQualityRetentionProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkCameraWirelessProfile deletes an existing camera wireless profile for this network

  Delete an existing camera wireless profile for this network.
*/
func (a *Client) DeleteNetworkCameraWirelessProfile(params *DeleteNetworkCameraWirelessProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkCameraWirelessProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkCameraWirelessProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNetworkCameraWirelessProfile",
		Method:             "DELETE",
		PathPattern:        "/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkCameraWirelessProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkCameraWirelessProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkCameraWirelessProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateDeviceCameraSnapshot generates a snapshot of what the camera sees at the specified time and return a link to that image

  Generate a snapshot of what the camera sees at the specified time and return a link to that image.
*/
func (a *Client) GenerateDeviceCameraSnapshot(params *GenerateDeviceCameraSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateDeviceCameraSnapshotAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateDeviceCameraSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateDeviceCameraSnapshot",
		Method:             "POST",
		PathPattern:        "/devices/{serial}/camera/generateSnapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateDeviceCameraSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateDeviceCameraSnapshotAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateDeviceCameraSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraAnalyticsLive returns live state from camera of analytics zones

  Returns live state from camera of analytics zones
*/
func (a *Client) GetDeviceCameraAnalyticsLive(params *GetDeviceCameraAnalyticsLiveParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraAnalyticsLiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraAnalyticsLiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCameraAnalyticsLive",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/analytics/live",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraAnalyticsLiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraAnalyticsLiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraAnalyticsLive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraAnalyticsOverview returns an overview of aggregate analytics data for a timespan

  Returns an overview of aggregate analytics data for a timespan
*/
func (a *Client) GetDeviceCameraAnalyticsOverview(params *GetDeviceCameraAnalyticsOverviewParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraAnalyticsOverviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraAnalyticsOverviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCameraAnalyticsOverview",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/analytics/overview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraAnalyticsOverviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraAnalyticsOverviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraAnalyticsOverview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraAnalyticsRecent returns most recent record for analytics zones

  Returns most recent record for analytics zones
*/
func (a *Client) GetDeviceCameraAnalyticsRecent(params *GetDeviceCameraAnalyticsRecentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraAnalyticsRecentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraAnalyticsRecentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCameraAnalyticsRecent",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/analytics/recent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraAnalyticsRecentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraAnalyticsRecentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraAnalyticsRecent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraAnalyticsZoneHistory returns historical records for analytic zones

  Return historical records for analytic zones
*/
func (a *Client) GetDeviceCameraAnalyticsZoneHistory(params *GetDeviceCameraAnalyticsZoneHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraAnalyticsZoneHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraAnalyticsZoneHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCameraAnalyticsZoneHistory",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/analytics/zones/{zoneId}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraAnalyticsZoneHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraAnalyticsZoneHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraAnalyticsZoneHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraAnalyticsZones returns all configured analytic zones for this camera

  Returns all configured analytic zones for this camera
*/
func (a *Client) GetDeviceCameraAnalyticsZones(params *GetDeviceCameraAnalyticsZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraAnalyticsZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraAnalyticsZonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCameraAnalyticsZones",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/analytics/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraAnalyticsZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraAnalyticsZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraAnalyticsZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraQualityAndRetention returns quality and retention settings for the given camera

  Returns quality and retention settings for the given camera
*/
func (a *Client) GetDeviceCameraQualityAndRetention(params *GetDeviceCameraQualityAndRetentionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraQualityAndRetentionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraQualityAndRetentionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCameraQualityAndRetention",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/qualityAndRetention",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraQualityAndRetentionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraQualityAndRetentionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraQualityAndRetention: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraSense returns sense settings for a given camera

  Returns sense settings for a given camera
*/
func (a *Client) GetDeviceCameraSense(params *GetDeviceCameraSenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraSenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraSenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCameraSense",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/sense",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraSenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraSenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraSense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraSenseObjectDetectionModels returns the m v sense object detection model list for the given camera

  Returns the MV Sense object detection model list for the given camera
*/
func (a *Client) GetDeviceCameraSenseObjectDetectionModels(params *GetDeviceCameraSenseObjectDetectionModelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraSenseObjectDetectionModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraSenseObjectDetectionModelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCameraSenseObjectDetectionModels",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/sense/objectDetectionModels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraSenseObjectDetectionModelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraSenseObjectDetectionModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraSenseObjectDetectionModels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraVideoLink returns video link to the specified camera

  Returns video link to the specified camera. If a timestamp is supplied, it links to that timestamp.
*/
func (a *Client) GetDeviceCameraVideoLink(params *GetDeviceCameraVideoLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraVideoLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraVideoLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCameraVideoLink",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/videoLink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraVideoLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraVideoLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraVideoLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraVideoSettings returns video settings for the given camera

  Returns video settings for the given camera
*/
func (a *Client) GetDeviceCameraVideoSettings(params *GetDeviceCameraVideoSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraVideoSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraVideoSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCameraVideoSettings",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/video/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraVideoSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraVideoSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraVideoSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceCameraWirelessProfiles returns wireless profile assigned to the given camera

  Returns wireless profile assigned to the given camera
*/
func (a *Client) GetDeviceCameraWirelessProfiles(params *GetDeviceCameraWirelessProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDeviceCameraWirelessProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCameraWirelessProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeviceCameraWirelessProfiles",
		Method:             "GET",
		PathPattern:        "/devices/{serial}/camera/wirelessProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceCameraWirelessProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceCameraWirelessProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceCameraWirelessProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCameraQualityRetentionProfile retrieves a single quality retention profile

  Retrieve a single quality retention profile
*/
func (a *Client) GetNetworkCameraQualityRetentionProfile(params *GetNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCameraQualityRetentionProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCameraQualityRetentionProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkCameraQualityRetentionProfile",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCameraQualityRetentionProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCameraQualityRetentionProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCameraQualityRetentionProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCameraQualityRetentionProfiles lists the quality retention profiles for this network

  List the quality retention profiles for this network
*/
func (a *Client) GetNetworkCameraQualityRetentionProfiles(params *GetNetworkCameraQualityRetentionProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCameraQualityRetentionProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCameraQualityRetentionProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkCameraQualityRetentionProfiles",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/camera/qualityRetentionProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCameraQualityRetentionProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCameraQualityRetentionProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCameraQualityRetentionProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCameraSchedules returns a list of all camera recording schedules

  Returns a list of all camera recording schedules.
*/
func (a *Client) GetNetworkCameraSchedules(params *GetNetworkCameraSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCameraSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCameraSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkCameraSchedules",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/camera/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCameraSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCameraSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCameraSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCameraWirelessProfile retrieves a single camera wireless profile

  Retrieve a single camera wireless profile.
*/
func (a *Client) GetNetworkCameraWirelessProfile(params *GetNetworkCameraWirelessProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCameraWirelessProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCameraWirelessProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkCameraWirelessProfile",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCameraWirelessProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCameraWirelessProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCameraWirelessProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkCameraWirelessProfiles lists the camera wireless profiles for this network

  List the camera wireless profiles for this network.
*/
func (a *Client) GetNetworkCameraWirelessProfiles(params *GetNetworkCameraWirelessProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkCameraWirelessProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkCameraWirelessProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNetworkCameraWirelessProfiles",
		Method:             "GET",
		PathPattern:        "/networks/{networkId}/camera/wirelessProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkCameraWirelessProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkCameraWirelessProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkCameraWirelessProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationCameraOnboardingStatuses fetches onboarding status of cameras

  Fetch onboarding status of cameras
*/
func (a *Client) GetOrganizationCameraOnboardingStatuses(params *GetOrganizationCameraOnboardingStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationCameraOnboardingStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationCameraOnboardingStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationCameraOnboardingStatuses",
		Method:             "GET",
		PathPattern:        "/organizations/{organizationId}/camera/onboarding/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationCameraOnboardingStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationCameraOnboardingStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationCameraOnboardingStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceCameraQualityAndRetention updates quality and retention settings for the given camera

  Update quality and retention settings for the given camera
*/
func (a *Client) UpdateDeviceCameraQualityAndRetention(params *UpdateDeviceCameraQualityAndRetentionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCameraQualityAndRetentionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceCameraQualityAndRetentionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDeviceCameraQualityAndRetention",
		Method:             "PUT",
		PathPattern:        "/devices/{serial}/camera/qualityAndRetention",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceCameraQualityAndRetentionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceCameraQualityAndRetentionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceCameraQualityAndRetention: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceCameraSense updates sense settings for the given camera

  Update sense settings for the given camera
*/
func (a *Client) UpdateDeviceCameraSense(params *UpdateDeviceCameraSenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCameraSenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceCameraSenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDeviceCameraSense",
		Method:             "PUT",
		PathPattern:        "/devices/{serial}/camera/sense",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceCameraSenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceCameraSenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceCameraSense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceCameraVideoSettings updates video settings for the given camera

  Update video settings for the given camera
*/
func (a *Client) UpdateDeviceCameraVideoSettings(params *UpdateDeviceCameraVideoSettingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCameraVideoSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceCameraVideoSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDeviceCameraVideoSettings",
		Method:             "PUT",
		PathPattern:        "/devices/{serial}/camera/video/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceCameraVideoSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceCameraVideoSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceCameraVideoSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeviceCameraWirelessProfiles assigns wireless profiles to the given camera

  Assign wireless profiles to the given camera. Incremental updates are not supported, all profile assignment need to be supplied at once.
*/
func (a *Client) UpdateDeviceCameraWirelessProfiles(params *UpdateDeviceCameraWirelessProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDeviceCameraWirelessProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceCameraWirelessProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDeviceCameraWirelessProfiles",
		Method:             "PUT",
		PathPattern:        "/devices/{serial}/camera/wirelessProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceCameraWirelessProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeviceCameraWirelessProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDeviceCameraWirelessProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkCameraQualityRetentionProfile updates an existing quality retention profile for this network

  Update an existing quality retention profile for this network.
*/
func (a *Client) UpdateNetworkCameraQualityRetentionProfile(params *UpdateNetworkCameraQualityRetentionProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCameraQualityRetentionProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkCameraQualityRetentionProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkCameraQualityRetentionProfile",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/camera/qualityRetentionProfiles/{qualityRetentionProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkCameraQualityRetentionProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkCameraQualityRetentionProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkCameraQualityRetentionProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNetworkCameraWirelessProfile updates an existing camera wireless profile in this network

  Update an existing camera wireless profile in this network.
*/
func (a *Client) UpdateNetworkCameraWirelessProfile(params *UpdateNetworkCameraWirelessProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkCameraWirelessProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkCameraWirelessProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNetworkCameraWirelessProfile",
		Method:             "PUT",
		PathPattern:        "/networks/{networkId}/camera/wirelessProfiles/{wirelessProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkCameraWirelessProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkCameraWirelessProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNetworkCameraWirelessProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganizationCameraOnboardingStatuses notifies that credential handoff to camera has completed

  Notify that credential handoff to camera has completed
*/
func (a *Client) UpdateOrganizationCameraOnboardingStatuses(params *UpdateOrganizationCameraOnboardingStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationCameraOnboardingStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationCameraOnboardingStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationCameraOnboardingStatuses",
		Method:             "PUT",
		PathPattern:        "/organizations/{organizationId}/camera/onboarding/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationCameraOnboardingStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationCameraOnboardingStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationCameraOnboardingStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
